"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_plugins_1 = require("@expo/config-plugins");
const plist_1 = __importDefault(require("@expo/plist"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const addBroadcastExtensionXcodeTarget_1 = __importDefault(require("./addBroadcastExtensionXcodeTarget"));
// adds the extension's entitlements file
const withTarget = (configuration, props) => {
    return (0, config_plugins_1.withXcodeProject)(configuration, (config) => {
        const appName = config.modRequest.projectName;
        const extensionName = 'broadcast';
        const extensionBundleIdentifier = `${config.ios
            .bundleIdentifier}.broadcast`;
        const currentProjectVersion = config.ios.buildNumber || '1';
        const marketingVersion = config.version;
        const proj = config.modResults;
        const developmentTeamId = props?.appleTeamId;
        if (!developmentTeamId) {
            throw new Error('No appleTeamId was provided in the Expo config. Please provide one to create the screenshare broadcast extension');
        }
        (0, addBroadcastExtensionXcodeTarget_1.default)(proj, {
            appName,
            extensionName,
            extensionBundleIdentifier,
            currentProjectVersion,
            marketingVersion,
            developmentTeamId,
        });
        const appGroupIdentifier = `group.${config.ios
            .bundleIdentifier}.appgroup`;
        const extensionRootPath = path.join(config.modRequest.platformProjectRoot, 'broadcast');
        addBroadcastEntitlementsFile({
            proj,
            extensionRootPath,
            appGroupIdentifier,
        });
        addBroadcastSourceFiles({
            proj,
            extensionRootPath,
            appGroupIdentifier,
        });
        return config;
    });
};
exports.default = withTarget;
const addBroadcastEntitlementsFile = ({ proj, extensionRootPath, appGroupIdentifier, }) => {
    const entitlementsPath = path.join(extensionRootPath, 'broadcast.entitlements');
    const extensionEntitlements = {
        'com.apple.security.application-groups': [appGroupIdentifier],
    };
    // create file
    fs.mkdirSync(path.dirname(entitlementsPath), {
        recursive: true,
    });
    fs.writeFileSync(entitlementsPath, plist_1.default.build(extensionEntitlements));
    // add file to extension group
    const targetUuid = proj.findTargetKey('broadcast');
    const groupUuid = proj.findPBXGroupKey({ name: 'broadcast' });
    proj.addFile('broadcast.entitlements', groupUuid, {
        target: targetUuid,
        lastKnownFileType: 'text.plist.entitlements',
    });
};
const addBroadcastSourceFiles = ({ proj, extensionRootPath, appGroupIdentifier, }) => {
    fs.mkdirSync(extensionRootPath, { recursive: true });
    fs.copyFileSync(path.join(__dirname, '..', '..', 'static', 'Atomic.swift'), path.join(extensionRootPath, 'Atomic.swift'));
    fs.copyFileSync(path.join(__dirname, '..', '..', 'static', 'DarwinNotificationCenter.swift'), path.join(extensionRootPath, 'DarwinNotificationCenter.swift'));
    fs.copyFileSync(path.join(__dirname, '..', '..', 'static', 'SampleUploader.swift'), path.join(extensionRootPath, 'SampleUploader.swift'));
    fs.copyFileSync(path.join(__dirname, '..', '..', 'static', 'SocketConnection.swift'), path.join(extensionRootPath, 'SocketConnection.swift'));
    // Update app group bundle id in SampleHandler code
    const code = fs.readFileSync(path.join(extensionRootPath, 'SampleHandler.swift'), { encoding: 'utf-8' });
    fs.writeFileSync(path.join(extensionRootPath, 'SampleHandler.swift'), code.replace('group.com.example.broadcast.appgroup', appGroupIdentifier));
    const targetUuid = proj.findTargetKey('broadcast');
    const groupUuid = proj.findPBXGroupKey({ name: 'broadcast' });
    if (!targetUuid) {
        console.error('Failed to find "broadcast" target!');
        return;
    }
    if (!groupUuid) {
        console.error('Failed to find "broadcast" group!');
        return;
    }
    proj.addSourceFile('Atomic.swift', {
        target: targetUuid,
    }, groupUuid);
    proj.addSourceFile('DarwinNotificationCenter.swift', {
        target: targetUuid,
    }, groupUuid);
    proj.addSourceFile('SampleUploader.swift', {
        target: targetUuid,
    }, groupUuid);
    proj.addSourceFile('SocketConnection.swift', {
        target: targetUuid,
    }, groupUuid);
};
