"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addToSwiftBridgingHeaderFile = addToSwiftBridgingHeaderFile;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function findBridgingHeaderName(dir) {
    const files = fs_1.default.readdirSync(dir);
    for (const file of files) {
        const fullPath = path_1.default.join(dir, file);
        const stat = fs_1.default.statSync(fullPath);
        if (stat.isDirectory()) {
            const result = findBridgingHeaderName(fullPath);
            if (result)
                return result; // Return if found in subdirectory
        }
        else if (file.endsWith('.pbxproj')) {
            const content = fs_1.default.readFileSync(fullPath, 'utf8');
            const match = content.match(/SWIFT_OBJC_BRIDGING_HEADER\s*=\s*(.*?);/);
            if (match && match[1]) {
                return match[1].trim();
            }
        }
    }
    return null; // Not found
}
/**
 * Adds contents to the Swift bridging header file.
 * @param projectRoot The root directory of the project.
 * @param action The function to add the contents the bridging header file.
 */
async function addToSwiftBridgingHeaderFile(projectRoot, action) {
    const bridgingHeaderFileName = findBridgingHeaderName(projectRoot);
    if (!bridgingHeaderFileName) {
        console.error('No bridging header found.');
        return;
    }
    const bridgingHeaderFullPath = path_1.default.resolve(projectRoot, `ios/${bridgingHeaderFileName.replace(/['"]/g, '')}`);
    if (!fs_1.default.existsSync(bridgingHeaderFullPath)) {
        console.error(`File not found at: ${bridgingHeaderFullPath}`);
        return;
    }
    const headerFileContents = await fs_1.default.promises.readFile(bridgingHeaderFullPath, 'utf8');
    const newHeaderFileContents = action(headerFileContents);
    await fs_1.default.promises.writeFile(bridgingHeaderFullPath, newHeaderFileContents);
}
