"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_plugins_1 = require("@expo/config-plugins");
const codeMod_1 = require("@expo/config-plugins/build/android/codeMod");
const addNewLinesToMainActivity_1 = __importDefault(require("./common/addNewLinesToMainActivity"));
const withStreamVideoReactNativeSDKMainActivity = (configuration, props) => {
    return (0, config_plugins_1.withMainActivity)(configuration, (config) => {
        const isMainActivityJava = config.modResults.language === 'java';
        config.modResults.contents = (0, codeMod_1.addImports)(config.modResults.contents, [
            'com.streamvideo.reactnative.StreamVideoReactNative',
            'android.os.Build',
            'android.content.res.Configuration',
            'androidx.lifecycle.Lifecycle',
            'com.oney.WebRTCModule.WebRTCModuleOptions',
        ], isMainActivityJava);
        config.modResults.contents = addOnPictureInPictureModeChanged(config.modResults.contents, isMainActivityJava);
        if (props?.androidPictureInPicture) {
            config.modResults.contents = addOnUserLeaveHint(config.modResults.contents, isMainActivityJava);
        }
        if (props?.enableScreenshare) {
            config.modResults.contents = addInsideOnCreateScreenshare(config.modResults.contents, isMainActivityJava);
        }
        if (props?.ringingPushNotifications?.showWhenLockedAndroid) {
            config.modResults.contents = addInsideOnCreateLockscreen(config.modResults.contents, isMainActivityJava);
        }
        return config;
    });
};
function addOnPictureInPictureModeChanged(contents, isJava) {
    if (!contents.includes('StreamVideoReactNative.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig)')) {
        let statementToInsert = '';
        if (isJava) {
            statementToInsert = `
      @Override
      public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
          super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
          if (isFinishing()) {
            return;
          }
          if (lifecycleOwner.getLifecycle().getCurrentState() == Lifecycle.State.CREATED) {
              // When user clicks on Close button of PIP
              finishAndRemoveTask();
          } else {
              StreamVideoReactNative.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
          }
      }`;
        }
        else {
            // Kotlin
            statementToInsert = `         
      override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean, newConfig: Configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode)
        if (isFinishing) {
          return
        }
        if (lifecycle.currentState === Lifecycle.State.CREATED) {
            // when user clicks on Close button of PIP
            finishAndRemoveTask()
        } else {
            StreamVideoReactNative.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig)
        }
      }`;
        }
        contents = (0, addNewLinesToMainActivity_1.default)(contents, statementToInsert.trim().split('\n'));
    }
    return contents;
}
function addOnUserLeaveHint(contents, isJava) {
    let statementToInsert = '';
    if (isJava) {
        if (!contents.includes('StreamVideoReactNative.Companion.getCanAutoEnterPictureInPictureMode')) {
            statementToInsert = `
      @Override
      protected void onUserLeaveHint() {
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O &&
              Build.VERSION.SDK_INT < Build.VERSION_CODES.S &&
              StreamVideoReactNative.Companion.getCanAutoEnterPictureInPictureMode()) {
              Configuration config = getResources().getConfiguration();
              onPictureInPictureModeChanged(true, config);
          }
      }`;
        }
    }
    else {
        if (!contents.includes('StreamVideoReactNative.canAutoEnterPictureInPictureMode')) {
            statementToInsert = `           
      override fun onUserLeaveHint() {
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O &&
              Build.VERSION.SDK_INT < Build.VERSION_CODES.S &&
              StreamVideoReactNative.canAutoEnterPictureInPictureMode) {
              val config = resources.configuration
              onPictureInPictureModeChanged(true,  config)
          }
      }`;
        }
    }
    if (statementToInsert) {
        contents = (0, addNewLinesToMainActivity_1.default)(contents, statementToInsert.trim().split('\n'));
    }
    return contents;
}
function addInsideOnCreateScreenshare(contents, isJava) {
    const addScreenShareServiceEnablerBlock = isJava
        ? `WebRTCModuleOptions options = WebRTCModuleOptions.getInstance();
    options.enableMediaProjectionService = true;
`
        : `val options: WebRTCModuleOptions = WebRTCModuleOptions.getInstance()
    options.enableMediaProjectionService = true
`;
    if (!contents.includes('options.enableMediaProjectionService = true')) {
        contents = (0, codeMod_1.appendContentsInsideDeclarationBlock)(contents, 'onCreate', addScreenShareServiceEnablerBlock);
    }
    return contents;
}
function addInsideOnCreateLockscreen(contents, isJava) {
    const addLockscreenServiceEnablerBlock = isJava
        ? `StreamVideoReactNative.setupCallActivity(this);`
        : `StreamVideoReactNative.setupCallActivity(this)`;
    if (!contents.includes('StreamVideoReactNative.setupCallActivity')) {
        contents = (0, codeMod_1.appendContentsInsideDeclarationBlock)(contents, 'onCreate', addLockscreenServiceEnablerBlock);
    }
    return contents;
}
exports.default = withStreamVideoReactNativeSDKMainActivity;
