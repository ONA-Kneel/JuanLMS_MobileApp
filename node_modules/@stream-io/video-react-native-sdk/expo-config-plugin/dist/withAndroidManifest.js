"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_plugins_1 = require("@expo/config-plugins");
const { prefixAndroidKeys, getMainApplicationOrThrow, getMainActivityOrThrow, ensureToolsAvailable, } = config_plugins_1.AndroidConfig.Manifest;
function getNotifeeService(isKeepCallAliveEnabled = false) {
    /* We add this service to the AndroidManifest.xml:
      <service
          android:name="app.notifee.core.ForegroundService"
          android:stopWithTask="true"
          android:foregroundServiceType="shortService" />
   */
    let foregroundServiceType = 'shortService';
    if (isKeepCallAliveEnabled) {
        foregroundServiceType =
            'dataSync|camera|microphone|connectedDevice|' + foregroundServiceType;
    }
    let head = prefixAndroidKeys({
        name: 'app.notifee.core.ForegroundService',
        stopWithTask: 'true',
        foregroundServiceType,
    });
    head = { ...head, 'tools:replace': 'android:foregroundServiceType' };
    return {
        $: head,
    };
}
const withStreamVideoReactNativeSDKManifest = (configuration, props) => {
    return (0, config_plugins_1.withAndroidManifest)(configuration, (config) => {
        const androidManifest = config.modResults;
        const mainApplication = getMainApplicationOrThrow(androidManifest);
        if (props?.ringingPushNotifications || props?.androidKeepCallAlive) {
            ensureToolsAvailable(androidManifest);
            /* Add the notifee foreground Service */
            let services = mainApplication.service ?? [];
            // we filter out the existing notifee service (if any) so that we can override it
            services = services.filter((service) => service.$['android:name'] !== 'app.notifee.core.ForegroundService');
            services.push(getNotifeeService(!!props?.androidKeepCallAlive));
            mainApplication.service = services;
        }
        if (props?.androidPictureInPicture) {
            const mainActivity = getMainActivityOrThrow(androidManifest);
            const currentConfigChangesArray = mainActivity.$['android:configChanges']
                ? mainActivity.$['android:configChanges'].split('|')
                : [];
            const neededConfigChangesArray = 'screenSize|smallestScreenSize|screenLayout|orientation'.split('|');
            // Create a Set from the two arrays.
            const set = new Set([
                ...currentConfigChangesArray,
                ...neededConfigChangesArray,
            ]);
            const mergedConfigChanges = [...set];
            mainActivity.$['android:configChanges'] = mergedConfigChanges.join('|');
            mainActivity.$['android:supportsPictureInPicture'] = 'true';
        }
        config.modResults = androidManifest;
        return config;
    });
};
exports.default = withStreamVideoReactNativeSDKManifest;
