import React, { type PropsWithChildren } from 'react';
import { type Theme } from '../theme/theme';
export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export type StreamThemeInputValue = {
    mergedStyle?: Theme;
    style?: DeepPartial<Theme>;
};
/**
 * @deprecated Use StreamThemeInputValue instead.
 */
export type ThemeProviderInputValue = StreamThemeInputValue;
export type MergedThemesParams = {
    style?: DeepPartial<Theme>;
    theme?: Theme;
};
export type ThemeContextValue = {
    theme: Theme;
};
export declare const mergeThemes: (params: MergedThemesParams) => Theme;
export declare const ThemeContext: React.Context<Theme>;
export declare const StreamTheme: React.FC<PropsWithChildren<StreamThemeInputValue & Partial<ThemeContextValue>>>;
/**
 * @deprecated Use StreamTheme instead of ThemeProvider.
 */
export declare const ThemeProvider: React.FC<React.PropsWithChildren<StreamThemeInputValue & Partial<ThemeContextValue>>>;
export declare const useTheme: () => {
    theme: Theme;
};
//# sourceMappingURL=ThemeContext.d.ts.map