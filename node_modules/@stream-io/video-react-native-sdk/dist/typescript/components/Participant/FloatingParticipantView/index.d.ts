import React from 'react';
import { type StyleProp, type ViewStyle } from 'react-native';
import { type CallContentProps, type CallParticipantsListComponentProps } from '../../Call';
import { type ParticipantViewComponentProps, type ParticipantViewProps } from '../ParticipantView';
import { type StreamVideoParticipant } from '@stream-io/video-client';
export type FloatingParticipantViewAlignment = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
/**
 * Props to be passed for the LocalVideoView component.
 */
export type FloatingParticipantViewProps = ParticipantViewComponentProps & Pick<CallParticipantsListComponentProps, 'ParticipantView'> & Pick<CallContentProps, 'supportedReactions'> & Pick<ParticipantViewProps, 'objectFit' | 'videoZOrder'> & {
    /**
     * Determines where the floating participant video will be placed.
     */
    alignment?: FloatingParticipantViewAlignment;
    /**
     * The participant to be rendered in the FloatingParticipantView
     */
    participant?: StreamVideoParticipant;
    /**
     * Custom style to be merged with the container of the participant view.
     */
    participantViewStyle?: StyleProp<ViewStyle>;
    /**
     * Custom style to be merged with the absolute container of the floating participant view.
     * This is the container that holds the participant view and the whole of its draggable area.
     */
    draggableContainerStyle?: StyleProp<ViewStyle>;
    /**
     * Handler used to handle actions on click of the participant view in FloatingParticipantView.
     * Eg: Can be used to handle participant switch on click.
     */
    onPressHandler?: () => void;
};
/**
 * A component to render the floating participant's video.
 */
export declare const FloatingParticipantView: ({ alignment, onPressHandler, participant, participantViewStyle, draggableContainerStyle, ParticipantView, ParticipantNetworkQualityIndicator, ParticipantVideoFallback, ParticipantReaction, VideoRenderer, supportedReactions, videoZOrder, objectFit, }: FloatingParticipantViewProps) => React.JSX.Element | null;
//# sourceMappingURL=index.d.ts.map