import React from 'react';
import { type CallControlProps, type HangUpCallButtonProps } from '../CallControls';
import { type StreamReaction } from '@stream-io/video-client';
import { type FloatingParticipantViewProps, type ParticipantViewComponentProps } from '../../Participant';
import { type CallParticipantsListComponentProps, type CallParticipantsListProps } from '../CallParticipantsList';
import { type ScreenShareOverlayProps } from '../../utility/ScreenShareOverlay';
export type StreamReactionType = StreamReaction & {
    icon: string;
};
type CallContentComponentProps = ParticipantViewComponentProps & Pick<CallParticipantsListComponentProps, 'ParticipantView'> & {
    /**
     * Component to customize the CallControls component.
     */
    CallControls?: React.ComponentType<CallControlProps> | null;
    /**
     * Component to customize the FloatingParticipantView.
     */
    FloatingParticipantView?: React.ComponentType<FloatingParticipantViewProps> | null;
    /**
     * Component to customize the CallParticipantsList.
     */
    CallParticipantsList?: React.ComponentType<CallParticipantsListProps> | null;
    /**
     * Component to customize the ScreenShareOverlay.
     */
    ScreenShareOverlay?: React.ComponentType<ScreenShareOverlayProps> | null;
};
export type CallContentProps = Pick<HangUpCallButtonProps, 'onHangupCallHandler'> & CallContentComponentProps & {
    /**
     * This switches the participant's layout between the grid and the spotlight mode.
     */
    layout?: 'grid' | 'spotlight';
    /**
     * Reactions that are to be supported in the call
     */
    supportedReactions?: StreamReactionType[];
    landscape?: boolean;
    iOSPiPIncludeLocalParticipantVideo?: boolean;
    /**
     * If true, disables the Picture-in-Picture mode for iOS and Android
     */
    disablePictureInPicture?: boolean;
    /**
     * Props to set the audio mode for the InCallManager.
     * If media type is video, audio is routed by default to speaker, otherwise it is routed to earpiece.
     * Changing the mode on the fly is not supported.
     * Manually invoke `InCallManager.start({ media })` to achieve this.
     * @default 'video'
     */
    initialInCallManagerAudioMode?: 'video' | 'audio';
};
export declare const CallContent: ({ onHangupCallHandler, CallParticipantsList, CallControls, FloatingParticipantView, ScreenShareOverlay, ParticipantLabel, ParticipantNetworkQualityIndicator, ParticipantReaction, ParticipantVideoFallback, ParticipantView, VideoRenderer, layout, landscape, supportedReactions, iOSPiPIncludeLocalParticipantVideo, disablePictureInPicture, initialInCallManagerAudioMode, }: CallContentProps) => React.JSX.Element;
export {};
//# sourceMappingURL=CallContent.d.ts.map