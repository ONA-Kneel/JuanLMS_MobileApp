import { Call, StreamVideoClient } from '@stream-io/video-client';
import type { NonRingingPushEvent, StreamVideoConfig } from '../../StreamVideoRN/types';
type PushConfig = NonNullable<StreamVideoConfig['push']>;
type CanAddPushWSSubscriptionsRef = {
    current: boolean;
};
/**
 * This function is used to check if the call should be ended based on the push notification
 * Useful for callkeep management to end the call if necessary (with reportEndCallWithUUID)
 */
export declare const shouldCallBeEnded: (callFromPush: Call, created_by_id: string | undefined, receiver_id: string | undefined) => {
    mustEndCall: boolean;
    callkeepReason: number;
};
export declare const processCallFromPushInBackground: (pushConfig: PushConfig, call_cid: string, action: Parameters<typeof processCallFromPush>[2]) => Promise<void>;
/**
 * This function is used process the call from push notifications due to incoming call
 * It does the following steps:
 * 1. Get the call from the client if present or create a new call
 * 2. Fetch the latest state of the call from the server if its not already in ringing state
 * 3. Join or leave the call based on the user's action.
 */
export declare const processCallFromPush: (client: StreamVideoClient, call_cid: string, action: "accept" | "decline" | "pressed" | "backgroundDelivered", pushConfig: PushConfig) => Promise<void>;
/**
 * This function is used process the call from push notifications due to non ringing calls
 * It does the following steps:
 * 1. Get the call from the client if present or create a new call
 * 2. Fetch the latest state of the call from the server
 * 3. Call all the callbacks to inform the app about the call
 */
export declare const processNonIncomingCallFromPush: (client: StreamVideoClient, call_cid: string, nonRingingNotificationType: NonRingingPushEvent) => Promise<void>;
/**
 * This function is used to clear all the push related WS subscriptions
 * note: events are subscribed in push for accept/decline through WS
 */
export declare const clearPushWSEventSubscriptions: () => void;
/**
 * This ref is used to check if the push WS subscriptions can be added
 * It is used to avoid adding the push WS subscriptions when the client is connected to WS in the foreground
 */
export declare const canAddPushWSSubscriptionsRef: CanAddPushWSSubscriptionsRef;
export {};
//# sourceMappingURL=utils.d.ts.map