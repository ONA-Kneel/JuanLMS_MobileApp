import { BehaviorSubject } from 'rxjs';
import type { NonRingingPushEvent } from '../../StreamVideoRN/types';
/**
 * This rxjs subject is used to store the call cid of the accepted incoming call from push notification
 * Note: it is should be subscribed only when a user has connected to the websocket of Stream
 */
export declare const pushNonRingingCallData$: BehaviorSubject<{
    cid: string;
    type: NonRingingPushEvent;
} | undefined>;
/**
 * This rxjs subject is used to store the call cid of the accepted incoming call from push notification
 * Note: it is should be subscribed only when a user has connected to the websocket of Stream
 */
export declare const pushAcceptedIncomingCallCId$: BehaviorSubject<string | undefined>;
/**
 * This rxjs subject is used to store the call cid of the tapped incoming call from push notification it is neither accepted nor rejected yet
 * Note: it should be subscribed only when a user has connected to the websocket of Stream
 */
export declare const pushTappedIncomingCallCId$: BehaviorSubject<string | undefined>;
/**
 * This rxjs subject is used to store the call cid of the delivered incoming call from push notification it is neither accepted nor rejected yet
 * Used so that the call is navigated to when app is open from being killed
 * Note: it should be subscribed only when a user has connected to the websocket of Stream
 */
export declare const pushAndroidBackgroundDeliveredIncomingCallCId$: BehaviorSubject<string | undefined>;
/**
 * This rxjs subject is used to store the call cid of the accepted incoming call from push notification
 * Note: it should be subscribed only when a user has connected to the websocket of Stream
 */
export declare const pushRejectedIncomingCallCId$: BehaviorSubject<string | undefined>;
/**
 * This rxjs subject is used to store the call cid of the incoming call from ios voip pushkit notification
 */
export declare const voipPushNotificationCallCId$: BehaviorSubject<string | undefined>;
/** The pair of cid of a call and its corresponding uuid created in the native side */
type CallkeepMap = {
    uuid: string;
    cid: string;
};
export declare const voipCallkeepCallOnForegroundMap$: BehaviorSubject<CallkeepMap | undefined>;
export declare const voipCallkeepAcceptedCallOnNativeDialerMap$: BehaviorSubject<CallkeepMap | undefined>;
type UnsubscribeCallback = () => void;
/**
 * This rxjs subject is used to store the unsubscribe callbacks (if any) of the push notification processing
 * Note: it should be used to clear it when app processes push notification from foreground
 */
export declare const pushUnsubscriptionCallbacks$: BehaviorSubject<UnsubscribeCallback[] | undefined>;
export {};
//# sourceMappingURL=rxSubjects.d.ts.map