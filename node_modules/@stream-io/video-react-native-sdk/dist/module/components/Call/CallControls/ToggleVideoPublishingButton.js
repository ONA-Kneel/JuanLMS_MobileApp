import React from 'react';
import { OwnCapability } from '@stream-io/video-client';
import { Restricted, useCallStateHooks } from '@stream-io/video-react-bindings';
import { CallControlsButton } from './CallControlsButton';
import { IconWrapper, Video, VideoSlash } from '../../../icons';
import { useTheme } from '../../../contexts/ThemeContext';

/**
 * Props for the Toggle Video publishing button
 */

/**
 * Button to toggle video mute/unmute status while in the call.
 */
export const ToggleVideoPublishingButton = ({
  onPressHandler
}) => {
  const {
    useCameraState,
    useCallSettings
  } = useCallStateHooks();
  const {
    camera,
    optimisticIsMute
  } = useCameraState();
  const callSettings = useCallSettings();
  const isVideoEnabledInCall = callSettings?.video.enabled;
  const {
    theme: {
      colors,
      variants
    }
  } = useTheme();
  const onPress = async () => {
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    await camera.toggle();
  };
  if (!isVideoEnabledInCall) {
    return;
  }
  return /*#__PURE__*/React.createElement(Restricted, {
    requiredGrants: [OwnCapability.SEND_VIDEO]
  }, /*#__PURE__*/React.createElement(CallControlsButton, {
    onPress: onPress,
    color: !optimisticIsMute ? colors.buttonSecondary : colors.buttonWarning
  }, /*#__PURE__*/React.createElement(IconWrapper, null, !optimisticIsMute ? /*#__PURE__*/React.createElement(Video, {
    color: colors.iconPrimary,
    size: variants.iconSizes.md
  }) : /*#__PURE__*/React.createElement(VideoSlash, {
    color: colors.iconPrimary,
    size: variants.iconSizes.md
  }))));
};
//# sourceMappingURL=ToggleVideoPublishingButton.js.map