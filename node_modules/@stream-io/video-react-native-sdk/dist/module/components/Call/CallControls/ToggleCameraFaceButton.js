import { OwnCapability } from '@stream-io/video-client';
import { Restricted, useCallStateHooks } from '@stream-io/video-react-bindings';
import React from 'react';
import { CallControlsButton } from './CallControlsButton';
import { CameraSwitch, IconWrapper } from '../../../icons';
import { useTheme } from '../../../contexts/ThemeContext';

/**
 * Props for the Toggle Camera face button.
 */

/**
 * Button to toggle camera face(front/back) when in the call.
 */
export const ToggleCameraFaceButton = ({
  onPressHandler,
  backgroundColor
}) => {
  const {
    useCameraState,
    useCallSettings
  } = useCallStateHooks();
  const {
    camera,
    optimisticIsMute,
    direction
  } = useCameraState();
  const callSettings = useCallSettings();
  const isVideoEnabledInCall = callSettings?.video.enabled;
  const {
    theme: {
      colors,
      toggleCameraFaceButton,
      variants
    }
  } = useTheme();
  const onPress = async () => {
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    await camera.flip();
  };
  if (!isVideoEnabledInCall) {
    return;
  }
  return /*#__PURE__*/React.createElement(Restricted, {
    requiredGrants: [OwnCapability.SEND_VIDEO]
  }, /*#__PURE__*/React.createElement(CallControlsButton, {
    onPress: onPress,
    color: backgroundColor || colors.buttonSecondary,
    disabledColor: backgroundColor || colors.sheetSecondary,
    disabled: optimisticIsMute,
    style: toggleCameraFaceButton
  }, /*#__PURE__*/React.createElement(IconWrapper, null, /*#__PURE__*/React.createElement(CameraSwitch, {
    size: variants.iconSizes.md,
    color: optimisticIsMute ? colors.buttonDisabled : direction === 'front' || direction === undefined ? colors.iconPrimary : colors.buttonPrimary
  }))));
};
//# sourceMappingURL=ToggleCameraFaceButton.js.map