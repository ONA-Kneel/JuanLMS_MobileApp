function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React, { useMemo } from 'react';
import { hasScreenShare, speakerLayoutSortPreset } from '@stream-io/video-client';
import { useCallStateHooks } from '@stream-io/video-react-bindings';
import { StyleSheet, View } from 'react-native';
import { useDebouncedValue } from '../../../utils/hooks/useDebouncedValue';
import { ComponentTestIds } from '../../../constants/TestIds';
import { CallParticipantsList as DefaultCallParticipantsList } from '../CallParticipantsList/CallParticipantsList';
import { ParticipantView as DefaultParticipantView } from '../../Participant';
import { useTheme } from '../../../contexts/ThemeContext';
import { useIsInPiPMode } from '../../../hooks/useIsInPiPMode';

/**
 * Props for the CallParticipantsSpotlight component.
 */

/**
 * Component used to display the list of participants in a spotlight mode.
 * This can be used when you want to render the screen sharing stream.
 */
export const CallParticipantsSpotlight = ({
  CallParticipantsList = DefaultCallParticipantsList,
  ParticipantLabel,
  ParticipantNetworkQualityIndicator,
  ParticipantReaction,
  ParticipantVideoFallback,
  ParticipantView = DefaultParticipantView,
  ScreenShareOverlay,
  VideoRenderer,
  supportedReactions,
  landscape
}) => {
  const {
    theme: {
      callParticipantsSpotlight,
      variants
    }
  } = useTheme();
  const styles = useStyles();
  const {
    useParticipants
  } = useCallStateHooks();
  const _allParticipants = useParticipants({
    sortBy: speakerLayoutSortPreset
  });
  const allParticipants = useDebouncedValue(_allParticipants, 300); // we debounce the participants to avoid unnecessary rerenders that happen when participant tracks are all subscribed simultaneously
  const [participantInSpotlight, ...otherParticipants] = allParticipants;
  const isScreenShareOnSpotlight = participantInSpotlight && hasScreenShare(participantInSpotlight);
  const isUserAloneInCall = _allParticipants?.length === 1;
  const isInPiP = useIsInPiPMode();
  const participantViewProps = {
    ParticipantLabel,
    ParticipantNetworkQualityIndicator,
    ParticipantReaction,
    ParticipantVideoFallback,
    VideoRenderer
  };
  const callParticipantsListProps = {
    ...participantViewProps,
    ParticipantView
  };
  const landscapeStyles = {
    flexDirection: landscape ? 'row' : 'column'
  };
  const spotlightContainerLandscapeStyles = {
    marginHorizontal: landscape ? 0 : variants.spacingSizes.xs
  };
  const showShareScreenOverlay = participantInSpotlight?.isLocalParticipant && isScreenShareOnSpotlight && ScreenShareOverlay;
  return /*#__PURE__*/React.createElement(View, {
    testID: ComponentTestIds.CALL_PARTICIPANTS_SPOTLIGHT,
    style: [styles.container, landscapeStyles, callParticipantsSpotlight.container]
  }, participantInSpotlight && ParticipantView && (showShareScreenOverlay ? /*#__PURE__*/React.createElement(ScreenShareOverlay, null) : /*#__PURE__*/React.createElement(ParticipantView, _extends({
    participant: participantInSpotlight,
    style: isUserAloneInCall ? [styles.fullScreenSpotlightContainer, callParticipantsSpotlight.fullScreenSpotlightContainer] : [styles.spotlightContainer, spotlightContainerLandscapeStyles, callParticipantsSpotlight.spotlightContainer],
    objectFit: isScreenShareOnSpotlight ? 'contain' : 'cover',
    trackType: isScreenShareOnSpotlight ? 'screenShareTrack' : 'videoTrack',
    supportedReactions: supportedReactions
  }, participantViewProps))), !isInPiP && !isUserAloneInCall && /*#__PURE__*/React.createElement(View, {
    style: [styles.callParticipantsListContainer, callParticipantsSpotlight.callParticipantsListContainer]
  }, CallParticipantsList && /*#__PURE__*/React.createElement(CallParticipantsList, _extends({
    participants: isScreenShareOnSpotlight ? allParticipants : otherParticipants,
    supportedReactions: supportedReactions,
    horizontal: !landscape,
    numberOfColumns: !landscape ? 2 : 1,
    landscape: landscape
  }, callParticipantsListProps))));
};
const useStyles = () => {
  const {
    theme
  } = useTheme();
  return useMemo(() => StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.colors.sheetPrimary
    },
    fullScreenSpotlightContainer: {
      flex: 1
    },
    spotlightContainer: {
      flex: 2,
      overflow: 'hidden',
      borderRadius: theme.variants.borderRadiusSizes.sm,
      marginHorizontal: theme.variants.spacingSizes.sm
    },
    callParticipantsListContainer: {
      flex: 1
    }
  }), [theme]);
};
//# sourceMappingURL=CallParticipantsSpotlight.js.map