function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React from 'react';
import { StyleSheet, View } from 'react-native';
import { useCallStateHooks } from '@stream-io/video-react-bindings';
import { useDebouncedValue } from '../../../utils/hooks/useDebouncedValue';
import { CallParticipantsList as DefaultCallParticipantsList } from '../CallParticipantsList/CallParticipantsList';
import { ComponentTestIds } from '../../../constants/TestIds';
import { useTheme } from '../../../contexts/ThemeContext';
import { useIsInPiPMode } from '../../../hooks/useIsInPiPMode';

/**
 * Props for the CallParticipantsGrid component.
 */

/**
 * Component used to display the list of participants in a grid mode.
 */
export const CallParticipantsGrid = ({
  CallParticipantsList = DefaultCallParticipantsList,
  ParticipantLabel,
  ParticipantNetworkQualityIndicator,
  ParticipantReaction,
  ParticipantVideoFallback,
  ParticipantView,
  VideoRenderer,
  showLocalParticipant = false,
  supportedReactions,
  landscape
}) => {
  const {
    theme: {
      colors,
      callParticipantsGrid
    }
  } = useTheme();
  const {
    useRemoteParticipants,
    useParticipants,
    useLocalParticipant,
    useDominantSpeaker
  } = useCallStateHooks();
  const _remoteParticipants = useRemoteParticipants();
  const localParticipant = useLocalParticipant();
  const _allParticipants = useParticipants();
  const dominantSpeaker = useDominantSpeaker();
  // we debounce the participants arrays to avoid unnecessary rerenders that happen when participant tracks are all subscribed simultaneously
  const remoteParticipants = useDebouncedValue(_remoteParticipants, 300);
  const allParticipants = useDebouncedValue(_allParticipants, 300);
  const landscapeStyles = {
    flexDirection: landscape ? 'row' : 'column'
  };
  const isInPiPMode = useIsInPiPMode();
  const showFloatingView = !isInPiPMode && remoteParticipants.length > 0 && remoteParticipants.length < 3;
  let participants;
  if (showFloatingView) {
    if (showLocalParticipant && localParticipant) {
      participants = [localParticipant];
    } else {
      participants = remoteParticipants;
    }
  } else {
    participants = allParticipants;
  }
  if (isInPiPMode) {
    if (dominantSpeaker && !dominantSpeaker.isLocalParticipant) {
      participants = [dominantSpeaker];
    } else if (remoteParticipants[0]) {
      participants = [remoteParticipants[0]];
    } else if (localParticipant) {
      participants = [localParticipant];
    } else {
      participants = [];
    }
  }
  const participantViewProps = {
    ParticipantView,
    ParticipantLabel,
    ParticipantNetworkQualityIndicator,
    ParticipantReaction,
    ParticipantVideoFallback,
    VideoRenderer
  };
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, landscapeStyles, {
      backgroundColor: colors.sheetPrimary
    }, callParticipantsGrid.container],
    testID: ComponentTestIds.CALL_PARTICIPANTS_GRID
  }, CallParticipantsList && /*#__PURE__*/React.createElement(CallParticipantsList, _extends({
    participants: participants,
    supportedReactions: supportedReactions,
    landscape: landscape
  }, participantViewProps)));
};
const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=CallParticipantsGrid.js.map