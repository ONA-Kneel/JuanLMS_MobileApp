import { getLogger } from '@stream-io/video-client';
import React from 'react';
import { Platform, requireNativeComponent, StyleSheet, UIManager } from 'react-native';
const COMPONENT_NAME = 'RTCViewPip';
const NativeComponent = requireNativeComponent(COMPONENT_NAME);
export function onNativeCallClosed(reactTag) {
  getLogger(['RTCViewPipNative'])('debug', 'onNativeCallClosed');
  const commandId = UIManager.getViewManagerConfig(COMPONENT_NAME).Commands.onCallClosed;
  if (!commandId) return;
  UIManager.dispatchViewManagerCommand(reactTag, commandId, []);
}
export function onNativeDimensionsUpdated(reactTag, width, height) {
  getLogger(['RTCViewPipNative'])('debug', 'onNativeDimensionsUpdated', {
    width,
    height
  });
  const commandId = UIManager.getViewManagerConfig(COMPONENT_NAME).Commands.setPreferredContentSize;
  if (!commandId) return;
  UIManager.dispatchViewManagerCommand(reactTag, commandId, [width, height]);
}

/** Wrapper for the native view
 * meant to stay private and not exposed */
export const RTCViewPipNative = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef((props, ref) => {
  if (Platform.OS !== 'ios') return null;
  return /*#__PURE__*/React.createElement(NativeComponent, {
    style: StyleSheet.absoluteFill,
    pointerEvents: 'none'
    // eslint-disable-next-line react/prop-types
    ,
    streamURL: props.streamURL
    // @ts-expect-error - types issue
    ,
    ref: ref
  });
}));
//# sourceMappingURL=RTCViewPipNative.js.map