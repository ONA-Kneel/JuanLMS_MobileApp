import React, { useMemo } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { useCallStateHooks, useConnectedUser, useI18n } from '@stream-io/video-react-bindings';
import { Avatar } from '../../utility/Avatar';
import { RTCView } from '@stream-io/react-native-webrtc';
import { LobbyControls as DefaultLobbyControls } from '../CallControls/LobbyControls';
import { JoinCallButton as DefaultJoinCallButton } from './JoinCallButton';
import { useTheme } from '../../../contexts/ThemeContext';
import { LobbyFooter as DefaultLobbyFooter } from './LobbyFooter';

/**
 * Props for the Lobby Component.
 */

/**
 * Components that acts as a pre-join view for the call. Where you can preview your video and audio. Check for call details and check for number of participants already in the call.
 */
export const Lobby = ({
  onJoinCallHandler,
  LobbyControls = DefaultLobbyControls,
  JoinCallButton = DefaultJoinCallButton,
  landscape = false,
  LobbyFooter = DefaultLobbyFooter
}) => {
  const {
    theme: {
      colors,
      lobby,
      typefaces
    }
  } = useTheme();
  const styles = useStyles(landscape);
  const connectedUser = useConnectedUser();
  const {
    useCameraState,
    useCallSettings
  } = useCallStateHooks();
  const callSettings = useCallSettings();
  const isVideoEnabledInCall = callSettings?.video.enabled;
  const {
    isMute: cameraIsMuted,
    mediaStream
  } = useCameraState();
  const {
    t
  } = useI18n();
  const localVideoStream = mediaStream;
  const connectedUserAsParticipant = {
    userId: connectedUser?.id,
    image: connectedUser?.image,
    name: connectedUser?.name
  };
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, lobby.container]
  }, connectedUser && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {
    style: [styles.heading, typefaces.heading5, lobby.heading]
  }, t('Before joining')), /*#__PURE__*/React.createElement(Text, {
    style: [styles.subHeading, lobby.subHeading]
  }, t('Setup your audio and video')), isVideoEnabledInCall && /*#__PURE__*/React.createElement(View, {
    style: [styles.videoContainer, {
      backgroundColor: colors.sheetTertiary
    }, lobby.videoContainer]
  }, /*#__PURE__*/React.createElement(View, {
    style: styles.topView
  }), !cameraIsMuted && localVideoStream ? /*#__PURE__*/React.createElement(RTCView, {
    mirror: true,
    streamURL: localVideoStream.toURL(),
    objectFit: "cover",
    style: StyleSheet.absoluteFillObject
  }) : /*#__PURE__*/React.createElement(View, {
    style: [styles.avatarContainer, lobby.avatarContainer]
  }, /*#__PURE__*/React.createElement(Avatar, {
    participant: connectedUserAsParticipant
  })), /*#__PURE__*/React.createElement(ParticipantStatus, null))), LobbyControls && /*#__PURE__*/React.createElement(LobbyControls, null), LobbyFooter && /*#__PURE__*/React.createElement(LobbyFooter, {
    JoinCallButton: JoinCallButton,
    onJoinCallHandler: onJoinCallHandler
  }));
};
const ParticipantStatus = () => {
  const {
    theme: {
      colors,
      typefaces,
      lobby
    }
  } = useTheme();
  const styles = useStyles();
  const connectedUser = useConnectedUser();
  const participantLabel = connectedUser?.name ?? connectedUser?.id;
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.participantStatusContainer, {
      backgroundColor: colors.sheetOverlay
    }, lobby.participantStatusContainer]
  }, /*#__PURE__*/React.createElement(Text, {
    style: [styles.userNameLabel, {
      color: colors.textPrimary
    }, typefaces.caption, lobby.userNameLabel],
    numberOfLines: 1
  }, participantLabel));
};
const useStyles = (landscape = false) => {
  const {
    theme
  } = useTheme();
  return useMemo(() => StyleSheet.create({
    heading: {
      textAlign: 'center',
      color: theme.colors.textPrimary,
      paddingBottom: theme.variants.spacingSizes.xs
    },
    subHeading: {
      textAlign: 'center',
      paddingBottom: theme.variants.spacingSizes.md,
      color: theme.colors.textSecondary
    },
    container: {
      flex: 1,
      justifyContent: 'center',
      backgroundColor: theme.colors.sheetPrimary,
      paddingRight: theme.variants.insets.right + theme.variants.spacingSizes.sm,
      paddingLeft: theme.variants.insets.left + theme.variants.spacingSizes.sm,
      paddingTop: theme.variants.insets.top,
      paddingBottom: theme.variants.insets.bottom
    },
    videoContainer: {
      height: landscape ? '40%' : '50%',
      borderRadius: theme.variants.borderRadiusSizes.md,
      justifyContent: 'space-between',
      alignItems: 'center',
      overflow: 'hidden'
    },
    topView: {},
    participantStatusContainer: {
      alignSelf: 'flex-start',
      flexDirection: 'row',
      alignItems: 'center',
      padding: theme.variants.spacingSizes.sm,
      borderTopRightRadius: theme.variants.borderRadiusSizes.sm
    },
    avatarContainer: {
      flex: 2,
      justifyContent: 'center'
    },
    userNameLabel: {
      flexShrink: 1
    }
  }), [theme, landscape]);
};
//# sourceMappingURL=Lobby.js.map