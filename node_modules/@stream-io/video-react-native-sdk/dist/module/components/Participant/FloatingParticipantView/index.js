function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React from 'react';
import { Pressable, StyleSheet, View } from 'react-native';
import { FLOATING_VIDEO_VIEW_STYLE, Z_INDEX } from '../../../constants';
import { ComponentTestIds } from '../../../constants/TestIds';
import { VideoSlash } from '../../../icons';
import FloatingView from './FloatingView';
import { FloatingViewAlignment } from './FloatingView/common';
import { ParticipantView as DefaultParticipantView } from '../ParticipantView';
import { useTheme } from '../../../contexts/ThemeContext';

/**
 * Props to be passed for the LocalVideoView component.
 */

const DefaultLocalParticipantViewVideoFallback = () => {
  const {
    theme: {
      colors,
      floatingParticipantsView,
      variants: {
        iconSizes
      },
      defaults
    }
  } = useTheme();
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.videoFallback, {
      backgroundColor: colors.sheetSecondary
    }, floatingParticipantsView.videoFallback]
  }, /*#__PURE__*/React.createElement(View, {
    style: {
      height: iconSizes.md,
      width: iconSizes.md
    }
  }, /*#__PURE__*/React.createElement(VideoSlash, {
    color: colors.iconPrimary,
    size: defaults.iconSize
  })));
};

/**
 * A component to render the floating participant's video.
 */
export const FloatingParticipantView = ({
  alignment = 'top-right',
  onPressHandler,
  participant,
  participantViewStyle,
  draggableContainerStyle,
  ParticipantView = DefaultParticipantView,
  ParticipantNetworkQualityIndicator,
  ParticipantVideoFallback = DefaultLocalParticipantViewVideoFallback,
  ParticipantReaction,
  VideoRenderer,
  supportedReactions,
  videoZOrder = 1,
  objectFit
}) => {
  const {
    theme: {
      colors,
      floatingParticipantsView
    }
  } = useTheme();
  const floatingAlignmentMap = {
    'top-left': FloatingViewAlignment.topLeft,
    'top-right': FloatingViewAlignment.topRight,
    'bottom-left': FloatingViewAlignment.bottomLeft,
    'bottom-right': FloatingViewAlignment.bottomRight
  };
  const [containerDimensions, setContainerDimensions] = React.useState();
  const participantViewProps = {
    ParticipantLabel: null,
    ParticipantNetworkQualityIndicator,
    ParticipantReaction,
    ParticipantVideoFallback,
    VideoRenderer
  };
  if (!participant) {
    return null;
  }
  return /*#__PURE__*/React.createElement(View, {
    testID: ComponentTestIds.LOCAL_PARTICIPANT,
    style: [styles.container, draggableContainerStyle, floatingParticipantsView.container]
    // "box-none" disallows the container view to be not take up touches
    // and allows only the floating view (its child view) to take up the touches
    ,
    pointerEvents: "box-none",
    onLayout: event => {
      const {
        width,
        height
      } = event.nativeEvent.layout;
      setContainerDimensions(prev => {
        if (prev && prev.width === width && prev.height === height) {
          return prev;
        }
        return {
          width: width,
          height: height
        };
      });
    }
  }, containerDimensions && /*#__PURE__*/React.createElement(FloatingView, {
    containerHeight: containerDimensions.height,
    containerWidth: containerDimensions.width,
    initialAlignment: floatingAlignmentMap[alignment]
  }, /*#__PURE__*/React.createElement(Pressable, {
    onPress: onPressHandler
  }, ParticipantView && /*#__PURE__*/React.createElement(ParticipantView, _extends({
    participant: participant,
    trackType: "videoTrack",
    style: [styles.participantViewContainer, participantViewStyle, {
      shadowColor: colors.sheetPrimary
    }, floatingParticipantsView.participantViewContainer]
    // video z order must be one above the one used in grid view
    // (which uses the default: 0)
    ,
    videoZOrder: videoZOrder,
    objectFit: objectFit,
    supportedReactions: supportedReactions
  }, participantViewProps)))));
};
const styles = StyleSheet.create({
  container: {
    // Needed to make the view on top and draggable
    zIndex: Z_INDEX.IN_MIDDLE,
    flex: 1
  },
  participantViewContainer: {
    height: FLOATING_VIDEO_VIEW_STYLE.height,
    width: FLOATING_VIDEO_VIEW_STYLE.width,
    borderRadius: FLOATING_VIDEO_VIEW_STYLE.borderRadius,
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62,
    elevation: 4
  },
  videoFallback: {
    ...StyleSheet.absoluteFillObject,
    alignItems: 'center',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=index.js.map