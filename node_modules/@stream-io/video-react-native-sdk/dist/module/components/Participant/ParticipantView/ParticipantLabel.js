import React, { useMemo } from 'react';
import { Pressable, StyleSheet, Text, View } from 'react-native';
import { BadNetwork, MicOff, PinVertical, ScreenShareIndicator, VideoSlash } from '../../../icons';
import { useCall, useI18n } from '@stream-io/video-react-bindings';
import { ComponentTestIds } from '../../../constants/TestIds';
import { Z_INDEX } from '../../../constants';
import { hasAudio, hasPausedTrack, hasVideo } from '@stream-io/video-client';
import { useTheme } from '../../../contexts/ThemeContext';
import SpeechIndicator from './SpeechIndicator';

/**
 * Props for the ParticipantLabel component.
 */

/**
 * This component is used to display the participant label that contains the participant name, video/audio mute/unmute status.
 */
export const ParticipantLabel = ({
  participant,
  trackType
}) => {
  const {
    theme: {
      colors,
      typefaces,
      variants: {
        iconSizes
      },
      participantLabel: {
        container,
        userNameLabel,
        audioMutedIconContainer,
        videoMutedIconContainer,
        pinIconContainer,
        screenShareIconContainer
      }
    }
  } = useTheme();
  const styles = useStyles();
  const {
    name,
    userId,
    pin,
    sessionId,
    isLocalParticipant
  } = participant;
  const call = useCall();
  const {
    t
  } = useI18n();
  const participantName = name ?? userId;
  const participantLabel = isLocalParticipant ? t('You') : participantName;
  const isPinningEnabled = pin?.isLocalPin;
  const isAudioMuted = !hasAudio(participant);
  const isVideoMuted = !hasVideo(participant);
  const isTrackPaused = trackType && hasPausedTrack(participant, trackType);
  const unPinParticipantHandler = () => {
    call?.unpin(sessionId);
  };
  if (trackType === 'screenShareTrack') {
    const screenShareText = isLocalParticipant ? t('You are sharing your screen') : t('{{ userName }} is sharing their screen', {
      userName: participantName
    });
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.container, {
        backgroundColor: colors.sheetOverlay
      }, container],
      testID: ComponentTestIds.PARTICIPANT_SCREEN_SHARING
    }, /*#__PURE__*/React.createElement(View, {
      style: [styles.screenShareIconContainer, {
        height: iconSizes.md,
        width: iconSizes.md
      }, screenShareIconContainer]
    }, /*#__PURE__*/React.createElement(ScreenShareIndicator, {
      color: colors.iconPrimary
    })), /*#__PURE__*/React.createElement(Text, {
      style: [styles.userNameLabel, {
        color: colors.textPrimary
      }, typefaces.caption, userNameLabel],
      numberOfLines: 1
    }, screenShareText));
  }
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, {
      backgroundColor: colors.sheetOverlay
    }, container]
  }, /*#__PURE__*/React.createElement(View, {
    style: styles.wrapper
  }, /*#__PURE__*/React.createElement(Text, {
    style: [styles.userNameLabel, userNameLabel],
    numberOfLines: 1
  }, participantLabel), isAudioMuted && /*#__PURE__*/React.createElement(View, {
    style: [styles.audioMutedIconContainer, audioMutedIconContainer]
  }, /*#__PURE__*/React.createElement(MicOff, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), isVideoMuted && /*#__PURE__*/React.createElement(View, {
    style: [styles.videoMutedIconContainer, videoMutedIconContainer]
  }, /*#__PURE__*/React.createElement(VideoSlash, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), isTrackPaused && /*#__PURE__*/React.createElement(View, {
    style: [styles.trackPausedIconContainer, videoMutedIconContainer]
  }, /*#__PURE__*/React.createElement(BadNetwork, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), isPinningEnabled && /*#__PURE__*/React.createElement(Pressable, {
    style: [styles.pinIconContainer, pinIconContainer],
    onPress: unPinParticipantHandler
  }, /*#__PURE__*/React.createElement(PinVertical, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), /*#__PURE__*/React.createElement(View, {
    style: styles.indicatorWrapper
  }, /*#__PURE__*/React.createElement(SpeechIndicator, {
    isSpeaking: !isAudioMuted && participant.isDominantSpeaker
  }))));
};
const useStyles = () => {
  const {
    theme
  } = useTheme();
  return useMemo(() => StyleSheet.create({
    indicatorWrapper: {
      marginLeft: theme.variants.spacingSizes.sm
    },
    wrapper: {
      flexDirection: 'row'
    },
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: theme.variants.spacingSizes.sm,
      maxHeight: 30,
      borderTopRightRadius: 5,
      marginBottom: -2,
      flexShrink: 1,
      zIndex: Z_INDEX.IN_FRONT
    },
    userNameLabel: {
      flexShrink: 1,
      marginTop: 3,
      fontSize: 13,
      fontWeight: '400',
      color: theme.colors.textPrimary
    },
    screenShareIconContainer: {
      marginRight: theme.variants.spacingSizes.sm,
      justifyContent: 'center'
    },
    audioMutedIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    },
    videoMutedIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    },
    trackPausedIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    },
    pinIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    }
  }), [theme]);
};
//# sourceMappingURL=ParticipantLabel.js.map