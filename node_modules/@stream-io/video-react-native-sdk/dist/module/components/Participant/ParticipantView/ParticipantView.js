import React, { useMemo } from 'react';
import { StyleSheet, View } from 'react-native';
import { ParticipantNetworkQualityIndicator as DefaultParticipantNetworkQualityIndicator } from './ParticipantNetworkQualityIndicator';
import { ParticipantReaction as DefaultParticipantReaction } from './ParticipantReaction';
import { ParticipantLabel as DefaultParticipantLabel } from './ParticipantLabel';
import { ParticipantVideoFallback as DefaultParticipantVideoFallback } from './ParticipantVideoFallback';
import { VideoRenderer as DefaultVideoRenderer } from './VideoRenderer';
import { useTheme } from '../../../contexts/ThemeContext';

/**
 * Props to be passed for the Participant component.
 */

/**
 * A component that renders the participants' video track or screenShare track
 * and additional info. By an absence of a video track or when isVisible is truthy,
 * only an avatar and audio track will be rendered.
 */
export const ParticipantView = ({
  participant,
  trackType = 'videoTrack',
  isVisible = true,
  style,
  ParticipantLabel = DefaultParticipantLabel,
  ParticipantReaction = DefaultParticipantReaction,
  VideoRenderer = DefaultVideoRenderer,
  ParticipantNetworkQualityIndicator = DefaultParticipantNetworkQualityIndicator,
  ParticipantVideoFallback = DefaultParticipantVideoFallback,
  objectFit,
  videoZOrder = 0,
  supportedReactions
}) => {
  const {
    theme: {
      colors,
      participantView
    }
  } = useTheme();
  const {
    isSpeaking,
    userId
  } = participant;
  const styles = useStyles();
  const isScreenSharing = trackType === 'screenShareTrack';
  const applySpeakerStyle = isSpeaking && !isScreenSharing;
  const speakerStyle = applySpeakerStyle && [{
    borderColor: colors.buttonPrimary
  }, participantView.highlightedContainer];
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, style, speakerStyle],
    testID: isSpeaking ? `participant-${userId}-is-speaking` : `participant-${userId}-is-not-speaking`
  }, ParticipantReaction && /*#__PURE__*/React.createElement(ParticipantReaction, {
    participant: participant,
    supportedReactions: supportedReactions
  }), VideoRenderer && /*#__PURE__*/React.createElement(VideoRenderer, {
    isVisible: isVisible,
    participant: participant,
    trackType: trackType,
    ParticipantVideoFallback: ParticipantVideoFallback,
    objectFit: objectFit,
    videoZOrder: videoZOrder
  }), /*#__PURE__*/React.createElement(View, {
    style: [styles.footerContainer, participantView.footerContainer, !ParticipantLabel && styles.networkIndicatorOnly]
  }, ParticipantLabel && /*#__PURE__*/React.createElement(ParticipantLabel, {
    participant: participant,
    trackType: trackType
  }), ParticipantNetworkQualityIndicator && /*#__PURE__*/React.createElement(ParticipantNetworkQualityIndicator, {
    participant: participant
  })));
};
const useStyles = () => {
  const {
    theme
  } = useTheme();
  return useMemo(() => StyleSheet.create({
    container: {
      overflow: 'hidden',
      justifyContent: 'flex-end',
      borderRadius: theme.variants.borderRadiusSizes.md,
      borderWidth: 2,
      borderColor: 'transparent'
    },
    footerContainer: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    networkIndicatorOnly: {
      justifyContent: 'flex-end'
    }
  }), [theme]);
};
//# sourceMappingURL=ParticipantView.js.map