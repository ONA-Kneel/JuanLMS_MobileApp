import React, { useCallback, useEffect, useState } from 'react';
import { hasScreenShare } from '@stream-io/video-client';
import { useCall, useCallStateHooks } from '@stream-io/video-react-bindings';
import { StyleSheet, View } from 'react-native';
import { usePaginatedLayoutSortPreset } from '../../../hooks/usePaginatedLayoutSortPreset';
import { useTheme } from '../../../contexts';
import { VideoRenderer as DefaultVideoRenderer } from '../../Participant';

/**
 * Props for the LivestreamLayout component.
 */

/**
 * The LivestreamLayout component presents the live stream video layout.
 */
export const LivestreamLayout = ({
  landscape,
  VideoRenderer = DefaultVideoRenderer,
  ScreenShareOverlay
}) => {
  const {
    useParticipants,
    useHasOngoingScreenShare
  } = useCallStateHooks();
  const call = useCall();
  const {
    theme: {
      colors,
      livestreamLayout
    }
  } = useTheme();
  const participants = useParticipants();
  const [currentSpeaker] = participants;
  const hasOngoingScreenShare = useHasOngoingScreenShare();
  const presenter = hasOngoingScreenShare ? participants.find(hasScreenShare) : undefined;
  usePaginatedLayoutSortPreset(call);
  const [objectFit, setObjectFit] = useState();

  // no need to pass object fit for local participant as the dimensions are for remote tracks
  const objectFitToBeSet = currentSpeaker?.isLocalParticipant ? undefined : objectFit;
  const onDimensionsChange = useCallback(d => {
    if (d) {
      const isWidthWide = d.width > d.height;
      setObjectFit(isWidthWide ? 'contain' : 'cover');
    }
  }, []);
  const landScapeStyles = {
    flexDirection: landscape ? 'row' : 'column'
  };
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, landScapeStyles, {
      backgroundColor: colors.sheetPrimary
    }, livestreamLayout.container]
  }, /*#__PURE__*/React.createElement(RemoteVideoTrackDimensionsRenderLessComponent, {
    onDimensionsChange: onDimensionsChange
  }), VideoRenderer && hasOngoingScreenShare && presenter && (presenter.isLocalParticipant && ScreenShareOverlay ? /*#__PURE__*/React.createElement(ScreenShareOverlay, null) : /*#__PURE__*/React.createElement(VideoRenderer, {
    trackType: "screenShareTrack",
    participant: presenter
  })), VideoRenderer && !hasOngoingScreenShare && currentSpeaker && /*#__PURE__*/React.createElement(VideoRenderer, {
    participant: currentSpeaker,
    objectFit: objectFitToBeSet,
    trackType: "videoTrack"
  }));
};
const RemoteVideoTrackDimensionsRenderLessComponent = ({
  onDimensionsChange
}) => {
  const [dimension, setDimension] = useState();
  const {
    useCallStatsReport
  } = useCallStateHooks();
  const statsReport = useCallStatsReport();
  const highestFrameHeight = statsReport?.subscriberStats?.highestFrameHeight;
  const highestFrameWidth = statsReport?.subscriberStats?.highestFrameWidth;
  useEffect(() => {
    if (highestFrameHeight && highestFrameWidth) {
      setDimension({
        height: highestFrameHeight,
        width: highestFrameWidth
      });
    }
  }, [highestFrameHeight, highestFrameWidth]);
  useEffect(() => {
    onDimensionsChange(dimension);
  }, [dimension, onDimensionsChange]);
  return null;
};
const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=LivestreamLayout.js.map