import React, { useEffect, useState } from 'react';
import { ViewerLivestream as DefaultViewerLivestream } from '../ViewerLivestream';
import { CallingState, getLogger } from '@stream-io/video-client';
import { StreamCall } from '../../../providers/StreamCall';
import { useStreamVideoClient } from '@stream-io/video-react-bindings';
export const LivestreamPlayer = ({
  callType,
  callId,
  ViewerLivestream = DefaultViewerLivestream,
  joinBehavior = 'asap'
}) => {
  const client = useStreamVideoClient();
  const [call, setCall] = useState();
  useEffect(() => {
    if (!client) {
      return;
    }
    const myCall = client.call(callType, callId);
    setCall(myCall);
    return () => {
      if (myCall.state.callingState !== CallingState.LEFT) {
        myCall.leave().catch(e => {
          const logger = getLogger(['LivestreamPlayer']);
          logger('error', 'Error leaving call:', e);
        });
      }
      setCall(undefined);
    };
  }, [callId, callType, client]);
  useEffect(() => {
    return () => {
      // this handles unmount on metro reloads
      if (call?.state.callingState !== CallingState.LEFT) {
        call?.leave().catch(e => {
          const logger = getLogger(['LivestreamPlayer']);
          logger('error', 'Error leaving call:', e);
        });
      }
    };
  }, [call]);
  if (!call) {
    return null;
  }
  return /*#__PURE__*/React.createElement(StreamCall, {
    call: call
  }, /*#__PURE__*/React.createElement(ViewerLivestream, {
    joinBehavior: joinBehavior
  }));
};
//# sourceMappingURL=LivestreamPlayer.js.map