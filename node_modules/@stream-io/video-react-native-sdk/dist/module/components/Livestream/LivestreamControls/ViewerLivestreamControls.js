import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { Pressable, StyleSheet, View } from 'react-native';
import { ViewerLeaveStreamButton as DefaultViewerLeaveStreamButton } from './ViewerLeaveStreamButton';
import { useTheme } from '../../../contexts';
import { Z_INDEX } from '../../../constants';
import { DurationBadge, FollowerCount, LiveIndicator } from '../LivestreamTopView';
import { IconWrapper, Maximize } from '../../../icons';
import InCallManager from 'react-native-incall-manager';
import { VolumeOff, VolumeOn, PauseIcon, PlayIcon } from '../../../icons/LivestreamControls';

/**
 * Props for the ViewerLivestreamControls component.
 */

/**
 * The ViewerLivestreamControls component displays the call controls for the live stream at viewer's end.
 */
export const ViewerLivestreamControls = ({
  ViewerLeaveStreamButton = DefaultViewerLeaveStreamButton,
  onLeaveStreamHandler,
  onLayout
}) => {
  const styles = useStyles();
  const {
    theme: {
      colors,
      viewerLivestreamControls,
      variants
    }
  } = useTheme();
  const [showControls, setShowControls] = useState(true);
  const [isMuted, setIsMuted] = useState(false);
  const [isPlaying, setIsPlaying] = useState(true);
  const [showPlayPauseButton, setShowPlayPauseButton] = useState(true);
  const playPauseTimeout = useRef(null);
  const hidePlayPauseButtonAfterDelay = useCallback(() => {
    if (playPauseTimeout.current) {
      clearTimeout(playPauseTimeout.current);
    }
    playPauseTimeout.current = setTimeout(() => {
      setShowPlayPauseButton(false);
      playPauseTimeout.current = null;
    }, 3000);
  }, []);
  useEffect(() => {
    hidePlayPauseButtonAfterDelay();
    return () => {
      if (playPauseTimeout.current) {
        clearTimeout(playPauseTimeout.current);
      }
    };
  }, [hidePlayPauseButtonAfterDelay]);
  const showPlayPauseButtonWithTimeout = () => {
    setShowPlayPauseButton(true);
    hidePlayPauseButtonAfterDelay();
  };
  const showControlsHandler = () => {
    showPlayPauseButtonWithTimeout();
    if (showControls) {
      return;
    }
    setShowControls(true);
  };
  const toggleControls = () => {
    setShowControls(!showControls);
  };
  const toggleAudio = () => {
    setIsMuted(!isMuted);
    InCallManager.setForceSpeakerphoneOn(isMuted);
  };
  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
    showPlayPauseButtonWithTimeout();
  };
  const VolumeButton = /*#__PURE__*/React.createElement(Pressable, {
    onPress: toggleAudio,
    style: [styles.fullscreenButton]
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.icon]
  }, /*#__PURE__*/React.createElement(IconWrapper, null, isMuted ? /*#__PURE__*/React.createElement(VolumeOff, {
    color: colors.iconPrimary,
    size: variants.iconSizes.sm
  }) : /*#__PURE__*/React.createElement(VolumeOn, {
    color: colors.iconPrimary,
    size: variants.iconSizes.sm
  }))));
  const MaximizeButton = /*#__PURE__*/React.createElement(Pressable, {
    onPress: toggleControls,
    style: [styles.fullscreenButton]
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.icon]
  }, /*#__PURE__*/React.createElement(Maximize, {
    color: colors.iconPrimary,
    width: variants.iconSizes.sm,
    height: variants.iconSizes.sm
  })));
  const PlayPauseButton = /*#__PURE__*/React.createElement(Pressable, {
    onPress: togglePlayPause,
    style: styles.playPauseButton
  }, /*#__PURE__*/React.createElement(View, {
    style: styles.playPauseIcon
  }, /*#__PURE__*/React.createElement(IconWrapper, null, isPlaying ? /*#__PURE__*/React.createElement(PauseIcon, {
    color: colors.iconPrimary,
    size: variants.iconSizes.lg * 3
  }) : /*#__PURE__*/React.createElement(PlayIcon, {
    color: colors.iconPrimary,
    size: variants.iconSizes.lg * 3
  }))));
  return /*#__PURE__*/React.createElement(Pressable, {
    style: StyleSheet.absoluteFill,
    onPress: showControlsHandler
  }, !isPlaying && /*#__PURE__*/React.createElement(View, {
    style: styles.blackOverlay
  }), showPlayPauseButton && /*#__PURE__*/React.createElement(View, {
    style: styles.centerButtonContainer
  }, PlayPauseButton), showControls && /*#__PURE__*/React.createElement(View, {
    style: [styles.container, viewerLivestreamControls.container],
    onLayout: onLayout
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.leftElement, viewerLivestreamControls.leftElement]
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.leftElement]
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.liveInfo]
  }, /*#__PURE__*/React.createElement(LiveIndicator, null), /*#__PURE__*/React.createElement(FollowerCount, null)))), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(DurationBadge, {
    mode: "viewer"
  })), /*#__PURE__*/React.createElement(View, {
    style: [styles.rightElement, viewerLivestreamControls.rightElement]
  }, /*#__PURE__*/React.createElement(View, {
    style: styles.buttonContainer
  }, VolumeButton, MaximizeButton, ViewerLeaveStreamButton && /*#__PURE__*/React.createElement(ViewerLeaveStreamButton, {
    onLeaveStreamHandler: onLeaveStreamHandler
  })))));
};
const useStyles = () => {
  const {
    theme
  } = useTheme();
  return useMemo(() => StyleSheet.create({
    container: {
      position: 'absolute',
      bottom: 0,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 16,
      paddingHorizontal: 8,
      zIndex: Z_INDEX.IN_FRONT,
      backgroundColor: theme.colors.sheetOverlay
    },
    leftElement: {
      flex: 1,
      alignItems: 'flex-start',
      justifyContent: 'center'
    },
    rightElement: {
      flex: 1,
      alignItems: 'flex-end'
    },
    liveInfo: {
      flexDirection: 'row'
    },
    icon: {
      height: theme.variants.iconSizes.sm,
      width: theme.variants.iconSizes.sm
    },
    fullscreenButton: {
      backgroundColor: theme.colors.buttonSecondary,
      height: theme.variants.buttonSizes.xs,
      width: theme.variants.buttonSizes.xs,
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: theme.variants.borderRadiusSizes.sm,
      zIndex: 2
    },
    buttonContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      gap: theme.variants.spacingSizes.sm
    },
    centerButtonContainer: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: Z_INDEX.IN_FRONT,
      pointerEvents: 'box-none'
    },
    playPauseButton: {
      height: 200,
      width: 200,
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: Z_INDEX.IN_FRONT + 1
    },
    playPauseIcon: {
      height: 200,
      width: 200
    },
    blackOverlay: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'black',
      zIndex: Z_INDEX.IN_FRONT - 1
    }
  }), [theme]);
};
//# sourceMappingURL=ViewerLivestreamControls.js.map