import React, { useEffect, useMemo } from 'react';
import { StyleSheet, View } from 'react-native';
import InCallManager from 'react-native-incall-manager';
import { useTheme } from '../../../contexts';
import { HostLivestreamTopView as DefaultHostLivestreamTopView } from '../LivestreamTopView/HostLivestreamTopView';
import { HostLivestreamControls as DefaultHostLivestreamControls } from '../LivestreamControls/HostLivestreamControls';
import { LivestreamLayout as DefaultLivestreamLayout } from '../LivestreamLayout';
import { Z_INDEX } from '../../../constants';
import { FloatingParticipantView as DefaultFloatingParticipantView } from '../../Participant/FloatingParticipantView';
import { useCallStateHooks } from '@stream-io/video-react-bindings';
import { hasVideo } from '@stream-io/video-client';
import { ScreenShareOverlay as DefaultScreenShaerOverlay } from '../../utility/ScreenShareOverlay';

/**
 * Props for the HostLivestream component.
 */

/**
 * The HostLivestream component displays the UI for the Host's live stream.
 */
export const HostLivestream = ({
  HostLivestreamTopView = DefaultHostLivestreamTopView,
  HostLivestreamControls = DefaultHostLivestreamControls,
  LivestreamLayout = DefaultLivestreamLayout,
  FloatingParticipantView = DefaultFloatingParticipantView,
  ScreenShareOverlay = DefaultScreenShaerOverlay,
  LiveIndicator,
  FollowerCount,
  DurationBadge,
  HostStartStreamButton,
  LivestreamMediaControls,
  onEndStreamHandler,
  onStartStreamHandler,
  hls,
  disableStopPublishedStreamsOnEndStream
}) => {
  const styles = useStyles();
  const {
    theme: {
      colors,
      hostLivestream
    }
  } = useTheme();
  const {
    useParticipants,
    useHasOngoingScreenShare
  } = useCallStateHooks();
  const [currentSpeaker] = useParticipants();
  const hasOngoingScreenShare = useHasOngoingScreenShare();
  const floatingParticipant = hasOngoingScreenShare && currentSpeaker && hasVideo(currentSpeaker) && currentSpeaker;

  // Automatically route audio to speaker devices as relevant for watching videos.
  useEffect(() => {
    InCallManager.start({
      media: 'video'
    });
    return () => InCallManager.stop();
  }, []);
  const [topViewHeight, setTopViewHeight] = React.useState();
  const [controlsHeight, setControlsHeight] = React.useState();
  const topViewProps = {
    LiveIndicator,
    FollowerCount,
    DurationBadge,
    onLayout: event => {
      setTopViewHeight(event.nativeEvent.layout.height);
    }
  };
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, {
      backgroundColor: colors.sheetTertiary
    }, hostLivestream.container]
  }, HostLivestreamTopView && /*#__PURE__*/React.createElement(View, {
    style: styles.topViewContainer,
    onLayout: event => {
      setTopViewHeight(event.nativeEvent.layout.height);
    }
  }, /*#__PURE__*/React.createElement(HostLivestreamTopView, topViewProps)), FloatingParticipantView && floatingParticipant && topViewHeight && controlsHeight && /*#__PURE__*/React.createElement(FloatingParticipantView, {
    participant: floatingParticipant,
    draggableContainerStyle: [StyleSheet.absoluteFill, {
      top: topViewHeight,
      bottom: controlsHeight
    }]
  }), LivestreamLayout && /*#__PURE__*/React.createElement(LivestreamLayout, {
    ScreenShareOverlay: ScreenShareOverlay
  }), HostLivestreamControls && /*#__PURE__*/React.createElement(HostLivestreamControls, {
    onEndStreamHandler: onEndStreamHandler,
    onStartStreamHandler: onStartStreamHandler,
    HostStartStreamButton: HostStartStreamButton,
    LivestreamMediaControls: LivestreamMediaControls,
    hls: hls,
    onLayout: event => {
      setControlsHeight(event.nativeEvent.layout.height);
    },
    disableStopPublishedStreamsOnEndStream: disableStopPublishedStreamsOnEndStream
  }));
};
const useStyles = () => {
  const {
    theme
  } = useTheme();
  return useMemo(() => StyleSheet.create({
    container: {
      flex: 1,
      paddingBottom: theme.variants.insets.bottom,
      paddingLeft: theme.variants.insets.left,
      paddingRight: theme.variants.insets.right,
      paddingTop: theme.variants.insets.top,
      backgroundColor: theme.colors.sheetPrimary
    },
    topViewContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      zIndex: Z_INDEX.IN_FRONT
    },
    controlsViewContainer: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: Z_INDEX.IN_FRONT
    }
  }), [theme]);
};
//# sourceMappingURL=HostLivestream.js.map