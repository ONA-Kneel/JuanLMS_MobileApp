import React, { createContext, useContext, useMemo } from 'react';
import merge from 'lodash.merge';
import { defaultTheme } from '../theme/theme';

/**
 * @deprecated Use StreamThemeInputValue instead.
 */

export const mergeThemes = params => {
  const {
    style,
    theme
  } = params;
  const finalTheme = !theme || Object.keys(theme).length === 0 ? JSON.parse(JSON.stringify(defaultTheme)) : JSON.parse(JSON.stringify(theme));
  if (style) {
    merge(finalTheme, style);
  }
  return finalTheme;
};
const DEFAULT_BASE_CONTEXT_VALUE = {};
export const ThemeContext = /*#__PURE__*/createContext(DEFAULT_BASE_CONTEXT_VALUE);
export const StreamTheme = props => {
  const {
    children,
    mergedStyle,
    style,
    theme
  } = props;
  const modifiedTheme = useMemo(() => {
    if (mergedStyle) {
      return mergedStyle;
    }
    return mergeThemes({
      style,
      theme
    });
  }, [mergedStyle, style, theme]);
  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {
    value: modifiedTheme
  }, children);
};

/**
 * @deprecated Use StreamTheme instead of ThemeProvider.
 */
export const ThemeProvider = StreamTheme;
export const useTheme = () => {
  const theme = useContext(ThemeContext);
  if (theme === DEFAULT_BASE_CONTEXT_VALUE) {
    throw new Error('The useThemeContext hook was called outside the ThemeContext Provider. Make sure you have configured OverlayProvider component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#overlay-provider');
  }
  return {
    theme
  };
};
//# sourceMappingURL=ThemeContext.js.map