import { getLogger } from '@stream-io/video-client';
import React, { createContext, useContext, useCallback, useMemo } from 'react';
import { NativeModules, findNodeHandle, Platform } from 'react-native';
const {
  StreamVideoReactNative
} = NativeModules;
// Create the context with a default undefined value
const ScreenshotIosContext = /*#__PURE__*/createContext(undefined);
const participantVideoViewRefMap = new Map();
export const ScreenshotIosContextProvider = ({
  children
}) => {
  // Register a participant's RTCView ref
  const register = useCallback((participant, videoTrackType, ref) => {
    if (ref && participant.userId) {
      participantVideoViewRefMap.set(`${participant.userId}-${videoTrackType}`, ref);
    }
  }, []);
  const deregister = useCallback((participant, videoTrackType) => {
    if (participant.userId) {
      participantVideoViewRefMap.delete(`${participant.userId}-${videoTrackType}`);
    }
  }, []);

  // Take a snapshot of a specific participant's view
  const take = useCallback(async (participant, videoTrackType) => {
    try {
      if (Platform.OS !== 'ios') {
        throw new Error('ScreenshotIosContextProvider is only supported on iOS');
      }
      const ref = participantVideoViewRefMap.get(`${participant.userId}-${videoTrackType}`);
      if (!ref || !ref.current) {
        getLogger(['ScreenshotIosContextProvider'])('error', 'Cannot take snapshot: No registered view for this participant');
        return null;
      }

      // Get the native handle for the view
      const tag = findNodeHandle(ref.current);
      if (!tag) {
        getLogger(['ScreenshotIosContextProvider'])('error', 'Cannot take snapshot: Cannot get native handle for view');
        return null;
      }

      // Take the snapshot using our native module
      const base64Image = await StreamVideoReactNative.captureRef(tag, {});
      return base64Image;
    } catch (error) {
      getLogger(['ScreenshotIosContextProvider'])('error', 'Error taking participant snapshot:', error);
      return null;
    }
  }, []);
  const value = useMemo(() => ({
    register,
    deregister,
    take
  }), [register, deregister, take]);
  return /*#__PURE__*/React.createElement(ScreenshotIosContext.Provider, {
    value: value
  }, children);
};
export const useScreenshotIosContext = () => {
  const context = useContext(ScreenshotIosContext);
  if (!context) {
    throw new Error('useScreenshotIosContext must be used within a ScreenshotIosContextProvider');
  }
  return context;
};
//# sourceMappingURL=ScreenshotIosContext.js.map