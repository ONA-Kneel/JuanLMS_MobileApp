import React, { createContext, useContext, useEffect, useState } from 'react';
import { getLogger, NoiseCancellationSettingsModeEnum, OwnCapability } from '@stream-io/video-client';
import { useCall, useCallStateHooks } from '@stream-io/video-react-bindings';
import { getNoiseCancellationLibThrowIfNotInstalled, NoiseCancellationWrapper } from './lib';

/**
 * The Noise Cancellation API.
 */

const NoiseCancellationContext = /*#__PURE__*/createContext(null);

/**
 * Exposes the NoiseCancellation API.
 * Throws an error if used outside <NoiseCancellationProvider />.
 */
export const useNoiseCancellation = () => {
  const context = useContext(NoiseCancellationContext);
  if (!context) {
    throw new Error('useNoiseCancellation must be used within a NoiseCancellationProvider');
  }
  return context;
};
export const NoiseCancellationProvider = props => {
  const call = useCall();
  const [deviceSupportsAdvancedAudioProcessing, setDeviceSupportsAdvancedAudioProcessing] = useState();
  const {
    useCallSettings,
    useHasPermissions
  } = useCallStateHooks();
  const settings = useCallSettings();
  const noiseCancellationAllowed = !!(settings && settings.audio.noise_cancellation && settings.audio.noise_cancellation.mode !== NoiseCancellationSettingsModeEnum.DISABLED);
  const hasCapability = useHasPermissions(OwnCapability.ENABLE_NOISE_CANCELLATION);
  const [isEnabled, setIsEnabled] = useState(false);
  useEffect(() => {
    const noiseCancellationNativeLib = getNoiseCancellationLibThrowIfNotInstalled();
    noiseCancellationNativeLib.deviceSupportsAdvancedAudioProcessing().then(result => setDeviceSupportsAdvancedAudioProcessing(result));
    noiseCancellationNativeLib.isEnabled().then(e => setIsEnabled(e));
  }, []);
  const isSupported = hasCapability && noiseCancellationAllowed;
  useEffect(() => {
    if (!call || !isSupported) return;
    const ncInstance = NoiseCancellationWrapper.getInstance();
    const unsubscribe = ncInstance.on('change', v => setIsEnabled(v));
    call.microphone.enableNoiseCancellation(ncInstance).catch(err => getLogger(['NoiseCancellationProvider'])('error', `Can't initialize noise suppression`, err));
    return () => {
      call.microphone.disableNoiseCancellation().catch(err => getLogger(['NoiseCancellationProvider'])('error', `Can't disable noise suppression`, err));
      unsubscribe();
    };
  }, [call, isSupported]);
  return /*#__PURE__*/React.createElement(NoiseCancellationContext.Provider, {
    value: {
      deviceSupportsAdvancedAudioProcessing,
      isSupported,
      isEnabled,
      setEnabled: enabledOrSetter => {
        const ncInstance = NoiseCancellationWrapper.getInstance();
        const enable = typeof enabledOrSetter === 'function' ? enabledOrSetter(isEnabled) : enabledOrSetter;
        if (enable) {
          ncInstance.enable();
        } else {
          ncInstance.disable();
        }
      }
    }
  }, props.children);
};
//# sourceMappingURL=NoiseCancellationProvider.js.map