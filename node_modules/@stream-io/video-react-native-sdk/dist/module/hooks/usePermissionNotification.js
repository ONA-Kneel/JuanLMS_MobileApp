import { CallingState } from '@stream-io/video-client';
import { useCallStateHooks } from '@stream-io/video-react-bindings';
import { useCallback, useEffect } from 'react';
import { Alert } from 'react-native';
import { usePrevious } from '../utils/hooks/usePrevious';
export const usePermissionNotification = props => {
  const {
    permission,
    messageApproved,
    messageRevoked
  } = props;
  const {
    useCallCallingState,
    useHasPermissions
  } = useCallStateHooks();
  const hasPermission = useHasPermissions(permission);
  const previousHasPermission = usePrevious(hasPermission);
  const callingState = useCallCallingState();
  const showGrantedNotification = useCallback(() => {
    Alert.alert(messageApproved);
  }, [messageApproved]);
  const showRevokedNotification = useCallback(() => {
    Alert.alert(messageRevoked);
  }, [messageRevoked]);
  useEffect(() => {
    // Permission state is not reliable before the call is joined,
    // hence we only check whether to show the notification only when the call is actively joined.
    if (callingState !== CallingState.JOINED) {
      return;
    }
    if (hasPermission && !previousHasPermission) {
      showGrantedNotification();
    } else if (!hasPermission && previousHasPermission) {
      showRevokedNotification();
    }
  }, [callingState, hasPermission, previousHasPermission, showGrantedNotification, showRevokedNotification]);
};
//# sourceMappingURL=usePermissionNotification.js.map