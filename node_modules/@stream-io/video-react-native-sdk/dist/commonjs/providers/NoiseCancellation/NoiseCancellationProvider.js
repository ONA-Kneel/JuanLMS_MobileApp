"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNoiseCancellation = exports.NoiseCancellationProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _lib = require("./lib");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * The Noise Cancellation API.
 */

const NoiseCancellationContext = /*#__PURE__*/(0, _react.createContext)(null);

/**
 * Exposes the NoiseCancellation API.
 * Throws an error if used outside <NoiseCancellationProvider />.
 */
const useNoiseCancellation = () => {
  const context = (0, _react.useContext)(NoiseCancellationContext);
  if (!context) {
    throw new Error('useNoiseCancellation must be used within a NoiseCancellationProvider');
  }
  return context;
};
exports.useNoiseCancellation = useNoiseCancellation;
const NoiseCancellationProvider = props => {
  const call = (0, _videoReactBindings.useCall)();
  const [deviceSupportsAdvancedAudioProcessing, setDeviceSupportsAdvancedAudioProcessing] = (0, _react.useState)();
  const {
    useCallSettings,
    useHasPermissions
  } = (0, _videoReactBindings.useCallStateHooks)();
  const settings = useCallSettings();
  const noiseCancellationAllowed = !!(settings && settings.audio.noise_cancellation && settings.audio.noise_cancellation.mode !== _videoClient.NoiseCancellationSettingsModeEnum.DISABLED);
  const hasCapability = useHasPermissions(_videoClient.OwnCapability.ENABLE_NOISE_CANCELLATION);
  const [isEnabled, setIsEnabled] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    const noiseCancellationNativeLib = (0, _lib.getNoiseCancellationLibThrowIfNotInstalled)();
    noiseCancellationNativeLib.deviceSupportsAdvancedAudioProcessing().then(result => setDeviceSupportsAdvancedAudioProcessing(result));
    noiseCancellationNativeLib.isEnabled().then(e => setIsEnabled(e));
  }, []);
  const isSupported = hasCapability && noiseCancellationAllowed;
  (0, _react.useEffect)(() => {
    if (!call || !isSupported) return;
    const ncInstance = _lib.NoiseCancellationWrapper.getInstance();
    const unsubscribe = ncInstance.on('change', v => setIsEnabled(v));
    call.microphone.enableNoiseCancellation(ncInstance).catch(err => (0, _videoClient.getLogger)(['NoiseCancellationProvider'])('error', `Can't initialize noise suppression`, err));
    return () => {
      call.microphone.disableNoiseCancellation().catch(err => (0, _videoClient.getLogger)(['NoiseCancellationProvider'])('error', `Can't disable noise suppression`, err));
      unsubscribe();
    };
  }, [call, isSupported]);
  return /*#__PURE__*/_react.default.createElement(NoiseCancellationContext.Provider, {
    value: {
      deviceSupportsAdvancedAudioProcessing,
      isSupported,
      isEnabled,
      setEnabled: enabledOrSetter => {
        const ncInstance = _lib.NoiseCancellationWrapper.getInstance();
        const enable = typeof enabledOrSetter === 'function' ? enabledOrSetter(isEnabled) : enabledOrSetter;
        if (enable) {
          ncInstance.enable();
        } else {
          ncInstance.disable();
        }
      }
    }
  }, props.children);
};
exports.NoiseCancellationProvider = NoiseCancellationProvider;
//# sourceMappingURL=NoiseCancellationProvider.js.map