"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StreamCall = void 0;
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = _interopRequireWildcard(require("react"));
var _useIosCallkeepWithCallingStateEffect = require("../../hooks/push/useIosCallkeepWithCallingStateEffect");
var _utils = require("../../utils/push/internal/utils");
var _useAndroidKeepCallAliveEffect = require("../../hooks/useAndroidKeepCallAliveEffect");
var _AppStateListener = require("./AppStateListener");
var _DeviceStats = require("./DeviceStats");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// const PIP_CHANGE_EVENT = 'StreamVideoReactNative_PIP_CHANGE_EVENT';

// const isAndroid8OrAbove = Platform.OS === 'android' && Platform.Version >= 26;

/**
 * StreamCall is a wrapper component that orchestrates the call life cycle logic and
 * provides the call object to the children components.
 * @param PropsWithChildren<StreamCallProps>
 *
 * @category Client State
 */
const StreamCall = ({
  call,
  children
}) => {
  return /*#__PURE__*/_react.default.createElement(_videoReactBindings.StreamCallProvider, {
    call: call
  }, /*#__PURE__*/_react.default.createElement(_AppStateListener.AppStateListener, null), /*#__PURE__*/_react.default.createElement(AndroidKeepCallAlive, null), /*#__PURE__*/_react.default.createElement(IosInformCallkeepCallEnd, null), /*#__PURE__*/_react.default.createElement(ClearPushWSSubscriptions, null), /*#__PURE__*/_react.default.createElement(_DeviceStats.DeviceStats, null), children);
};

/**
 * This is a renderless component to keep the call alive on Android device using useAndroidKeepCallAliveEffect.
 * useAndroidKeepCallAliveEffect needs to called inside a child of StreamCallProvider.
 */
exports.StreamCall = StreamCall;
const AndroidKeepCallAlive = () => {
  (0, _useAndroidKeepCallAliveEffect.useAndroidKeepCallAliveEffect)();
  return null;
};

/**
 * This is a renderless component to end the call in callkeep for ios.
 * useAndroidKeepCallAliveEffect needs to called inside a child of StreamCallProvider.
 */
const IosInformCallkeepCallEnd = () => {
  (0, _useIosCallkeepWithCallingStateEffect.useIosCallkeepWithCallingStateEffect)();
  return null;
};

/**
 * This is a renderless component to clear all push ws event subscriptions
 * and set whether push ws subscriptions can be added or not.
 */
const ClearPushWSSubscriptions = () => {
  (0, _react.useEffect)(() => {
    (0, _utils.clearPushWSEventSubscriptions)();
    _utils.canAddPushWSSubscriptionsRef.current = false;
    return () => {
      _utils.canAddPushWSSubscriptionsRef.current = true;
    };
  }, []);
  return null;
};
//# sourceMappingURL=index.js.map