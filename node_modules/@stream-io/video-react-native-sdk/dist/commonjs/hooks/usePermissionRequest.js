"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePermissionRequest = void 0;
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = require("react");
var _reactNative = require("react-native");
const usePermissionRequest = () => {
  const call = (0, _videoReactBindings.useCall)();
  const {
    useHasPermissions
  } = (0, _videoReactBindings.useCallStateHooks)();
  const userHasUpdateCallPermissionsCapability = useHasPermissions(_videoClient.OwnCapability.UPDATE_CALL_PERMISSIONS);
  const messageForPermission = (userName, permission) => {
    switch (permission) {
      case _videoClient.OwnCapability.SEND_AUDIO:
        return `${userName} is requesting to speak`;
      case _videoClient.OwnCapability.SEND_VIDEO:
        return `${userName} is requesting to share their camera`;
      case _videoClient.OwnCapability.SCREENSHARE:
        return `${userName} is requesting to present their screen`;
      default:
        return `${userName} is requesting permission: ${permission}`;
    }
  };
  const handleUpdatePermission = (0, _react.useCallback)((request, allow) => {
    return async () => {
      const {
        user,
        permissions
      } = request;
      try {
        if (allow) {
          await call?.grantPermissions(user.id, permissions);
        } else {
          await call?.revokePermissions(user.id, permissions);
        }
      } catch (err) {
        const logger = (0, _videoClient.getLogger)(['usePermissionRequest']);
        logger('error', 'error handling permissions: ', err);
      }
    };
  }, [call]);
  (0, _react.useEffect)(() => {
    if (!call || !userHasUpdateCallPermissionsCapability) {
      return;
    }
    return call.on('call.permission_request', event => {
      if (event.type !== 'call.permission_request') {
        return;
      }
      const {
        user,
        permissions
      } = event;
      permissions.forEach(permission => {
        return _reactNative.Alert.alert('Permissions Request', messageForPermission(user.name ?? user.id, permission), [{
          text: 'Reject',
          onPress: handleUpdatePermission(event, false)
        }, {
          text: 'Allow',
          onPress: handleUpdatePermission(event, true)
        }]);
      });
    });
  }, [call, userHasUpdateCallPermissionsCapability, handleUpdatePermission]);
};
exports.usePermissionRequest = usePermissionRequest;
//# sourceMappingURL=usePermissionRequest.js.map