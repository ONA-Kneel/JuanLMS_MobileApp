"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInitAndroidTokenAndRest = void 0;
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = require("react");
var _utils = require("../../utils");
var _android = require("../../utils/push/android");
var _videoClient = require("@stream-io/video-client");
/**
 * This hook is used to initialize the push token for Android.
 */
const useInitAndroidTokenAndRest = () => {
  const client = (0, _videoReactBindings.useStreamVideoClient)();
  const connectedUserId = (0, _videoReactBindings.useConnectedUser)()?.id;
  (0, _react.useEffect)(() => {
    const pushConfig = _utils.StreamVideoRN.getConfig().push;
    // NOTE: we need to wait for user to be connected before we can send the push token
    if (!client || !connectedUserId || !pushConfig) {
      return;
    }
    let unsubscribe = () => {};
    (0, _android.initAndroidPushToken)(client, pushConfig, unsubscribeListener => {
      unsubscribe = unsubscribeListener;
    }).catch(error => {
      (0, _videoClient.getLogger)(['useInitAndroidTokenAndRest'])('warn', 'Error in initializing android push token', error);
    });
    return () => {
      unsubscribe();
    };
  }, [client, connectedUserId]);
};
exports.useInitAndroidTokenAndRest = useInitAndroidTokenAndRest;
//# sourceMappingURL=useInitAndroidTokenAndRest.js.map