"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useProcessPushCallEffect = void 0;
var _rxSubjects = require("../../utils/push/internal/rxSubjects");
var _react = require("react");
var _utils = require("../../utils");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _operators = require("rxjs/operators");
var _utils2 = require("../../utils/push/internal/utils");
var _videoClient = require("@stream-io/video-client");
/**
 * This hook is used to process the incoming call data via push notifications using the relevant rxjs subjects
 * It either joins or leaves the call based on the user's action.
 * Note: this effect cannot work when push notifications are received when the app is in quit state or in other words when the client is not connected with a websocket.
 * So we essentially run this effect only when the client is connected with a websocket.
 */
const useProcessPushCallEffect = () => {
  const client = (0, _videoReactBindings.useStreamVideoClient)();
  const connectedUserId = (0, _videoReactBindings.useConnectedUser)()?.id;
  // The Effect to join/reject call automatically when incoming call was received and processed from push notification
  (0, _react.useEffect)(() => {
    const pushConfig = _utils.StreamVideoRN.getConfig().push;
    if (!pushConfig || !client || !connectedUserId) {
      return;
    }
    (0, _videoClient.getLogger)(['useProcessPushCallEffect'])('debug', `Adding subscriptions to process incoming call from push notification`);

    // if the user accepts the call from push notification we join the call
    const acceptedCallSubscription = createCallSubscription(_rxSubjects.pushAcceptedIncomingCallCId$, client, pushConfig, 'accept');

    // if the user rejects the call from push notification we leave the call
    const declinedCallSubscription = createCallSubscription(_rxSubjects.pushRejectedIncomingCallCId$, client, pushConfig, 'decline');

    // if the user taps the call from push notification we do nothing as the only thing is to get the call which adds it to the client
    const pressedCallSubscription = createCallSubscription(_rxSubjects.pushTappedIncomingCallCId$, client, pushConfig, 'pressed');
    const backgroundIncomingDeliveredCallSubscription = createCallSubscription(_rxSubjects.pushAndroidBackgroundDeliveredIncomingCallCId$, client, pushConfig, 'backgroundDelivered');
    return () => {
      acceptedCallSubscription.unsubscribe();
      declinedCallSubscription.unsubscribe();
      pressedCallSubscription.unsubscribe();
      backgroundIncomingDeliveredCallSubscription.unsubscribe();
    };
  }, [client, connectedUserId]);
};

/**
 * A type guard to check if the cid is not undefined
 */
exports.useProcessPushCallEffect = useProcessPushCallEffect;
function cidIsNotUndefined(cid) {
  return cid !== undefined;
}

/**
 * The common logic to create a subscription for the given call cid and action
 */
const createCallSubscription = (behaviourSubjectWithCallCid, client, pushConfig, action) => {
  return behaviourSubjectWithCallCid.pipe((0, _operators.distinctUntilChanged)(), (0, _operators.filter)(cidIsNotUndefined)).subscribe(async callCId => {
    (0, _videoClient.getLogger)(['useProcessPushCallEffect'])('debug', `Processing call from push notification with action: ${action} and callCId: ${callCId}`);
    await (0, _utils2.processCallFromPush)(client, callCId, action, pushConfig);
    behaviourSubjectWithCallCid.next(undefined); // remove the current call id to avoid processing again
  });
};
//# sourceMappingURL=useProcessPushCallEffect.js.map