"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIosCallkeepWithCallingStateEffect = void 0;
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _reactNative = require("react-native");
var _react = require("react");
var _utils = require("../../utils");
var _libs = require("../../utils/push/libs");
var _rxSubjects = require("../../utils/push/internal/rxSubjects");
const isNonActiveCallingState = callingState => {
  return callingState === _videoClient.CallingState.IDLE || callingState === _videoClient.CallingState.UNKNOWN || callingState === _videoClient.CallingState.LEFT;
};
const isAcceptedCallingState = callingState => {
  return callingState === _videoClient.CallingState.JOINING || callingState === _videoClient.CallingState.JOINED;
};
const unsubscribeCallkeepEvents = async activeCallCid => {
  const voipPushNotificationCallCId = _videoClient.RxUtils.getCurrentValue(_rxSubjects.voipPushNotificationCallCId$);
  if (activeCallCid && activeCallCid === voipPushNotificationCallCId) {
    // callkeep events should not be listened anymore so clear the call cid
    _rxSubjects.voipPushNotificationCallCId$.next(undefined);
  }
  return await _reactNative.NativeModules.StreamVideoReactNative?.removeIncomingCall(activeCallCid);
};
const logger = (0, _videoClient.getLogger)(['useIosCallkeepWithCallingStateEffect']);
const log = message => {
  logger('warn', message);
};

/**
 * This hook is used to inform the callkeep library that the call has been joined or ended.
 */
const useIosCallkeepWithCallingStateEffect = () => {
  const activeCall = (0, _videoReactBindings.useCall)();
  const {
    useCallCallingState
  } = (0, _videoReactBindings.useCallStateHooks)();
  const callingState = useCallCallingState();
  const [acceptedForegroundCallkeepMap, setAcceptedForegroundCallkeepMap] = (0, _react.useState)();
  (0, _react.useEffect)(() => {
    return () => {
      const pushConfig = _utils.StreamVideoRN.getConfig().push;
      if (_reactNative.Platform.OS !== 'ios' || !pushConfig || !pushConfig.ios?.pushProviderName) {
        return;
      }
      if (!pushConfig.android.incomingCallChannel) {
        // TODO: remove this check and find a better way once we have telecom integration for android
        return;
      }
      const callkeep = (0, _libs.getCallKeepLib)();
      // if the component is unmounted and the callID was not reported to callkeep, then report it now
      if (acceptedForegroundCallkeepMap) {
        log(`Ending call in callkeep: ${acceptedForegroundCallkeepMap.cid}, reason: component unmounted and call was present in acceptedForegroundCallkeepMap`);
        unsubscribeCallkeepEvents(acceptedForegroundCallkeepMap.cid).then(() => callkeep.endCall(acceptedForegroundCallkeepMap.uuid));
      }
    };
  }, [acceptedForegroundCallkeepMap]);
  const activeCallCid = activeCall?.cid;
  (0, _react.useEffect)(() => {
    return () => {
      const pushConfig = _utils.StreamVideoRN.getConfig().push;
      if (_reactNative.Platform.OS !== 'ios' || !pushConfig || !pushConfig.ios?.pushProviderName || !activeCallCid) {
        return;
      }
      if (!pushConfig.android.incomingCallChannel) {
        // TODO: remove this check and find a better way once we have telecom integration for android
        return;
      }
      const nativeDialerAcceptedCallMap = _videoClient.RxUtils.getCurrentValue(_rxSubjects.voipCallkeepAcceptedCallOnNativeDialerMap$);
      const foregroundIncomingCallkeepMap = _videoClient.RxUtils.getCurrentValue(_rxSubjects.voipCallkeepCallOnForegroundMap$);
      const callkeep = (0, _libs.getCallKeepLib)();
      if (activeCallCid === nativeDialerAcceptedCallMap?.cid) {
        log(`Ending call in callkeep: ${activeCallCid}, reason: activeCallCid changed or was removed and call was present in nativeDialerAcceptedCallMap`);
        unsubscribeCallkeepEvents(activeCallCid).then(() => callkeep.endCall(nativeDialerAcceptedCallMap.uuid));
        // no need to keep this reference anymore
        _rxSubjects.voipCallkeepAcceptedCallOnNativeDialerMap$.next(undefined);
      } else if (activeCallCid === foregroundIncomingCallkeepMap?.cid) {
        log(`Ending call in callkeep: ${activeCallCid}, reason: activeCallCid changed or was removed and call was present in foregroundIncomingCallkeepMap`);
        unsubscribeCallkeepEvents(activeCallCid).then(() => callkeep.endCall(foregroundIncomingCallkeepMap.uuid));
      }
    };
  }, [activeCallCid]);
  const pushConfig = _utils.StreamVideoRN.getConfig().push;
  if (_reactNative.Platform.OS !== 'ios' || !pushConfig || !pushConfig.ios.pushProviderName || !activeCallCid) {
    return;
  }
  if (!pushConfig.android.incomingCallChannel) {
    // TODO: remove this check and find a better way once we have telecom integration for android
    return;
  }

  /**
   * Check if current call is still needed to be accepted in callkeep
   */
  if (isAcceptedCallingState(callingState) && acceptedForegroundCallkeepMap?.cid !== activeCallCid) {
    const callkeep = (0, _libs.getCallKeepLib)();
    // push notification was displayed
    // but the call has been accepted through the app and not through the native dialer
    const foregroundCallkeepMap = _videoClient.RxUtils.getCurrentValue(_rxSubjects.voipCallkeepCallOnForegroundMap$);
    if (foregroundCallkeepMap && foregroundCallkeepMap.cid === activeCallCid) {
      log(
      // @ts-expect-error - types issue
      `Accepting call in callkeep: ${activeCallCid}, reason: callingstate went to ${_videoClient.CallingState[callingState]} and call was present in foregroundCallkeepMap`);
      // no need to keep this reference anymore
      _rxSubjects.voipCallkeepCallOnForegroundMap$.next(undefined);
      _reactNative.NativeModules.StreamVideoReactNative?.removeIncomingCall(activeCallCid).then(() => callkeep.answerIncomingCall(foregroundCallkeepMap.uuid));
      // this call should be accepted in callkeep
      setAcceptedForegroundCallkeepMap(foregroundCallkeepMap);
    }
  }

  /**
   * Check if current call is still needed to be ended in callkeep
   */
  if (isNonActiveCallingState(callingState)) {
    const callkeep = (0, _libs.getCallKeepLib)();

    // this was a previously joined call which had push notification displayed
    // the call was accepted through the app and not through native dialer
    // the call was left using the leave button in the app and not through native dialer
    if (activeCallCid === acceptedForegroundCallkeepMap?.cid) {
      log(
      // @ts-expect-error - types issue
      `Ending call in callkeep: ${activeCallCid}, reason: callingstate went to ${_videoClient.CallingState[callingState]} and call was present in acceptedForegroundCallkeepMap`);
      unsubscribeCallkeepEvents(activeCallCid).then(() => callkeep.endCall(acceptedForegroundCallkeepMap.uuid));
      setAcceptedForegroundCallkeepMap(undefined);
      return;
    }
    // this was a call which had push notification displayed but never joined
    // the user rejected in the app and not from native dialer
    const foregroundIncomingCallkeepMap = _videoClient.RxUtils.getCurrentValue(_rxSubjects.voipCallkeepCallOnForegroundMap$);
    if (activeCallCid === foregroundIncomingCallkeepMap?.cid) {
      log(
      // @ts-expect-error - types issue
      `Ending call in callkeep: ${activeCallCid}, reason: callingstate went to ${_videoClient.CallingState[callingState]} and call was present in foregroundIncomingCallkeepMap`);
      unsubscribeCallkeepEvents(activeCallCid).then(() => callkeep.endCall(foregroundIncomingCallkeepMap.uuid));
      // no need to keep this reference anymore
      _rxSubjects.voipCallkeepCallOnForegroundMap$.next(undefined);
      return;
    }
    // this was a previously joined call
    // it was an accepted call from native dialer and not from the app
    // the user left using the leave button in the app
    const nativeDialerAcceptedCallMap = _videoClient.RxUtils.getCurrentValue(_rxSubjects.voipCallkeepAcceptedCallOnNativeDialerMap$);
    if (activeCallCid === nativeDialerAcceptedCallMap?.cid) {
      log(
      // @ts-expect-error - types issue
      `Ending call in callkeep: ${activeCallCid}, reason: callingstate went to ${_videoClient.CallingState[callingState]} and call was present in nativeDialerAcceptedCallMap`);
      unsubscribeCallkeepEvents(activeCallCid).then(() => callkeep.endCall(nativeDialerAcceptedCallMap.uuid));
      // no need to keep this reference anymore
      _rxSubjects.voipCallkeepAcceptedCallOnNativeDialerMap$.next(undefined);
      return;
    }
  }
};
exports.useIosCallkeepWithCallingStateEffect = useIosCallkeepWithCallingStateEffect;
//# sourceMappingURL=useIosCallkeepWithCallingStateEffect.js.map