"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScreenshot = useScreenshot;
var _react = require("react");
var _ScreenshotIosContext = require("../contexts/internal/ScreenshotIosContext");
var _reactNative = require("react-native");
var _videoClient = require("@stream-io/video-client");
const {
  StreamVideoReactNative
} = _reactNative.NativeModules;

/**
 * Hook that provides functionality to take screenshots of participant video streams.
 *
 * @returns An object containing the `takeScreenShot` function that captures a participant's video.
 */

function useScreenshot() {
  const {
    take
  } = (0, _ScreenshotIosContext.useScreenshotIosContext)();
  const takeScreenshot = (0, _react.useCallback)(async (participant, videoTrackType) => {
    if (_reactNative.Platform.OS === 'android') {
      const {
        videoStream,
        screenShareStream
      } = participant;
      const videoStreamForScreenshot = videoTrackType === 'screenShareTrack' ? screenShareStream : videoStream;
      if (videoStreamForScreenshot) {
        try {
          return await StreamVideoReactNative.takeScreenshot(videoStreamForScreenshot.toURL());
        } catch (error) {
          (0, _videoClient.getLogger)(['useScreenshot'])('error', 'Error taking screenshot', error);
          return null;
        }
      }
      return null;
    } else {
      try {
        return await take(participant, videoTrackType);
      } catch (error) {
        (0, _videoClient.getLogger)(['useScreenshot'])('error', 'Error taking screenshot', error);
        return null;
      }
    }
  }, [take]);
  return {
    takeScreenshot
  };
}
//# sourceMappingURL=useScreenshot.js.map