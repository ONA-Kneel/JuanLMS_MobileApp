"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePermissionNotification = void 0;
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = require("react");
var _reactNative = require("react-native");
var _usePrevious = require("../utils/hooks/usePrevious");
const usePermissionNotification = props => {
  const {
    permission,
    messageApproved,
    messageRevoked
  } = props;
  const {
    useCallCallingState,
    useHasPermissions
  } = (0, _videoReactBindings.useCallStateHooks)();
  const hasPermission = useHasPermissions(permission);
  const previousHasPermission = (0, _usePrevious.usePrevious)(hasPermission);
  const callingState = useCallCallingState();
  const showGrantedNotification = (0, _react.useCallback)(() => {
    _reactNative.Alert.alert(messageApproved);
  }, [messageApproved]);
  const showRevokedNotification = (0, _react.useCallback)(() => {
    _reactNative.Alert.alert(messageRevoked);
  }, [messageRevoked]);
  (0, _react.useEffect)(() => {
    // Permission state is not reliable before the call is joined,
    // hence we only check whether to show the notification only when the call is actively joined.
    if (callingState !== _videoClient.CallingState.JOINED) {
      return;
    }
    if (hasPermission && !previousHasPermission) {
      showGrantedNotification();
    } else if (!hasPermission && previousHasPermission) {
      showRevokedNotification();
    }
  }, [callingState, hasPermission, previousHasPermission, showGrantedNotification, showRevokedNotification]);
};
exports.usePermissionNotification = usePermissionNotification;
//# sourceMappingURL=usePermissionNotification.js.map