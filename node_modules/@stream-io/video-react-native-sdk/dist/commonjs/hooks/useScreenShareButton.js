"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScreenShareButton = void 0;
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = require("react");
var _reactNative = require("react-native");
var _hooks = require("../utils/hooks");
var _useIsIosScreenshareBroadcastStarted = require("./useIsIosScreenshareBroadcastStarted");
// ios >= 14.0 or android - platform restrictions
const CanDeviceScreenShare = _reactNative.Platform.OS === 'ios' && Number.parseInt(_reactNative.Platform.Version?.split('.')[0] ?? '0', 10) >= 14 || _reactNative.Platform.OS === 'android';
const useScreenShareButton = (screenCapturePickerViewiOSRef, onScreenShareStartedHandler, onScreenShareStoppedHandler, onMissingScreenShareStreamPermission) => {
  const call = (0, _videoReactBindings.useCall)();
  const {
    useLocalParticipant,
    useCallSettings,
    useOwnCapabilities
  } = (0, _videoReactBindings.useCallStateHooks)();
  const callSettings = useCallSettings();
  const ownCapabilities = useOwnCapabilities();
  const hasScreenSharingPermissions = ownCapabilities?.includes(_videoClient.OwnCapability.SCREENSHARE);
  const isScreenSharingEnabledInCall = callSettings?.screensharing.enabled;
  const onScreenShareStartedHandlerRef = (0, _react.useRef)(onScreenShareStartedHandler);
  onScreenShareStartedHandlerRef.current = onScreenShareStartedHandler;
  const onScreenShareStoppedHandlerRef = (0, _react.useRef)(onScreenShareStoppedHandler);
  onScreenShareStoppedHandlerRef.current = onScreenShareStoppedHandler;
  const iosScreenShareStartedFromSystem = (0, _useIsIosScreenshareBroadcastStarted.useIsIosScreenshareBroadcastStarted)();
  const prevIosScreenShareStartedFromSystem = (0, _hooks.usePrevious)(iosScreenShareStartedFromSystem);
  const localParticipant = useLocalParticipant();
  const hasPublishedScreenShare = localParticipant && (0, _videoClient.hasScreenShare)(localParticipant);

  // listens to iOS screen share broadcast started event from the system
  (0, _react.useEffect)(() => {
    if (_reactNative.Platform.OS !== 'ios') {
      return;
    }
    if (iosScreenShareStartedFromSystem && !prevIosScreenShareStartedFromSystem) {
      onScreenShareStartedHandlerRef.current?.();
      call?.screenShare.enable();
    } else if (!iosScreenShareStartedFromSystem && prevIosScreenShareStartedFromSystem) {
      onScreenShareStoppedHandlerRef.current?.();
      call?.screenShare.disable(true);
    }
  }, [call, iosScreenShareStartedFromSystem, prevIosScreenShareStartedFromSystem]);
  const onPress = async () => {
    if (!hasScreenSharingPermissions) {
      const logger = (0, _videoClient.getLogger)(['useScreenShareButton']);
      logger('info', 'User does not have permissions to stream the screen share media, calling onMissingScreenShareStreamPermission handler if present');
      onMissingScreenShareStreamPermission?.();
    }
    if (!hasPublishedScreenShare) {
      if (_reactNative.Platform.OS === 'ios') {
        const reactTag = (0, _reactNative.findNodeHandle)(screenCapturePickerViewiOSRef.current);
        await _reactNative.NativeModules.ScreenCapturePickerViewManager.show(reactTag);
        // After this the iOS screen share broadcast started/stopped event will be triggered
        // and the useEffect listener will handle the rest
      } else {
        try {
          await call?.screenShare.enable();
          onScreenShareStartedHandler?.();
        } catch (error) {
          // ignored.. user didnt allow the screen share in the popup
          const logger = (0, _videoClient.getLogger)(['useScreenShareButton']);
          logger('info', 'User opted to not give permissions to start a screen share stream', error);
        }
      }
    } else if (hasPublishedScreenShare) {
      onScreenShareStoppedHandler?.();
      await call?.screenShare.disable(true);
    }
  };
  if (!isScreenSharingEnabledInCall || !CanDeviceScreenShare) {
    return {
      onPress: undefined,
      hasPublishedScreenShare: false
    };
  }
  return {
    onPress,
    hasPublishedScreenShare
  };
};
exports.useScreenShareButton = useScreenShareButton;
//# sourceMappingURL=useScreenShareButton.js.map