"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setClientDetails = void 0;
var _videoClient = require("@stream-io/video-client");
var _reactNative = require("react-native");
var _version = require("../version");
var _package = _interopRequireDefault(require("@stream-io/react-native-webrtc/package.json"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const [major, minor, patch] = _version.version.split('.');
const setClientDetails = () => {
  (0, _videoClient.setSdkInfo)({
    type: _videoClient.SfuModels.SdkType.REACT_NATIVE,
    major: major,
    minor: minor,
    patch: patch
  });
  let osName = _reactNative.Platform.OS;
  if (_reactNative.Platform.OS === 'ios') {
    // example: "iOS" | "iPadOS"
    osName = _reactNative.Platform.constants.systemName;
  }
  let osVersion = '';
  if (_reactNative.Platform.OS === 'android') {
    // example: "33" - its more OS API level than consumer version
    osVersion = _reactNative.Platform.constants.Version.toString();
  } else if (_reactNative.Platform.OS === 'ios') {
    // example: "16.2"
    osVersion = _reactNative.Platform.constants.osVersion;
  }
  (0, _videoClient.setOSInfo)({
    name: osName,
    version: osVersion,
    architecture: ''
  });
  let deviceName = '';
  if (_reactNative.Platform.OS === 'android') {
    // Example: "Google Pixel 7"
    const prefix = _reactNative.Platform.constants.Manufacturer.toLowerCase() === _reactNative.Platform.constants.Brand.toLowerCase() ? _reactNative.Platform.constants.Manufacturer : `${_reactNative.Platform.constants.Manufacturer} ${_reactNative.Platform.constants.Brand}`;
    deviceName = `${prefix} ${_reactNative.Platform.constants.Model}`;
  } else if (_reactNative.Platform.OS === 'ios') {
    // note: osName check is necessary because Platform.isPad is not reliable
    deviceName = _reactNative.Platform.isPad || osName === 'iPadOS' ? 'iPad' : 'iPhone';
  }
  (0, _videoClient.setDeviceInfo)({
    name: deviceName,
    version: ''
  });
  (0, _videoClient.setWebRTCInfo)({
    version: _package.default.version
  });
};
exports.setClientDetails = setClientDetails;
//# sourceMappingURL=setClientDetails.js.map