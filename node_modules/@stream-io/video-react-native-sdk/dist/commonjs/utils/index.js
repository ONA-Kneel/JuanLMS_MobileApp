"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  generateCallTitle: true,
  generateParticipantTitle: true,
  getInitialsOfName: true
};
exports.getInitialsOfName = exports.generateParticipantTitle = exports.generateCallTitle = void 0;
var _index = require("./push/index");
Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});
var _enterPiPAndroid = require("./enterPiPAndroid");
Object.keys(_enterPiPAndroid).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _enterPiPAndroid[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _enterPiPAndroid[key];
    }
  });
});
var _StreamVideoRN = require("./StreamVideoRN");
Object.keys(_StreamVideoRN).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _StreamVideoRN[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StreamVideoRN[key];
    }
  });
});
// Utility to join strings with commas and 'and'
const generateCallTitle = (memberUserIds, totalMembersToShow) => {
  const supportedAmountOfMemberUserIds = memberUserIds.slice(0, totalMembersToShow);
  if (totalMembersToShow && supportedAmountOfMemberUserIds.length < totalMembersToShow) {
    return supportedAmountOfMemberUserIds.join(' and ');
  }
  const allMembersExceptLast = supportedAmountOfMemberUserIds.slice(0, -1);
  const lastMember = supportedAmountOfMemberUserIds.slice(-1)[0];
  return `${allMembersExceptLast.join(', ')}, and ${lastMember}`;
};

// Utility to truncate long strings
exports.generateCallTitle = generateCallTitle;
const generateParticipantTitle = memberUserId => {
  return memberUserId.length > 15 ? memberUserId.slice(0, 15) + '...' : memberUserId;
};

// Utility to get initials of a name
exports.generateParticipantTitle = generateParticipantTitle;
const getInitialsOfName = name => {
  const names = name.split(' ');
  let initials = names[0].substring(0, 1).toUpperCase();
  if (names.length > 1) {
    initials += names[names.length - 1].substring(0, 1).toUpperCase();
  }
  return initials;
};
exports.getInitialsOfName = getInitialsOfName;
//# sourceMappingURL=index.js.map