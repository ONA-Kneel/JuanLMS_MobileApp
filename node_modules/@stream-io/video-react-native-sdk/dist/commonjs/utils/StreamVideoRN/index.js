"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StreamVideoRN = void 0;
var _pushLogoutCallback = _interopRequireDefault(require("../internal/pushLogoutCallback"));
var _newNotificationCallbacks = _interopRequireDefault(require("../internal/newNotificationCallbacks"));
var _setupIosCallKeepEvents = require("../push/setupIosCallKeepEvents");
var _setupIosVoipPushEvents = require("../push/setupIosVoipPushEvents");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Utility type for deep partial

// Helper function for deep merging
function deepMerge(target, source) {
  const result = {
    ...target
  };
  for (const key in source) {
    if (source[key] !== undefined) {
      if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key]) && typeof target[key] === 'object' && target[key] !== null && !Array.isArray(target[key])) {
        result[key] = deepMerge(target[key], source[key]);
      } else {
        result[key] = source[key];
      }
    }
  }
  return result;
}
const DEFAULT_STREAM_VIDEO_CONFIG = {
  foregroundService: {
    android: {
      channel: {
        id: 'stream_call_foreground_service',
        name: 'To keep calls alive',
        lights: false,
        vibration: false,
        importance: 3
      },
      notificationTexts: {
        title: 'Call in progress',
        body: 'Tap to return to the call'
      },
      taskToRun: () => new Promise(() => {})
    }
  }
};
class StreamVideoRN {
  static config = DEFAULT_STREAM_VIDEO_CONFIG;

  /**
   * Update the global config for StreamVideoRN except for push config.
   * To set push config use `StreamVideoRN.setPushConfig` instead.
   * This function accepts a partial config object that will be deeply merged with the default config.
   */
  static updateConfig(updateConfig) {
    this.config = deepMerge(this.config, updateConfig);
  }
  static updateAndroidIncomingCallChannel(updateChannel) {
    const prevChannel = this.config.push?.android?.incomingCallChannel;
    if (prevChannel) {
      this.config.push.android.incomingCallChannel = {
        ...prevChannel,
        ...updateChannel
      };
    }
  }

  /**
   * Set the push config for StreamVideoRN.
   * This method must be called **outside** of your application lifecycle, e.g. alongside your
   * `AppRegistry.registerComponent()` method call at the entry point of your application code.
   * Since the app can be opened from a dead state through a push notification
   * Note: This function must be called only once. Further calls will be ignored.
   * @example // in index.js
   * import { AppRegistry } from 'react-native';
   * import { StreamVideoRN } from '@stream-io/video-react-native-sdk';
   * import App from './App';
   * // Set push config
   * const pushConfig = {}; // construct your config
   * StreamVideoRN.setPushConfig(pushConfig);
   * AppRegistry.registerComponent('app', () => App);
   */
  static setPushConfig(pushConfig) {
    if (this.config.push) {
      // Ignoring this config as push config was already set
      return;
    }
    if (__DEV__ && (pushConfig.navigateAcceptCall || pushConfig.navigateToIncomingCall)) {
      throw new Error(`Support for navigateAcceptCall or navigateToIncomingCall in pushConfig has been removed.
        Please watch for incoming and outgoing calls in the root component of your app.
        Please see https://getstream.io/video/docs/react-native/advanced/ringing-calls/#watch-for-incoming-and-outgoing-calls for more information.`);
    }
    this.config.push = pushConfig;
    (0, _setupIosCallKeepEvents.setupIosCallKeepEvents)(pushConfig);
    (0, _setupIosVoipPushEvents.setupIosVoipPushEvents)(pushConfig);
  }
  static getConfig() {
    return this.config;
  }

  /**
   * This is the function to be called when the push token must be removed.
   * Typically used on user logout.
   */
  static onPushLogout() {
    if (_pushLogoutCallback.default.current) {
      return Promise.all(_pushLogoutCallback.default.current.map(callback => callback())).then(() => {});
    }
    return Promise.resolve();
  }
  static clearPushLogoutCallbacks() {
    _pushLogoutCallback.default.current = [];
  }

  /**
   * This function is used to add a callback to be called when a new call notification is received.
   * @param callback
   * @returns Unsubscribe function
   */
  static addOnNewCallNotificationListener(callback) {
    if (!_newNotificationCallbacks.default.current) {
      _newNotificationCallbacks.default.current = [callback];
    } else {
      _newNotificationCallbacks.default.current.push(callback);
    }
    return () => {
      _newNotificationCallbacks.default.current = _newNotificationCallbacks.default.current?.filter(cb => cb !== callback);
    };
  }
}
exports.StreamVideoRN = StreamVideoRN;
//# sourceMappingURL=index.js.map