"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initIosNonVoipToken = initIosNonVoipToken;
exports.onPushNotificationiOSStreamVideoEvent = onPushNotificationiOSStreamVideoEvent;
exports.oniOSNotifeeEvent = exports.oniOSExpoNotificationEvent = void 0;
var _reactNative = require("react-native");
var _rxSubjects = require("./internal/rxSubjects");
var _libs = require("./libs");
var _videoClient = require("@stream-io/video-client");
var _pushLogoutCallback = require("../internal/pushLogoutCallback");
var _StreamVideoRN = require("../StreamVideoRN");
let lastApnToken = {
  token: '',
  userId: ''
};
function processNonRingingNotificationStreamPayload(streamPayload) {
  if (streamPayload?.sender === 'stream.video' && streamPayload?.type !== 'call.ring') {
    const cid = streamPayload.call_cid;
    const type = streamPayload.type;
    const logger = (0, _videoClient.getLogger)(['processNonRingingNotificationStreamPayload']);
    logger('trace', `cid, type - ${cid}, ${type}`);
    _rxSubjects.pushNonRingingCallData$.next({
      cid,
      type
    });
    return {
      cid,
      type
    };
  }
  return undefined;
}
const oniOSExpoNotificationEvent = event => {
  const pushConfig = _StreamVideoRN.StreamVideoRN.getConfig().push;
  if (pushConfig) {
    const trigger = event.request.trigger;
    if (trigger && typeof trigger === 'object' && 'type' in trigger && trigger.type === 'push' && trigger.payload?.stream) {
      const streamPayload = trigger.payload.stream;
      const logger = (0, _videoClient.getLogger)(['processNonRingingNotificationStreamPayload']);
      logger('trace', `processNonRingingNotificationStreamPayload - ${JSON.stringify(streamPayload)}`);
      processNonRingingNotificationStreamPayload(streamPayload);
    }
  }
};
exports.oniOSExpoNotificationEvent = oniOSExpoNotificationEvent;
const oniOSNotifeeEvent = ({
  event
}) => {
  if (_reactNative.Platform.OS !== 'ios') return;
  const pushConfig = _StreamVideoRN.StreamVideoRN.getConfig().push;
  const {
    type,
    detail
  } = event;
  const notifeeLib = (0, _libs.getNotifeeLibThrowIfNotInstalledForPush)();
  if (pushConfig && type === notifeeLib.EventType.PRESS) {
    const streamPayload = detail.notification?.data?.stream;
    const result = processNonRingingNotificationStreamPayload(streamPayload);
    if (result) {
      const logger = (0, _videoClient.getLogger)(['oniOSNotifeeEvent']);
      logger('debug', `onTapNonRingingCallNotification?.(${result.cid}, ${result.type})`);
      pushConfig.onTapNonRingingCallNotification?.(result.cid, result.type);
    }
  }
};
exports.oniOSNotifeeEvent = oniOSNotifeeEvent;
function onPushNotificationiOSStreamVideoEvent(notification) {
  const pushNotificationIosLib = (0, _libs.getPushNotificationIosLib)();
  const data = notification.getData();
  const streamPayload = data?.stream;
  const logger = (0, _videoClient.getLogger)(['onPushNotificationiOSStreamVideoEvent']);
  if (!streamPayload) {
    logger('trace', `skipping process: no stream payload found in notification data - ${JSON.stringify(data)}`);
    return;
  }
  const isClicked = data.userInteraction === 1;
  const pushConfig = _StreamVideoRN.StreamVideoRN.getConfig().push;
  if (!isClicked || !pushConfig) {
    logger('debug', `notification.finish called and returning - isClicked: ${isClicked}, pushConfig: ${!!pushConfig}`);
    notification.finish(pushNotificationIosLib.FetchResult.NoData);
    return;
  }
  // listen to foreground notifications
  const result = processNonRingingNotificationStreamPayload(streamPayload);
  if (result) {
    logger('debug', `onTapNonRingingCallNotification?.(${result.cid}, ${result.type})`);
    pushConfig.onTapNonRingingCallNotification?.(result.cid, result.type);
  }
  notification.finish(pushNotificationIosLib.FetchResult.NoData);
}

/** Send token to stream */
async function initIosNonVoipToken(client, pushConfig, setUnsubscribeListener) {
  if (_reactNative.Platform.OS !== 'ios' || !pushConfig.ios.pushProviderName || !pushConfig.onTapNonRingingCallNotification) {
    return;
  }
  const logger = (0, _videoClient.getLogger)(['initIosNonVoipToken']);
  const setDeviceToken = async token => {
    const userId = client.streamClient._user?.id ?? '';
    if (lastApnToken.token === token && lastApnToken.userId === userId) {
      logger('debug', 'Skipped sending device token to stream as it was already sent', token);
      return;
    }
    (0, _pushLogoutCallback.setPushLogoutCallback)(async () => {
      lastApnToken = {
        token: '',
        userId: ''
      };
      try {
        logger('debug', 'Remove device token - setPushLogoutCallback', token);
        await client.removeDevice(token);
      } catch (err) {
        logger('warn', 'setPushLogoutCallback - Failed to remove apn token from stream', err);
      }
    });
    const push_provider_name = pushConfig.ios.pushProviderName;
    logger('debug', 'Add device token to stream', token);
    await client.addDevice(token, 'apn', push_provider_name).then(() => {
      lastApnToken = {
        token,
        userId
      };
    }).catch(err => {
      logger('warn', 'Failed to add apn token to stream', err);
    });
  };
  if (pushConfig.isExpo) {
    const expoNotificationsLib = (0, _libs.getExpoNotificationsLib)();
    if (expoNotificationsLib) {
      expoNotificationsLib.getDevicePushTokenAsync().then(devicePushToken => {
        logger('debug', 'Got device token - expoNotificationsLib.getDevicePushTokenAsync', devicePushToken.data);
        setDeviceToken(devicePushToken.data);
      });
      const subscription = expoNotificationsLib.addPushTokenListener(devicePushToken => {
        logger('debug', 'Got device token - expoNotificationsLib.addPushTokenListener', devicePushToken.data);
        setDeviceToken(devicePushToken.data);
      });
      setUnsubscribeListener(() => {
        logger('debug', `removed expo addPushTokenListener`);
        subscription.remove();
      });
    }
  } else {
    const pushNotificationIosLib = (0, _libs.getPushNotificationIosLib)();
    pushNotificationIosLib.addEventListener('register', token => {
      logger('debug', `Got device token - pushNotificationIosLib.addEventListener('register')`, token);
      setDeviceToken(token);
    });
    setUnsubscribeListener(() => {
      logger('debug', `pushNotificationIosLib.removeEventListener('register')`);
      pushNotificationIosLib.removeEventListener('register');
    });
  }
}
//# sourceMappingURL=ios.js.map