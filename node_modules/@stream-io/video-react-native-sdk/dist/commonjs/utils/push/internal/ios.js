"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onVoipNotificationReceived = void 0;
var _videoClient = require("@stream-io/video-client");
var _reactNative = require("react-native");
var _libs = require("../libs");
var _rxSubjects = require("./rxSubjects");
var _utils = require("./utils");
const onVoipNotificationReceived = async (notification, pushConfig) => {
  /* --- Example payload ---
    {
      "aps": {
        "alert": {
          "body": "",
          "title": "Vishal Narkhede is calling you"
        },
        "badge": 0,
        "category": "stream.video",
        "mutable-content": 1
      },
      "stream": {
        "call_cid": "default:ixbm7y0k74pbjnq",
        "call_display_name": "",
        "created_by_display_name": "Vishal Narkhede",
        "created_by_id": "vishalexpo",
        "receiver_id": "santhoshexpo",
        "sender": "stream.video",
        "type": "call.ring",
        "version": "v2"
      }
    } */
  const sender = notification?.stream?.sender;
  const type = notification?.stream?.type;
  // do not process any other notifications other than stream.video or ringing
  if (sender !== 'stream.video' && type !== 'call.ring') {
    return;
  }
  const call_cid = notification?.stream?.call_cid;
  if (!call_cid || _reactNative.Platform.OS !== 'ios' || !pushConfig.ios.pushProviderName) {
    return;
  }
  const logger = (0, _videoClient.getLogger)(['setupIosVoipPushEvents']);
  const client = await pushConfig.createStreamVideoClient();
  if (!client) {
    logger('debug', 'client not found, not processing call.ring voip push notification');
    return;
  }
  const callFromPush = await client.onRingingCall(call_cid);
  let uuid = '';
  try {
    uuid = await _reactNative.NativeModules?.StreamVideoReactNative?.getIncomingCallUUid(call_cid);
  } catch (error) {
    logger('error', 'Error in getting call uuid from native module', error);
  }
  if (!uuid) {
    logger('error', `Not processing call.ring push notification, as no uuid found for call_cid: ${call_cid}`);
    return;
  }
  const created_by_id = notification?.stream?.created_by_id;
  const receiver_id = notification?.stream?.receiver_id;
  function closeCallIfNecessary() {
    const {
      mustEndCall,
      callkeepReason
    } = (0, _utils.shouldCallBeEnded)(callFromPush, created_by_id, receiver_id);
    if (mustEndCall) {
      const callkeep = (0, _libs.getCallKeepLib)();
      logger('debug', `callkeep.reportEndCallWithUUID for uuid: ${uuid}, call_cid: ${call_cid}, reason: ${callkeepReason}`);
      callkeep.reportEndCallWithUUID(uuid, callkeepReason);
      const voipPushNotification = (0, _libs.getVoipPushNotificationLib)();
      voipPushNotification.onVoipNotificationCompleted(uuid);
      return true;
    }
    return false;
  }
  const closed = closeCallIfNecessary();
  const canListenToWS = () => _utils.canAddPushWSSubscriptionsRef.current && _reactNative.AppState.currentState !== 'active';
  if (!closed && canListenToWS()) {
    const unsubscribe = callFromPush.on('all', event => {
      const _canListenToWS = canListenToWS();
      if (!_canListenToWS) {
        logger('debug', `unsubscribe due to event callCid: ${call_cid} canListenToWS: ${_canListenToWS}`, event);
        unsubscribe();
        return;
      }
      const _closed = closeCallIfNecessary();
      if (_closed) {
        logger('debug', `unsubscribe due to event callCid: ${call_cid} canListenToWS: ${_canListenToWS} shouldCallBeClosed: ${_closed}`, event);
        unsubscribe();
      }
    });
    const unsubscriptionCallbacks = _videoClient.RxUtils.getCurrentValue(_rxSubjects.pushUnsubscriptionCallbacks$) ?? [];
    _rxSubjects.pushUnsubscriptionCallbacks$.next([...unsubscriptionCallbacks, unsubscribe]);
  }
  // send the info to this subject, it is listened by callkeep events
  // callkeep events will then accept/reject the call
  logger('debug', `call_cid:${call_cid} uuid:${uuid} received and processed from call.ring push notification`);
  _rxSubjects.voipPushNotificationCallCId$.next(call_cid);
};
exports.onVoipNotificationReceived = onVoipNotificationReceived;
//# sourceMappingURL=ios.js.map