"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupIosVoipPushEvents = setupIosVoipPushEvents;
var _libs = require("./libs");
var _reactNative = require("react-native");
var _ios = require("./internal/ios");
var _pushLogoutCallback = require("../internal/pushLogoutCallback");
var _videoClient = require("@stream-io/video-client");
function setupIosVoipPushEvents(pushConfig) {
  if (_reactNative.Platform.OS !== 'ios' || !pushConfig.ios?.pushProviderName) {
    return;
  }
  const logger = (0, _videoClient.getLogger)(['setupIosVoipPushEvents']);
  if (!pushConfig.android.incomingCallChannel) {
    // TODO: remove this check and find a better way once we have telecom integration for android
    logger('debug', 'android incomingCallChannel is not defined, so skipping the setupIosVoipPushEvents');
    return;
  }
  const voipPushNotification = (0, _libs.getVoipPushNotificationLib)();
  logger('debug', 'notification event listener added');
  voipPushNotification.addEventListener('notification', notification => {
    (0, _ios.onVoipNotificationReceived)(notification, pushConfig);
  });
  (0, _pushLogoutCallback.setPushLogoutCallback)(async () => {
    (0, _videoClient.getLogger)(['setPushLogoutCallback'])('debug', 'notification event listener removed');
    voipPushNotification.removeEventListener('notification');
  });
}
//# sourceMappingURL=setupIosVoipPushEvents.js.map