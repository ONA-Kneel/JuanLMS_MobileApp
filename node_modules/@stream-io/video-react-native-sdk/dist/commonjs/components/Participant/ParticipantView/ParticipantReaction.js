"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParticipantReaction = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _constants = require("../../../constants");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the ParticipantReaction component.
 */

/**
 * This component is used to display the current participant reaction.
 */
const ParticipantReaction = ({
  participant,
  supportedReactions = _constants.defaultEmojiReactions,
  hideAfterTimeoutInMs = 5500
}) => {
  const {
    reaction,
    sessionId
  } = participant;
  const call = (0, _videoReactBindings.useCall)();
  const styles = useStyles();
  const {
    theme: {
      typefaces,
      participantReaction
    }
  } = (0, _ThemeContext.useTheme)();
  (0, _react.useEffect)(() => {
    let timeoutId;
    if (call) {
      timeoutId = setTimeout(() => {
        call.resetReaction(sessionId);
      }, hideAfterTimeoutInMs);
    }
    return () => {
      clearTimeout(timeoutId);
    };
  }, [call, hideAfterTimeoutInMs, sessionId, reaction]);
  const currentReaction = reaction && supportedReactions.find(supportedReaction => supportedReaction.emoji_code === reaction.emoji_code);
  return currentReaction?.icon != null && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, participantReaction.container]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.reaction
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [participantReaction.reaction, typefaces.heading6]
  }, currentReaction?.icon)));
};
exports.ParticipantReaction = ParticipantReaction;
const useStyles = () => {
  const {
    theme
  } = (0, _ThemeContext.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      zIndex: _constants.Z_INDEX.IN_FRONT
    },
    reaction: {
      borderRadius: theme.variants.borderRadiusSizes.sm,
      backgroundColor: theme.colors.sheetOverlay,
      alignSelf: 'flex-end',
      marginRight: theme.variants.spacingSizes.md,
      marginTop: theme.variants.spacingSizes.md,
      height: theme.variants.roundButtonSizes.md,
      width: theme.variants.roundButtonSizes.md,
      alignItems: 'center',
      justifyContent: 'center'
    }
  }), [theme]);
};
//# sourceMappingURL=ParticipantReaction.js.map