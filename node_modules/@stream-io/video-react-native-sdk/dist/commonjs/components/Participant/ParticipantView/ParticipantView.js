"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParticipantView = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ParticipantNetworkQualityIndicator = require("./ParticipantNetworkQualityIndicator");
var _ParticipantReaction = require("./ParticipantReaction");
var _ParticipantLabel = require("./ParticipantLabel");
var _ParticipantVideoFallback = require("./ParticipantVideoFallback");
var _VideoRenderer = require("./VideoRenderer");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props to be passed for the Participant component.
 */

/**
 * A component that renders the participants' video track or screenShare track
 * and additional info. By an absence of a video track or when isVisible is truthy,
 * only an avatar and audio track will be rendered.
 */
const ParticipantView = ({
  participant,
  trackType = 'videoTrack',
  isVisible = true,
  style,
  ParticipantLabel = _ParticipantLabel.ParticipantLabel,
  ParticipantReaction = _ParticipantReaction.ParticipantReaction,
  VideoRenderer = _VideoRenderer.VideoRenderer,
  ParticipantNetworkQualityIndicator = _ParticipantNetworkQualityIndicator.ParticipantNetworkQualityIndicator,
  ParticipantVideoFallback = _ParticipantVideoFallback.ParticipantVideoFallback,
  objectFit,
  videoZOrder = 0,
  supportedReactions
}) => {
  const {
    theme: {
      colors,
      participantView
    }
  } = (0, _ThemeContext.useTheme)();
  const {
    isSpeaking,
    userId
  } = participant;
  const styles = useStyles();
  const isScreenSharing = trackType === 'screenShareTrack';
  const applySpeakerStyle = isSpeaking && !isScreenSharing;
  const speakerStyle = applySpeakerStyle && [{
    borderColor: colors.buttonPrimary
  }, participantView.highlightedContainer];
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, style, speakerStyle],
    testID: isSpeaking ? `participant-${userId}-is-speaking` : `participant-${userId}-is-not-speaking`
  }, ParticipantReaction && /*#__PURE__*/_react.default.createElement(ParticipantReaction, {
    participant: participant,
    supportedReactions: supportedReactions
  }), VideoRenderer && /*#__PURE__*/_react.default.createElement(VideoRenderer, {
    isVisible: isVisible,
    participant: participant,
    trackType: trackType,
    ParticipantVideoFallback: ParticipantVideoFallback,
    objectFit: objectFit,
    videoZOrder: videoZOrder
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.footerContainer, participantView.footerContainer, !ParticipantLabel && styles.networkIndicatorOnly]
  }, ParticipantLabel && /*#__PURE__*/_react.default.createElement(ParticipantLabel, {
    participant: participant,
    trackType: trackType
  }), ParticipantNetworkQualityIndicator && /*#__PURE__*/_react.default.createElement(ParticipantNetworkQualityIndicator, {
    participant: participant
  })));
};
exports.ParticipantView = ParticipantView;
const useStyles = () => {
  const {
    theme
  } = (0, _ThemeContext.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      overflow: 'hidden',
      justifyContent: 'flex-end',
      borderRadius: theme.variants.borderRadiusSizes.md,
      borderWidth: 2,
      borderColor: 'transparent'
    },
    footerContainer: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    networkIndicatorOnly: {
      justifyContent: 'flex-end'
    }
  }), [theme]);
};
//# sourceMappingURL=ParticipantView.js.map