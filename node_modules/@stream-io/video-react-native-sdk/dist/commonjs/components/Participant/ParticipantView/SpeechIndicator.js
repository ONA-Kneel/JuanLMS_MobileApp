"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SpeechIndicator = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the SpeechIndicator component.
 */

/**
 * The SpeechIndicator component displays animated bars to indicate speech activity.
 * The bars animate when `isSpeaking` is true, mimicking a sound meter.
 */
const SpeechIndicator = ({
  isSpeaking
}) => {
  const styles = useStyles();
  const [animationValues] = (0, _react.useState)(() => [new _reactNative.Animated.Value(0.6), new _reactNative.Animated.Value(0.6), new _reactNative.Animated.Value(0.6)]);
  (0, _react.useEffect)(() => {
    if (isSpeaking) {
      animationValues.forEach((animatedValue, index) => {
        _reactNative.Animated.loop(_reactNative.Animated.sequence([_reactNative.Animated.timing(animatedValue, {
          toValue: index % 2 === 0 ? 0.3 : 1.1,
          duration: (index + 1) * 300,
          useNativeDriver: true
        }), _reactNative.Animated.timing(animatedValue, {
          toValue: 0.6,
          duration: (index + 1) * 300,
          useNativeDriver: true
        })])).start();
      });
    } else {
      animationValues.forEach(animatedValue => {
        animatedValue.setValue(0.3); // Set a smaller value for a reduced default height
      });
    }
  }, [isSpeaking, animationValues]);
  const barStyle = animatedValue => ({
    transform: [{
      scaleY: animatedValue
    }]
  });
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container]
  }, animationValues.map((animatedValue, index) => /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    key: index,
    style: [styles.bar, isSpeaking ? barStyle(animatedValue) : styles.smallBar // Apply smaller bar style when not speaking
    ]
  })));
};
exports.SpeechIndicator = SpeechIndicator;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      height: theme.variants.roundButtonSizes.sm,
      width: theme.variants.roundButtonSizes.sm,
      borderRadius: 5,
      gap: 1,
      backgroundColor: theme.colors.sheetOverlay,
      padding: 5
    },
    smallBar: {
      height: '30%' // Smaller default height when animation is not running
    },
    bar: {
      width: 3,
      height: '100%',
      backgroundColor: theme.colors.iconSecondary,
      borderRadius: 2
    }
  }), [theme]);
};
var _default = exports.default = SpeechIndicator;
//# sourceMappingURL=SpeechIndicator.js.map