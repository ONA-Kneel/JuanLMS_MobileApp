"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParticipantLabel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _icons = require("../../../icons");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _TestIds = require("../../../constants/TestIds");
var _constants = require("../../../constants");
var _videoClient = require("@stream-io/video-client");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _SpeechIndicator = _interopRequireDefault(require("./SpeechIndicator"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the ParticipantLabel component.
 */

/**
 * This component is used to display the participant label that contains the participant name, video/audio mute/unmute status.
 */
const ParticipantLabel = ({
  participant,
  trackType
}) => {
  const {
    theme: {
      colors,
      typefaces,
      variants: {
        iconSizes
      },
      participantLabel: {
        container,
        userNameLabel,
        audioMutedIconContainer,
        videoMutedIconContainer,
        pinIconContainer,
        screenShareIconContainer
      }
    }
  } = (0, _ThemeContext.useTheme)();
  const styles = useStyles();
  const {
    name,
    userId,
    pin,
    sessionId,
    isLocalParticipant
  } = participant;
  const call = (0, _videoReactBindings.useCall)();
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  const participantName = name ?? userId;
  const participantLabel = isLocalParticipant ? t('You') : participantName;
  const isPinningEnabled = pin?.isLocalPin;
  const isAudioMuted = !(0, _videoClient.hasAudio)(participant);
  const isVideoMuted = !(0, _videoClient.hasVideo)(participant);
  const isTrackPaused = trackType && (0, _videoClient.hasPausedTrack)(participant, trackType);
  const unPinParticipantHandler = () => {
    call?.unpin(sessionId);
  };
  if (trackType === 'screenShareTrack') {
    const screenShareText = isLocalParticipant ? t('You are sharing your screen') : t('{{ userName }} is sharing their screen', {
      userName: participantName
    });
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.container, {
        backgroundColor: colors.sheetOverlay
      }, container],
      testID: _TestIds.ComponentTestIds.PARTICIPANT_SCREEN_SHARING
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.screenShareIconContainer, {
        height: iconSizes.md,
        width: iconSizes.md
      }, screenShareIconContainer]
    }, /*#__PURE__*/_react.default.createElement(_icons.ScreenShareIndicator, {
      color: colors.iconPrimary
    })), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: [styles.userNameLabel, {
        color: colors.textPrimary
      }, typefaces.caption, userNameLabel],
      numberOfLines: 1
    }, screenShareText));
  }
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: colors.sheetOverlay
    }, container]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.wrapper
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.userNameLabel, userNameLabel],
    numberOfLines: 1
  }, participantLabel), isAudioMuted && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.audioMutedIconContainer, audioMutedIconContainer]
  }, /*#__PURE__*/_react.default.createElement(_icons.MicOff, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), isVideoMuted && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.videoMutedIconContainer, videoMutedIconContainer]
  }, /*#__PURE__*/_react.default.createElement(_icons.VideoSlash, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), isTrackPaused && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.trackPausedIconContainer, videoMutedIconContainer]
  }, /*#__PURE__*/_react.default.createElement(_icons.BadNetwork, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), isPinningEnabled && /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    style: [styles.pinIconContainer, pinIconContainer],
    onPress: unPinParticipantHandler
  }, /*#__PURE__*/_react.default.createElement(_icons.PinVertical, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.indicatorWrapper
  }, /*#__PURE__*/_react.default.createElement(_SpeechIndicator.default, {
    isSpeaking: !isAudioMuted && participant.isDominantSpeaker
  }))));
};
exports.ParticipantLabel = ParticipantLabel;
const useStyles = () => {
  const {
    theme
  } = (0, _ThemeContext.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    indicatorWrapper: {
      marginLeft: theme.variants.spacingSizes.sm
    },
    wrapper: {
      flexDirection: 'row'
    },
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: theme.variants.spacingSizes.sm,
      maxHeight: 30,
      borderTopRightRadius: 5,
      marginBottom: -2,
      flexShrink: 1,
      zIndex: _constants.Z_INDEX.IN_FRONT
    },
    userNameLabel: {
      flexShrink: 1,
      marginTop: 3,
      fontSize: 13,
      fontWeight: '400',
      color: theme.colors.textPrimary
    },
    screenShareIconContainer: {
      marginRight: theme.variants.spacingSizes.sm,
      justifyContent: 'center'
    },
    audioMutedIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    },
    videoMutedIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    },
    trackPausedIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    },
    pinIconContainer: {
      marginLeft: theme.variants.spacingSizes.xs,
      justifyContent: 'center'
    }
  }), [theme]);
};
//# sourceMappingURL=ParticipantLabel.js.map