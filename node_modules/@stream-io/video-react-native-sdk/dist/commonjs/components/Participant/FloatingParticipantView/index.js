"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FloatingParticipantView = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _constants = require("../../../constants");
var _TestIds = require("../../../constants/TestIds");
var _icons = require("../../../icons");
var _FloatingView = _interopRequireDefault(require("./FloatingView"));
var _common = require("./FloatingView/common");
var _ParticipantView = require("../ParticipantView");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
/**
 * Props to be passed for the LocalVideoView component.
 */

const DefaultLocalParticipantViewVideoFallback = () => {
  const {
    theme: {
      colors,
      floatingParticipantsView,
      variants: {
        iconSizes
      },
      defaults
    }
  } = (0, _ThemeContext.useTheme)();
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.videoFallback, {
      backgroundColor: colors.sheetSecondary
    }, floatingParticipantsView.videoFallback]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      height: iconSizes.md,
      width: iconSizes.md
    }
  }, /*#__PURE__*/_react.default.createElement(_icons.VideoSlash, {
    color: colors.iconPrimary,
    size: defaults.iconSize
  })));
};

/**
 * A component to render the floating participant's video.
 */
const FloatingParticipantView = ({
  alignment = 'top-right',
  onPressHandler,
  participant,
  participantViewStyle,
  draggableContainerStyle,
  ParticipantView = _ParticipantView.ParticipantView,
  ParticipantNetworkQualityIndicator,
  ParticipantVideoFallback = DefaultLocalParticipantViewVideoFallback,
  ParticipantReaction,
  VideoRenderer,
  supportedReactions,
  videoZOrder = 1,
  objectFit
}) => {
  const {
    theme: {
      colors,
      floatingParticipantsView
    }
  } = (0, _ThemeContext.useTheme)();
  const floatingAlignmentMap = {
    'top-left': _common.FloatingViewAlignment.topLeft,
    'top-right': _common.FloatingViewAlignment.topRight,
    'bottom-left': _common.FloatingViewAlignment.bottomLeft,
    'bottom-right': _common.FloatingViewAlignment.bottomRight
  };
  const [containerDimensions, setContainerDimensions] = _react.default.useState();
  const participantViewProps = {
    ParticipantLabel: null,
    ParticipantNetworkQualityIndicator,
    ParticipantReaction,
    ParticipantVideoFallback,
    VideoRenderer
  };
  if (!participant) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    testID: _TestIds.ComponentTestIds.LOCAL_PARTICIPANT,
    style: [styles.container, draggableContainerStyle, floatingParticipantsView.container]
    // "box-none" disallows the container view to be not take up touches
    // and allows only the floating view (its child view) to take up the touches
    ,
    pointerEvents: "box-none",
    onLayout: event => {
      const {
        width,
        height
      } = event.nativeEvent.layout;
      setContainerDimensions(prev => {
        if (prev && prev.width === width && prev.height === height) {
          return prev;
        }
        return {
          width: width,
          height: height
        };
      });
    }
  }, containerDimensions && /*#__PURE__*/_react.default.createElement(_FloatingView.default, {
    containerHeight: containerDimensions.height,
    containerWidth: containerDimensions.width,
    initialAlignment: floatingAlignmentMap[alignment]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    onPress: onPressHandler
  }, ParticipantView && /*#__PURE__*/_react.default.createElement(ParticipantView, _extends({
    participant: participant,
    trackType: "videoTrack",
    style: [styles.participantViewContainer, participantViewStyle, {
      shadowColor: colors.sheetPrimary
    }, floatingParticipantsView.participantViewContainer]
    // video z order must be one above the one used in grid view
    // (which uses the default: 0)
    ,
    videoZOrder: videoZOrder,
    objectFit: objectFit,
    supportedReactions: supportedReactions
  }, participantViewProps)))));
};
exports.FloatingParticipantView = FloatingParticipantView;
const styles = _reactNative.StyleSheet.create({
  container: {
    // Needed to make the view on top and draggable
    zIndex: _constants.Z_INDEX.IN_MIDDLE,
    flex: 1
  },
  participantViewContainer: {
    height: _constants.FLOATING_VIDEO_VIEW_STYLE.height,
    width: _constants.FLOATING_VIDEO_VIEW_STYLE.width,
    borderRadius: _constants.FLOATING_VIDEO_VIEW_STYLE.borderRadius,
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62,
    elevation: 4
  },
  videoFallback: {
    ..._reactNative.StyleSheet.absoluteFillObject,
    alignItems: 'center',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=index.js.map