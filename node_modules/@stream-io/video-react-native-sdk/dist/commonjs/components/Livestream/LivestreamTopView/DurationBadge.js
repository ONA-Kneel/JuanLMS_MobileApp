"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DurationBadge = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
var _videoReactBindings = require("@stream-io/video-react-bindings");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the HostDurationBadge component.
 */

/**
 * The HostDurationBadge component displays the duration while the live stream is active.
 */
const DurationBadge = ({
  mode
}) => {
  const styles = useStyles();
  const {
    useCallSession
  } = (0, _videoReactBindings.useCallStateHooks)();
  const session = useCallSession();
  const [duration, setDuration] = (0, _react.useState)(() => {
    if (!session || !session.live_started_at) {
      return 0;
    }
    const liveStartTime = new Date(session.live_started_at);
    const now = new Date();
    return Math.floor((now.getTime() - liveStartTime.getTime()) / 1000);
  });
  const call = (0, _videoReactBindings.useCall)();
  const {
    theme: {
      colors,
      durationBadge
    }
  } = (0, _contexts.useTheme)();

  // for host
  (0, _react.useEffect)(() => {
    if (mode !== 'host') {
      return;
    }
    let intervalId;
    const handleLiveStarted = () => {
      intervalId = setInterval(() => {
        setDuration(d => d + 1);
      }, 1000);
    };
    const handleLiveEnded = event => {
      const callDetails = event.call.session;
      if (callDetails?.live_ended_at !== null) {
        clearInterval(intervalId);
      }
    };
    const callLiveStartedUnsubscribe = call?.on('call.live_started', handleLiveStarted);
    const callUpdatedUnsubscribe = call?.on('call.updated', handleLiveEnded);
    return () => {
      if (mode !== 'host') {
        return;
      }
      if (callLiveStartedUnsubscribe && callUpdatedUnsubscribe) {
        callLiveStartedUnsubscribe();
        callUpdatedUnsubscribe();
      }
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [call, mode]);

  // for viewer
  (0, _react.useEffect)(() => {
    if (mode !== 'viewer') {
      return;
    }
    let intervalId;
    const handleLiveStarted = () => {
      intervalId = setInterval(() => {
        setDuration(d => d + 1);
      }, 1000);
    };
    handleLiveStarted();
    return () => {
      if (mode !== 'viewer') {
        return;
      }
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [mode]);
  const formatDuration = durationInMs => {
    const days = Math.floor(durationInMs / 86400);
    const hours = Math.floor(durationInMs / 3600);
    const minutes = Math.floor(durationInMs % 3600 / 60);
    const seconds = durationInMs % 60;
    return `${days ? days + ' ' : ''}${hours ? hours + ':' : ''}${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: colors.sheetTertiary
    }, durationBadge.container]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.dot, durationBadge.icon]
  }), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.label, {
      color: colors.textPrimary
    }, durationBadge.label]
  }, formatDuration(duration)));
};
exports.DurationBadge = DurationBadge;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      paddingHorizontal: theme.variants.spacingSizes.sm,
      paddingVertical: theme.variants.spacingSizes.sm,
      borderRadius: theme.variants.borderRadiusSizes.sm,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    },
    dot: {
      backgroundColor: theme.colors.iconWarning,
      marginRight: theme.variants.spacingSizes.xs,
      borderRadius: 90,
      height: 10,
      width: 10
    },
    label: {
      textAlign: 'center',
      fontSize: theme.variants.fontSizes.md,
      fontWeight: '600',
      flexShrink: 1,
      paddingLeft: theme.variants.spacingSizes.xs
    }
  }), [theme]);
};
//# sourceMappingURL=DurationBadge.js.map