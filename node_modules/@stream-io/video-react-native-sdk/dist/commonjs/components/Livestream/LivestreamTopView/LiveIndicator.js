"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LiveIndicator = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
var _videoReactBindings = require("@stream-io/video-react-bindings");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the LiveIndicator component.
 */

/**
 * The LiveIndicator component displays whether the live stream is live or not.
 */
const LiveIndicator = ({}) => {
  const styles = useStyles();
  const {
    theme: {
      colors,
      typefaces,
      liveIndicator
    }
  } = (0, _contexts.useTheme)();
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: colors.buttonPrimary
    }, liveIndicator.container]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.label, {
      color: colors.textPrimary
    }, typefaces.subtitleBold, liveIndicator.label]
  }, t('Live')));
};
exports.LiveIndicator = LiveIndicator;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      paddingHorizontal: theme.variants.spacingSizes.sm,
      paddingVertical: theme.variants.spacingSizes.sm,
      borderTopLeftRadius: theme.variants.borderRadiusSizes.sm,
      borderBottomLeftRadius: theme.variants.borderRadiusSizes.sm,
      justifyContent: 'center'
    },
    label: {
      textAlign: 'center',
      includeFontPadding: false
    }
  }), [theme]);
};
//# sourceMappingURL=LiveIndicator.js.map