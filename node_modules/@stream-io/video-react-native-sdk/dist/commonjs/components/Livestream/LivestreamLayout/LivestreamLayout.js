"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LivestreamLayout = void 0;
var _react = _interopRequireWildcard(require("react"));
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _reactNative = require("react-native");
var _usePaginatedLayoutSortPreset = require("../../../hooks/usePaginatedLayoutSortPreset");
var _contexts = require("../../../contexts");
var _Participant = require("../../Participant");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the LivestreamLayout component.
 */

/**
 * The LivestreamLayout component presents the live stream video layout.
 */
const LivestreamLayout = ({
  landscape,
  VideoRenderer = _Participant.VideoRenderer,
  ScreenShareOverlay
}) => {
  const {
    useParticipants,
    useHasOngoingScreenShare
  } = (0, _videoReactBindings.useCallStateHooks)();
  const call = (0, _videoReactBindings.useCall)();
  const {
    theme: {
      colors,
      livestreamLayout
    }
  } = (0, _contexts.useTheme)();
  const participants = useParticipants();
  const [currentSpeaker] = participants;
  const hasOngoingScreenShare = useHasOngoingScreenShare();
  const presenter = hasOngoingScreenShare ? participants.find(_videoClient.hasScreenShare) : undefined;
  (0, _usePaginatedLayoutSortPreset.usePaginatedLayoutSortPreset)(call);
  const [objectFit, setObjectFit] = (0, _react.useState)();

  // no need to pass object fit for local participant as the dimensions are for remote tracks
  const objectFitToBeSet = currentSpeaker?.isLocalParticipant ? undefined : objectFit;
  const onDimensionsChange = (0, _react.useCallback)(d => {
    if (d) {
      const isWidthWide = d.width > d.height;
      setObjectFit(isWidthWide ? 'contain' : 'cover');
    }
  }, []);
  const landScapeStyles = {
    flexDirection: landscape ? 'row' : 'column'
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, landScapeStyles, {
      backgroundColor: colors.sheetPrimary
    }, livestreamLayout.container]
  }, /*#__PURE__*/_react.default.createElement(RemoteVideoTrackDimensionsRenderLessComponent, {
    onDimensionsChange: onDimensionsChange
  }), VideoRenderer && hasOngoingScreenShare && presenter && (presenter.isLocalParticipant && ScreenShareOverlay ? /*#__PURE__*/_react.default.createElement(ScreenShareOverlay, null) : /*#__PURE__*/_react.default.createElement(VideoRenderer, {
    trackType: "screenShareTrack",
    participant: presenter
  })), VideoRenderer && !hasOngoingScreenShare && currentSpeaker && /*#__PURE__*/_react.default.createElement(VideoRenderer, {
    participant: currentSpeaker,
    objectFit: objectFitToBeSet,
    trackType: "videoTrack"
  }));
};
exports.LivestreamLayout = LivestreamLayout;
const RemoteVideoTrackDimensionsRenderLessComponent = ({
  onDimensionsChange
}) => {
  const [dimension, setDimension] = (0, _react.useState)();
  const {
    useCallStatsReport
  } = (0, _videoReactBindings.useCallStateHooks)();
  const statsReport = useCallStatsReport();
  const highestFrameHeight = statsReport?.subscriberStats?.highestFrameHeight;
  const highestFrameWidth = statsReport?.subscriberStats?.highestFrameWidth;
  (0, _react.useEffect)(() => {
    if (highestFrameHeight && highestFrameWidth) {
      setDimension({
        height: highestFrameHeight,
        width: highestFrameWidth
      });
    }
  }, [highestFrameHeight, highestFrameWidth]);
  (0, _react.useEffect)(() => {
    onDimensionsChange(dimension);
  }, [dimension, onDimensionsChange]);
  return null;
};
const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=LivestreamLayout.js.map