"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewerLobby = void 0;
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
var _videoClient = require("@stream-io/video-client");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const ViewerLobby = ({
  isLive
}) => {
  const styles = useStyles();
  const {
    theme
  } = (0, _contexts.useTheme)();
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  const {
    useCallStartsAt,
    useParticipants,
    useCallCallingState
  } = (0, _videoReactBindings.useCallStateHooks)();
  const callingState = useCallCallingState();
  const call = (0, _videoReactBindings.useCall)();
  const startsAt = useCallStartsAt();
  const [error, setError] = (0, _react.useState)(undefined);
  const [countdown, setCountdown] = _react.default.useState(getCountdown(startsAt));
  const participants = useParticipants();
  (0, _react.useEffect)(() => {
    if (!startsAt || isLive) return;
    const updateCountdown = () => {
      const timeRemaining = Math.max(0, startsAt.getTime() - Date.now());
      if (timeRemaining <= 0) {
        setCountdown('0:00');
        clearInterval(intervalId);
        return;
      }
      setCountdown(getCountdown(startsAt));
    };
    updateCountdown();
    const intervalId = setInterval(updateCountdown, 1000);
    return () => clearInterval(intervalId);
  }, [startsAt, isLive]);

  /**
   * Getting the call details is done through `call.get()`.
   * It is essential so that the call is watched and any changes in the call is intercepted.
   */
  (0, _react.useEffect)(() => {
    const getCall = async () => {
      if (!call) {
        return;
      }
      try {
        await call.get();
      } catch (err) {
        if (err instanceof Error) {
          const logger = (0, _videoClient.getLogger)(['ViewerLobby']);
          logger('error', 'Error getting call:', err);
          setError(err);
        }
      }
    };
    getCall();
  }, [call]);
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.container
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: styles.text
    }, "Error joining the livestream. Please try again later."));
  }
  const isJoiningLiveCall = callingState === _videoClient.CallingState.JOINING;
  if (isJoiningLiveCall) {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.container
    }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, {
      size: "large",
      color: theme.colors.textPrimary
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.text
  }, isLive ? t('Livestream is still in progress') : startsAt ? t('Livestream will start in:') : t('Livestream will start soon')), startsAt && !isLive && /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.countdownText
  }, countdown), !isLive && participants.length > 0 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.participantsText
  }, `${participants.length} ${t('participants have joined early')}`)), isLive && /*#__PURE__*/_react.default.createElement(_reactNative.Button, {
    title: t('Join Livestream'),
    onPress: () => call?.join()
  }));
};
exports.ViewerLobby = ViewerLobby;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: theme.colors.sheetPrimary,
      padding: theme.variants.spacingSizes.lg
    },
    text: {
      color: theme.colors.textPrimary,
      fontSize: theme.variants.fontSizes.lg,
      margin: theme.variants.spacingSizes.md,
      textAlign: 'center'
    },
    countdownText: {
      color: theme.colors.textPrimary,
      fontSize: theme.variants.fontSizes.xl,
      fontWeight: 'bold',
      marginBottom: theme.variants.spacingSizes.md,
      textAlign: 'center'
    },
    participantsText: {
      color: theme.colors.textSecondary,
      fontSize: theme.variants.fontSizes.md,
      marginBottom: theme.variants.spacingSizes.sm
    }
  }), [theme]);
};
const getCountdown = startsAt => {
  if (!startsAt) {
    return '';
  }
  const now = Date.now();
  const timeRemaining = Math.max(0, startsAt.getTime() - now);
  const minutes = Math.floor(timeRemaining / (1000 * 60));
  const seconds = Math.floor(timeRemaining % (1000 * 60) / 1000);
  return `${minutes}:${seconds.toString().padStart(2, '0')}`;
};
//# sourceMappingURL=ViewerLobby.js.map