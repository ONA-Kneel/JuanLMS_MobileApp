"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewerLivestream = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeIncallManager = _interopRequireDefault(require("react-native-incall-manager"));
var _contexts = require("../../../contexts");
var _ViewerLivestreamControls = require("../LivestreamControls/ViewerLivestreamControls");
var _LivestreamLayout = require("../LivestreamLayout");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _Participant = require("../../Participant");
var _videoClient = require("@stream-io/video-client");
var _LivestreamEnded = require("../LivestreamPlayer/LivestreamEnded");
var _ViewerLobby = require("./ViewerLobby");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the ViewerLivestream component.
 */

/**
 * The ViewerLivestream component renders the UI for the Viewer's live stream.
 */
const ViewerLivestream = ({
  ViewerLivestreamTopView,
  ViewerLivestreamControls = _ViewerLivestreamControls.ViewerLivestreamControls,
  LivestreamLayout = _LivestreamLayout.LivestreamLayout,
  FloatingParticipantView = _Participant.FloatingParticipantView,
  LiveIndicator,
  FollowerCount,
  DurationBadge,
  ViewerLeaveStreamButton,
  onLeaveStreamHandler,
  joinBehavior
}) => {
  const styles = useStyles();
  const call = (0, _videoReactBindings.useCall)();
  const {
    theme: {
      viewerLivestream
    }
  } = (0, _contexts.useTheme)();
  const {
    useHasOngoingScreenShare,
    useParticipants,
    useCallCallingState,
    useCallEndedAt,
    useIsCallLive,
    useOwnCapabilities
  } = (0, _videoReactBindings.useCallStateHooks)();
  const canJoinLive = useIsCallLive();
  const callingState = useCallCallingState();
  const endedAt = useCallEndedAt();
  const hasOngoingScreenShare = useHasOngoingScreenShare();
  const [currentSpeaker] = useParticipants();
  const floatingParticipant = hasOngoingScreenShare && currentSpeaker && (0, _videoClient.hasVideo)(currentSpeaker) && currentSpeaker;
  const [hasLeft, setHasLeft] = (0, _react.useState)(false);
  const canJoinEarly = useCanJoinEarly();
  const canJoinBackstage = useOwnCapabilities()?.includes('join-backstage') ?? false;
  const [topViewHeight, setTopViewHeight] = _react.default.useState();
  const [controlsHeight, setControlsHeight] = _react.default.useState();

  // Automatically route audio to speaker devices as relevant for watching videos.
  (0, _react.useEffect)(() => {
    _reactNativeIncallManager.default.start({
      media: 'video'
    });
    return () => _reactNativeIncallManager.default.stop();
  }, []);
  (0, _react.useEffect)(() => {
    if (callingState === _videoClient.CallingState.LEFT) {
      setHasLeft(true);
    }
  }, [callingState]);
  const topViewProps = {
    LiveIndicator,
    FollowerCount,
    DurationBadge,
    onLayout: event => {
      setTopViewHeight(event.nativeEvent.layout.height);
    }
  };
  (0, _react.useEffect)(() => {
    const handleJoinCall = async () => {
      try {
        await call?.join();
      } catch (error) {
        console.error('Failed to join call', error);
      }
    };
    const canJoinAsap = canJoinLive || canJoinEarly || canJoinBackstage;
    const join = joinBehavior ?? 'asap';
    const canJoin = join === 'asap' && canJoinAsap || join === 'live' && canJoinLive;
    if (call && callingState === _videoClient.CallingState.IDLE && canJoin && !hasLeft) {
      handleJoinCall();
    }
  }, [canJoinLive, call, canJoinBackstage, canJoinEarly, joinBehavior, callingState, hasLeft]);
  if (endedAt != null) {
    return /*#__PURE__*/_react.default.createElement(_LivestreamEnded.CallEndedView, null);
  }
  if (!canJoinLive || callingState !== _videoClient.CallingState.JOINED) {
    return /*#__PURE__*/_react.default.createElement(_ViewerLobby.ViewerLobby, {
      isLive: canJoinLive
    });
  }
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, viewerLivestream.container]
  }, ViewerLivestreamTopView && /*#__PURE__*/_react.default.createElement(ViewerLivestreamTopView, topViewProps), FloatingParticipantView && floatingParticipant && topViewHeight && controlsHeight && /*#__PURE__*/_react.default.createElement(FloatingParticipantView, {
    participant: floatingParticipant,
    draggableContainerStyle: [_reactNative.StyleSheet.absoluteFill, {
      top: topViewHeight,
      bottom: controlsHeight
    }]
  }), LivestreamLayout && /*#__PURE__*/_react.default.createElement(LivestreamLayout, null), ViewerLivestreamControls && /*#__PURE__*/_react.default.createElement(ViewerLivestreamControls, {
    ViewerLeaveStreamButton: ViewerLeaveStreamButton,
    onLeaveStreamHandler: onLeaveStreamHandler,
    onLayout: event => {
      setControlsHeight(event.nativeEvent.layout.height);
    }
  }));
};
exports.ViewerLivestream = ViewerLivestream;
const useCanJoinEarly = () => {
  const {
    useCallStartsAt,
    useCallSettings
  } = (0, _videoReactBindings.useCallStateHooks)();
  const startsAt = useCallStartsAt();
  const settings = useCallSettings();
  const joinAheadTimeSeconds = settings?.backstage.join_ahead_time_seconds;
  const [canJoinEarly, setCanJoinEarly] = (0, _react.useState)(() => checkCanJoinEarly(startsAt, joinAheadTimeSeconds));
  (0, _react.useEffect)(() => {
    if (!canJoinEarly) {
      const handle = setInterval(() => {
        setCanJoinEarly(checkCanJoinEarly(startsAt, joinAheadTimeSeconds));
      }, 1000);
      return () => clearInterval(handle);
    }
  }, [canJoinEarly, startsAt, joinAheadTimeSeconds]);
  return canJoinEarly;
};
const checkCanJoinEarly = (startsAt, joinAheadTimeSeconds) => {
  if (!startsAt) {
    return false;
  }
  return Date.now() >= +startsAt - (joinAheadTimeSeconds ?? 0) * 1000;
};
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      paddingBottom: theme.variants.insets.bottom,
      paddingLeft: theme.variants.insets.left,
      paddingRight: theme.variants.insets.right,
      paddingTop: theme.variants.insets.top,
      backgroundColor: theme.colors.sheetPrimary
    }
  }), [theme]);
};
//# sourceMappingURL=ViewerLivestream.js.map