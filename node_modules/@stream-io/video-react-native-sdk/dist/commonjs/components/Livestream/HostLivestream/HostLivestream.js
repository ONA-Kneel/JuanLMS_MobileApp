"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HostLivestream = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeIncallManager = _interopRequireDefault(require("react-native-incall-manager"));
var _contexts = require("../../../contexts");
var _HostLivestreamTopView = require("../LivestreamTopView/HostLivestreamTopView");
var _HostLivestreamControls = require("../LivestreamControls/HostLivestreamControls");
var _LivestreamLayout = require("../LivestreamLayout");
var _constants = require("../../../constants");
var _FloatingParticipantView = require("../../Participant/FloatingParticipantView");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _videoClient = require("@stream-io/video-client");
var _ScreenShareOverlay = require("../../utility/ScreenShareOverlay");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the HostLivestream component.
 */

/**
 * The HostLivestream component displays the UI for the Host's live stream.
 */
const HostLivestream = ({
  HostLivestreamTopView = _HostLivestreamTopView.HostLivestreamTopView,
  HostLivestreamControls = _HostLivestreamControls.HostLivestreamControls,
  LivestreamLayout = _LivestreamLayout.LivestreamLayout,
  FloatingParticipantView = _FloatingParticipantView.FloatingParticipantView,
  ScreenShareOverlay = _ScreenShareOverlay.ScreenShareOverlay,
  LiveIndicator,
  FollowerCount,
  DurationBadge,
  HostStartStreamButton,
  LivestreamMediaControls,
  onEndStreamHandler,
  onStartStreamHandler,
  hls,
  disableStopPublishedStreamsOnEndStream
}) => {
  const styles = useStyles();
  const {
    theme: {
      colors,
      hostLivestream
    }
  } = (0, _contexts.useTheme)();
  const {
    useParticipants,
    useHasOngoingScreenShare
  } = (0, _videoReactBindings.useCallStateHooks)();
  const [currentSpeaker] = useParticipants();
  const hasOngoingScreenShare = useHasOngoingScreenShare();
  const floatingParticipant = hasOngoingScreenShare && currentSpeaker && (0, _videoClient.hasVideo)(currentSpeaker) && currentSpeaker;

  // Automatically route audio to speaker devices as relevant for watching videos.
  (0, _react.useEffect)(() => {
    _reactNativeIncallManager.default.start({
      media: 'video'
    });
    return () => _reactNativeIncallManager.default.stop();
  }, []);
  const [topViewHeight, setTopViewHeight] = _react.default.useState();
  const [controlsHeight, setControlsHeight] = _react.default.useState();
  const topViewProps = {
    LiveIndicator,
    FollowerCount,
    DurationBadge,
    onLayout: event => {
      setTopViewHeight(event.nativeEvent.layout.height);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: colors.sheetTertiary
    }, hostLivestream.container]
  }, HostLivestreamTopView && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.topViewContainer,
    onLayout: event => {
      setTopViewHeight(event.nativeEvent.layout.height);
    }
  }, /*#__PURE__*/_react.default.createElement(HostLivestreamTopView, topViewProps)), FloatingParticipantView && floatingParticipant && topViewHeight && controlsHeight && /*#__PURE__*/_react.default.createElement(FloatingParticipantView, {
    participant: floatingParticipant,
    draggableContainerStyle: [_reactNative.StyleSheet.absoluteFill, {
      top: topViewHeight,
      bottom: controlsHeight
    }]
  }), LivestreamLayout && /*#__PURE__*/_react.default.createElement(LivestreamLayout, {
    ScreenShareOverlay: ScreenShareOverlay
  }), HostLivestreamControls && /*#__PURE__*/_react.default.createElement(HostLivestreamControls, {
    onEndStreamHandler: onEndStreamHandler,
    onStartStreamHandler: onStartStreamHandler,
    HostStartStreamButton: HostStartStreamButton,
    LivestreamMediaControls: LivestreamMediaControls,
    hls: hls,
    onLayout: event => {
      setControlsHeight(event.nativeEvent.layout.height);
    },
    disableStopPublishedStreamsOnEndStream: disableStopPublishedStreamsOnEndStream
  }));
};
exports.HostLivestream = HostLivestream;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      paddingBottom: theme.variants.insets.bottom,
      paddingLeft: theme.variants.insets.left,
      paddingRight: theme.variants.insets.right,
      paddingTop: theme.variants.insets.top,
      backgroundColor: theme.colors.sheetPrimary
    },
    topViewContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      zIndex: _constants.Z_INDEX.IN_FRONT
    },
    controlsViewContainer: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: _constants.Z_INDEX.IN_FRONT
    }
  }), [theme]);
};
//# sourceMappingURL=HostLivestream.js.map