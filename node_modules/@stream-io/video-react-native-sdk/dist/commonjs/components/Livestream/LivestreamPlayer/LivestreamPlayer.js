"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LivestreamPlayer = void 0;
var _react = _interopRequireWildcard(require("react"));
var _ViewerLivestream = require("../ViewerLivestream");
var _videoClient = require("@stream-io/video-client");
var _StreamCall = require("../../../providers/StreamCall");
var _videoReactBindings = require("@stream-io/video-react-bindings");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const LivestreamPlayer = ({
  callType,
  callId,
  ViewerLivestream = _ViewerLivestream.ViewerLivestream,
  joinBehavior = 'asap'
}) => {
  const client = (0, _videoReactBindings.useStreamVideoClient)();
  const [call, setCall] = (0, _react.useState)();
  (0, _react.useEffect)(() => {
    if (!client) {
      return;
    }
    const myCall = client.call(callType, callId);
    setCall(myCall);
    return () => {
      if (myCall.state.callingState !== _videoClient.CallingState.LEFT) {
        myCall.leave().catch(e => {
          const logger = (0, _videoClient.getLogger)(['LivestreamPlayer']);
          logger('error', 'Error leaving call:', e);
        });
      }
      setCall(undefined);
    };
  }, [callId, callType, client]);
  (0, _react.useEffect)(() => {
    return () => {
      // this handles unmount on metro reloads
      if (call?.state.callingState !== _videoClient.CallingState.LEFT) {
        call?.leave().catch(e => {
          const logger = (0, _videoClient.getLogger)(['LivestreamPlayer']);
          logger('error', 'Error leaving call:', e);
        });
      }
    };
  }, [call]);
  if (!call) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_StreamCall.StreamCall, {
    call: call
  }, /*#__PURE__*/_react.default.createElement(ViewerLivestream, {
    joinBehavior: joinBehavior
  }));
};
exports.LivestreamPlayer = LivestreamPlayer;
//# sourceMappingURL=LivestreamPlayer.js.map