"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CallEndedView = void 0;
var _react = _interopRequireWildcard(require("react"));
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _contexts = require("../../../contexts");
var _reactNative = require("react-native");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const CallEndedView = () => {
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  const call = (0, _videoReactBindings.useCall)();
  const [recordingsResponse, setRecordingsResponse] = (0, _react.useState)(undefined);
  const styles = useStyles();
  (0, _react.useEffect)(() => {
    let isCanceled = false;
    const fetchRecordings = async () => {
      if (recordingsResponse == null) {
        try {
          const callRecordingsResponse = await call?.queryRecordings();
          if (!isCanceled) {
            setRecordingsResponse(callRecordingsResponse);
          }
        } catch (error) {
          console.log('Error fetching recordings:', error);
          if (!isCanceled) {
            setRecordingsResponse(undefined);
          }
        }
      }
    };
    fetchRecordings();
    return () => {
      isCanceled = true;
    };
  }, [call, recordingsResponse]);
  const openUrl = url => {
    _reactNative.Linking.canOpenURL(url).then(supported => {
      if (supported) {
        _reactNative.Linking.openURL(url);
      } else {
        console.log('Cannot open URL:', url);
      }
    });
  };
  const showRecordings = recordingsResponse && recordingsResponse.recordings.length > 0;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.title
  }, t('The livestream has ended.')), showRecordings && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.subtitle
  }, t('Watch recordings:')), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.recordingsContainer
  }, /*#__PURE__*/_react.default.createElement(_reactNative.FlatList, {
    data: recordingsResponse.recordings,
    keyExtractor: item => item.session_id,
    renderItem: ({
      item
    }) => /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
      style: styles.recordingButton,
      onPress: () => openUrl(item.url)
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: styles.recordingText
    }, item.url.substring(0, 70), "..."))
  }))));
};
exports.CallEndedView = CallEndedView;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.colors.sheetPrimary,
      justifyContent: 'center',
      alignItems: 'center',
      padding: theme.variants.spacingSizes.md
    },
    title: {
      fontSize: theme.variants.fontSizes.lg,
      marginBottom: theme.variants.spacingSizes.md,
      color: theme.colors.textPrimary,
      fontWeight: 'bold'
    },
    subtitle: {
      fontSize: theme.variants.fontSizes.md,
      marginBottom: theme.variants.spacingSizes.md,
      color: theme.colors.textPrimary,
      fontWeight: 'bold'
    },
    recordingButton: {
      padding: theme.variants.spacingSizes.sm,
      width: '100%'
    },
    recordingText: {
      color: theme.colors.textSecondary,
      fontSize: theme.variants.fontSizes.md
    },
    recordingsContainer: {
      width: '100%',
      alignItems: 'center'
    }
  }), [theme]);
};
//# sourceMappingURL=LivestreamEnded.js.map