"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewerLeaveStreamButton = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
var _icons = require("../../../icons");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _videoClient = require("@stream-io/video-client");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the ViewerLeaveStreamButton component.
 */

/**
 * The ViewerLeaveStreamButton component displays and controls the leave stream logic of the viewer's live stream.
 */
const ViewerLeaveStreamButton = ({
  onLeaveStreamHandler
}) => {
  const [isAwaitingResponse, setIsAwaitingResponse] = (0, _react.useState)(false);
  const call = (0, _videoReactBindings.useCall)();
  const styles = useStyles();
  const {
    theme: {
      colors,
      variants: {
        iconSizes
      },
      viewerLeaveStreamButton
    }
  } = (0, _contexts.useTheme)();
  const onLeaveStreamButtonPress = async () => {
    if (onLeaveStreamHandler) {
      onLeaveStreamHandler();
      return;
    }
    try {
      setIsAwaitingResponse(true);
      await call?.leave();
      setIsAwaitingResponse(false);
    } catch (error) {
      const logger = (0, _videoClient.getLogger)(['ViewerLeaveStreamButton']);
      logger('error', 'Error stopping livestream', error);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    style: viewerLeaveStreamButton.container,
    onPress: onLeaveStreamButtonPress
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.icon, viewerLeaveStreamButton.icon]
  }, isAwaitingResponse ? /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, null) : /*#__PURE__*/_react.default.createElement(_icons.PhoneDown, {
    color: colors.iconPrimary,
    size: iconSizes.sm
  })));
};
exports.ViewerLeaveStreamButton = ViewerLeaveStreamButton;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    icon: {
      backgroundColor: theme.colors.buttonSecondary,
      height: theme.variants.buttonSizes.xs,
      width: theme.variants.buttonSizes.xs,
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: theme.variants.borderRadiusSizes.sm,
      zIndex: 2
    }
  }), [theme]);
};
//# sourceMappingURL=ViewerLeaveStreamButton.js.map