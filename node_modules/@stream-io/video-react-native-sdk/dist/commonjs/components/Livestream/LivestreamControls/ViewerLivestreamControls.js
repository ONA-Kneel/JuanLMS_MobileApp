"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewerLivestreamControls = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ViewerLeaveStreamButton = require("./ViewerLeaveStreamButton");
var _contexts = require("../../../contexts");
var _constants = require("../../../constants");
var _LivestreamTopView = require("../LivestreamTopView");
var _icons = require("../../../icons");
var _reactNativeIncallManager = _interopRequireDefault(require("react-native-incall-manager"));
var _LivestreamControls = require("../../../icons/LivestreamControls");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the ViewerLivestreamControls component.
 */

/**
 * The ViewerLivestreamControls component displays the call controls for the live stream at viewer's end.
 */
const ViewerLivestreamControls = ({
  ViewerLeaveStreamButton = _ViewerLeaveStreamButton.ViewerLeaveStreamButton,
  onLeaveStreamHandler,
  onLayout
}) => {
  const styles = useStyles();
  const {
    theme: {
      colors,
      viewerLivestreamControls,
      variants
    }
  } = (0, _contexts.useTheme)();
  const [showControls, setShowControls] = (0, _react.useState)(true);
  const [isMuted, setIsMuted] = (0, _react.useState)(false);
  const [isPlaying, setIsPlaying] = (0, _react.useState)(true);
  const [showPlayPauseButton, setShowPlayPauseButton] = (0, _react.useState)(true);
  const playPauseTimeout = (0, _react.useRef)(null);
  const hidePlayPauseButtonAfterDelay = (0, _react.useCallback)(() => {
    if (playPauseTimeout.current) {
      clearTimeout(playPauseTimeout.current);
    }
    playPauseTimeout.current = setTimeout(() => {
      setShowPlayPauseButton(false);
      playPauseTimeout.current = null;
    }, 3000);
  }, []);
  (0, _react.useEffect)(() => {
    hidePlayPauseButtonAfterDelay();
    return () => {
      if (playPauseTimeout.current) {
        clearTimeout(playPauseTimeout.current);
      }
    };
  }, [hidePlayPauseButtonAfterDelay]);
  const showPlayPauseButtonWithTimeout = () => {
    setShowPlayPauseButton(true);
    hidePlayPauseButtonAfterDelay();
  };
  const showControlsHandler = () => {
    showPlayPauseButtonWithTimeout();
    if (showControls) {
      return;
    }
    setShowControls(true);
  };
  const toggleControls = () => {
    setShowControls(!showControls);
  };
  const toggleAudio = () => {
    setIsMuted(!isMuted);
    _reactNativeIncallManager.default.setForceSpeakerphoneOn(isMuted);
  };
  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
    showPlayPauseButtonWithTimeout();
  };
  const VolumeButton = /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    onPress: toggleAudio,
    style: [styles.fullscreenButton]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.icon]
  }, /*#__PURE__*/_react.default.createElement(_icons.IconWrapper, null, isMuted ? /*#__PURE__*/_react.default.createElement(_LivestreamControls.VolumeOff, {
    color: colors.iconPrimary,
    size: variants.iconSizes.sm
  }) : /*#__PURE__*/_react.default.createElement(_LivestreamControls.VolumeOn, {
    color: colors.iconPrimary,
    size: variants.iconSizes.sm
  }))));
  const MaximizeButton = /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    onPress: toggleControls,
    style: [styles.fullscreenButton]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.icon]
  }, /*#__PURE__*/_react.default.createElement(_icons.Maximize, {
    color: colors.iconPrimary,
    width: variants.iconSizes.sm,
    height: variants.iconSizes.sm
  })));
  const PlayPauseButton = /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    onPress: togglePlayPause,
    style: styles.playPauseButton
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.playPauseIcon
  }, /*#__PURE__*/_react.default.createElement(_icons.IconWrapper, null, isPlaying ? /*#__PURE__*/_react.default.createElement(_LivestreamControls.PauseIcon, {
    color: colors.iconPrimary,
    size: variants.iconSizes.lg * 3
  }) : /*#__PURE__*/_react.default.createElement(_LivestreamControls.PlayIcon, {
    color: colors.iconPrimary,
    size: variants.iconSizes.lg * 3
  }))));
  return /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    style: _reactNative.StyleSheet.absoluteFill,
    onPress: showControlsHandler
  }, !isPlaying && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.blackOverlay
  }), showPlayPauseButton && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.centerButtonContainer
  }, PlayPauseButton), showControls && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, viewerLivestreamControls.container],
    onLayout: onLayout
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.leftElement, viewerLivestreamControls.leftElement]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.leftElement]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.liveInfo]
  }, /*#__PURE__*/_react.default.createElement(_LivestreamTopView.LiveIndicator, null), /*#__PURE__*/_react.default.createElement(_LivestreamTopView.FollowerCount, null)))), /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_LivestreamTopView.DurationBadge, {
    mode: "viewer"
  })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.rightElement, viewerLivestreamControls.rightElement]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.buttonContainer
  }, VolumeButton, MaximizeButton, ViewerLeaveStreamButton && /*#__PURE__*/_react.default.createElement(ViewerLeaveStreamButton, {
    onLeaveStreamHandler: onLeaveStreamHandler
  })))));
};
exports.ViewerLivestreamControls = ViewerLivestreamControls;
const useStyles = () => {
  const {
    theme
  } = (0, _contexts.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      position: 'absolute',
      bottom: 0,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 16,
      paddingHorizontal: 8,
      zIndex: _constants.Z_INDEX.IN_FRONT,
      backgroundColor: theme.colors.sheetOverlay
    },
    leftElement: {
      flex: 1,
      alignItems: 'flex-start',
      justifyContent: 'center'
    },
    rightElement: {
      flex: 1,
      alignItems: 'flex-end'
    },
    liveInfo: {
      flexDirection: 'row'
    },
    icon: {
      height: theme.variants.iconSizes.sm,
      width: theme.variants.iconSizes.sm
    },
    fullscreenButton: {
      backgroundColor: theme.colors.buttonSecondary,
      height: theme.variants.buttonSizes.xs,
      width: theme.variants.buttonSizes.xs,
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: theme.variants.borderRadiusSizes.sm,
      zIndex: 2
    },
    buttonContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      gap: theme.variants.spacingSizes.sm
    },
    centerButtonContainer: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: _constants.Z_INDEX.IN_FRONT,
      pointerEvents: 'box-none'
    },
    playPauseButton: {
      height: 200,
      width: 200,
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: _constants.Z_INDEX.IN_FRONT + 1
    },
    playPauseIcon: {
      height: 200,
      width: 200
    },
    blackOverlay: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'black',
      zIndex: _constants.Z_INDEX.IN_FRONT - 1
    }
  }), [theme]);
};
//# sourceMappingURL=ViewerLivestreamControls.js.map