"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HostStartStreamButton = void 0;
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
var _icons = require("../../../icons");
var _videoClient = require("@stream-io/video-client");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the HostStartStreamButton component.
 */

/**
 * The HostStartStreamButton component displays and controls the start and end of the host's live stream.
 */
const HostStartStreamButton = ({
  onEndStreamHandler,
  onStartStreamHandler,
  hls,
  disableStopPublishedStreamsOnEndStream
}) => {
  const [isAwaitingResponse, setIsAwaitingResponse] = (0, _react.useState)(false);
  const {
    useIsCallLive,
    useIsCallHLSBroadcastingInProgress
  } = (0, _videoReactBindings.useCallStateHooks)();
  const {
    theme: {
      colors,
      variants: {
        iconSizes
      },
      typefaces,
      hostStartStreamButton
    }
  } = (0, _contexts.useTheme)();
  const call = (0, _videoReactBindings.useCall)();
  const isCallLive = useIsCallLive();
  const isCallBroadcasting = useIsCallHLSBroadcastingInProgress();
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  const liveOrBroadcasting = isCallLive || isCallBroadcasting;
  const onStartStreamButtonPress = async () => {
    try {
      setIsAwaitingResponse(true);
      await call?.goLive();
      if (hls) {
        await call?.startHLS();
      }
      setIsAwaitingResponse(false);
      if (onStartStreamHandler) {
        onStartStreamHandler();
      }
    } catch (error) {
      const logger = (0, _videoClient.getLogger)(['HostStartStreamButton']);
      logger('error', 'Error starting livestream', error);
    }
  };
  const onEndStreamButtonPress = async () => {
    try {
      setIsAwaitingResponse(true);
      if (!disableStopPublishedStreamsOnEndStream) {
        await call?.stopPublish(_videoClient.SfuModels.TrackType.VIDEO);
        await call?.stopPublish(_videoClient.SfuModels.TrackType.SCREEN_SHARE);
      }
      if (hls) {
        await call?.stopHLS();
      } else {
        await call?.stopLive();
      }
      setIsAwaitingResponse(false);
      if (onEndStreamHandler) {
        onEndStreamHandler();
      }
    } catch (error) {
      const logger = (0, _videoClient.getLogger)(['HostStartStreamButton']);
      logger('error', 'Error stopping livestream', error);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    disabled: isAwaitingResponse,
    style: [styles.container, {
      backgroundColor: isAwaitingResponse ? colors.sheetTertiary : liveOrBroadcasting ? colors.buttonWarning : colors.buttonPrimary
    }, hostStartStreamButton.container],
    onPress: liveOrBroadcasting ? onEndStreamButtonPress : onStartStreamButtonPress
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.icon, {
      height: iconSizes.xs,
      width: iconSizes.xs
    }, hostStartStreamButton.icon]
  }, isAwaitingResponse ? /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, null) : liveOrBroadcasting ? /*#__PURE__*/_react.default.createElement(_icons.EndBroadcastIcon, null) : /*#__PURE__*/_react.default.createElement(_icons.StartStreamIcon, null)), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.text, typefaces.subtitleBold, {
      color: colors.textPrimary
    }, hostStartStreamButton.text]
  }, isAwaitingResponse ? t('Loading...') : liveOrBroadcasting ? t('Stop Livestream') : t('Start Livestream')));
};
exports.HostStartStreamButton = HostStartStreamButton;
const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8,
    borderRadius: 4
  },
  icon: {},
  text: {
    marginLeft: 8,
    includeFontPadding: false
  }
});
//# sourceMappingURL=HostStartStreamButton.js.map