"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styles = exports.IncomingCall = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _UserInfo = require("./UserInfo");
var _CallControls = require("../CallControls");
var _contexts = require("../../../contexts");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Props for the IncomingCall Component.
 */

/**
 * An incoming call with the caller's avatar, name and accept/reject buttons.
 * Used when the user is receiving a call.
 */
const IncomingCall = ({
  onAcceptCallHandler,
  onRejectCallHandler,
  IncomingCallControls = _CallControls.IncomingCallControls,
  landscape
}) => {
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  const {
    theme: {
      colors,
      incomingCall,
      typefaces
    }
  } = (0, _contexts.useTheme)();
  const landscapeContentStyles = {
    flexDirection: landscape ? 'row' : 'column'
  };
  return /*#__PURE__*/_react.default.createElement(Background, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.content, landscapeContentStyles, incomingCall.content]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.topContainer, incomingCall.topContainer]
  }, /*#__PURE__*/_react.default.createElement(_UserInfo.UserInfo, null), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.incomingCallText, {
      color: colors.textPrimary
    }, typefaces.heading6, incomingCall.incomingCallText]
  }, t('Incoming Call...'))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.bottomContainer, incomingCall.bottomContainer]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.incomingCallControls, incomingCall.incomingCallControls]
  }, IncomingCallControls && /*#__PURE__*/_react.default.createElement(IncomingCallControls, {
    onAcceptCallHandler: onAcceptCallHandler,
    onRejectCallHandler: onRejectCallHandler
  })))));
};
exports.IncomingCall = IncomingCall;
const Background = ({
  children
}) => {
  const {
    theme: {
      colors,
      incomingCall
    }
  } = (0, _contexts.useTheme)();
  const connectedUser = (0, _videoReactBindings.useConnectedUser)();
  const {
    useCallMembers
  } = (0, _videoReactBindings.useCallStateHooks)();
  const members = useCallMembers();

  // take the first N members to show their avatars
  const avatarsToShow = (members || []).filter(({
    user
  }) => user.id !== connectedUser?.id).map(({
    user
  }) => user.image).filter(image => !!image);
  if (avatarsToShow.length) {
    return /*#__PURE__*/_react.default.createElement(_reactNative.ImageBackground, {
      source: {
        uri: avatarsToShow[0]
      },
      style: [styles.background, {
        backgroundColor: colors.sheetTertiary
      }, incomingCall.background]
    }, children);
  }
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.background, {
      backgroundColor: colors.sheetTertiary
    }, incomingCall.background]
  }, children);
};
const styles = exports.styles = _reactNative.StyleSheet.create({
  background: {
    flex: 1
  },
  content: {
    flex: 1
  },
  topContainer: {
    flex: 1,
    justifyContent: 'center'
  },
  incomingCallText: {
    marginTop: 8,
    textAlign: 'center'
  },
  bottomContainer: {
    flex: 1,
    justifyContent: 'center'
  },
  incomingCallControls: {
    justifyContent: 'center'
  }
});
//# sourceMappingURL=IncomingCall.js.map