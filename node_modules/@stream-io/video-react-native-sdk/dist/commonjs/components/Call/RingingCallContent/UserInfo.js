"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserInfo = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _utils = require("../../../utils");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var AvatarModes = /*#__PURE__*/function (AvatarModes) {
  AvatarModes["small"] = "sm";
  AvatarModes["medium"] = "md";
  AvatarModes["large"] = "lg";
  return AvatarModes;
}(AvatarModes || {});
const UserInfo = ({
  includeSelf = false,
  totalMembersToShow = 3
}) => {
  const {
    theme: {
      colors,
      typefaces,
      variants: {
        avatarSizes
      },
      userInfo
    }
  } = (0, _ThemeContext.useTheme)();
  const connectedUser = (0, _videoReactBindings.useConnectedUser)();
  const {
    useCallMembers
  } = (0, _videoReactBindings.useCallStateHooks)();
  const members = useCallMembers();

  // take the first N members to show their avatars
  const membersToShow = (members || []).filter(user => user.user_id !== connectedUser?.id || includeSelf).slice(0, totalMembersToShow).map(({
    user
  }) => user);
  if (includeSelf && !membersToShow.find(user => user.id === connectedUser?.id)) {
    // if the current user is not in the initial batch of members,
    // replace the first item in membersToShow array with the current user
    const self = members.find(({
      user
    }) => user.id === connectedUser?.id);
    if (self) {
      membersToShow.splice(0, 1, self.user);
    }
  }
  const memberUserIds = membersToShow.map(memberToShow => memberToShow.name ?? memberToShow.id);
  const callTitle = (0, _utils.generateCallTitle)(memberUserIds, totalMembersToShow);
  const avatarSizeModes = {
    1: AvatarModes.large,
    2: AvatarModes.medium,
    3: AvatarModes.small
  };
  const mode = avatarSizeModes[memberUserIds.length] || AvatarModes.small;
  const avatarStyles = {
    height: avatarSizes[mode],
    width: avatarSizes[mode],
    borderRadius: avatarSizes[mode] / 2,
    marginVertical: 4
  };
  const fontStyleByMembersCount = memberUserIds.length > 1 ? typefaces.heading5 : typefaces.heading4;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, userInfo.container]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.avatarGroup, userInfo.avatarGroup]
  }, membersToShow.map(memberToShow => {
    if (!memberToShow.image) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
      key: memberToShow.id,
      style: [avatarStyles]
      // FIXME: use real avatar from coordinator this is temporary
      ,
      source: {
        uri: memberToShow.image
      }
    });
  })), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.name, fontStyleByMembersCount, {
      color: colors.textPrimary
    }, userInfo.name]
  }, callTitle));
};
exports.UserInfo = UserInfo;
const styles = _reactNative.StyleSheet.create({
  container: {
    paddingHorizontal: 64,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between'
  },
  avatarGroup: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-evenly',
    flexWrap: 'wrap'
  },
  name: {
    textAlign: 'center',
    marginTop: 16
  }
});
//# sourceMappingURL=UserInfo.js.map