"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextBasedIndicator = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _Back = require("../../../icons/Back");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const TextBasedIndicator = props => {
  const {
    theme: {
      colors,
      typefaces,
      variants: {
        iconSizes
      }
    }
  } = (0, _ThemeContext.useTheme)();
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: colors.sheetTertiary
    }]
  }, props.onBackPress && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.backContainer
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    onPress: props.onBackPress,
    style: ({
      pressed
    }) => [{
      opacity: pressed ? 0.2 : 1,
      height: iconSizes.md,
      width: iconSizes.md
    }]
  }, /*#__PURE__*/_react.default.createElement(_Back.Back, {
    color: colors.iconPrimary
  }))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.textContainer
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.text, {
      color: colors.textPrimary
    }, typefaces.heading6]
  }, props.text)));
};
exports.TextBasedIndicator = TextBasedIndicator;
const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  backContainer: {
    padding: 8,
    paddingTop: 16
  },
  textContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  text: {
    fontSize: 24
  }
});
//# sourceMappingURL=TextBasedIndicator.js.map