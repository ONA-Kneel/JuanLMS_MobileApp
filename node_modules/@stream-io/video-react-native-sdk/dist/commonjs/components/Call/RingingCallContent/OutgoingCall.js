"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OutgoingCall = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _UserInfo = require("./UserInfo");
var _constants = require("../../../constants");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _reactNativeWebrtc = require("@stream-io/react-native-webrtc");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _CallControls = require("../CallControls");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Props for the OutgoingCall Component.
 */

/**
 * An outgoing call with the callee's avatar, name, caller's camera in background, reject and mute buttons.
 * Used after the user has initiated a call.
 */
const OutgoingCall = ({
  OutgoingCallControls = _CallControls.OutgoingCallControls,
  landscape
}) => {
  const {
    theme: {
      colors,
      typefaces,
      outgoingCall
    }
  } = (0, _ThemeContext.useTheme)();
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  const landscapeContentStyles = {
    flexDirection: landscape ? 'row' : 'column'
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_reactNative.StyleSheet.absoluteFill, styles.container, outgoingCall.container]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.content, landscapeContentStyles, outgoingCall.content]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.topContainer, outgoingCall.topContainer]
  }, /*#__PURE__*/_react.default.createElement(_UserInfo.UserInfo, null), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.callingText, {
      color: colors.textPrimary
    }, typefaces.heading6, outgoingCall.callingText]
  }, t('Calling...'))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.bottomContainer, outgoingCall.bottomContainer]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.outgoingCallControls, outgoingCall.outgoingCallControls]
  }, OutgoingCallControls && /*#__PURE__*/_react.default.createElement(OutgoingCallControls, null))))), /*#__PURE__*/_react.default.createElement(Background, null));
};
exports.OutgoingCall = OutgoingCall;
const Background = () => {
  const {
    theme: {
      colors,
      outgoingCall
    }
  } = (0, _ThemeContext.useTheme)();
  const {
    useCameraState
  } = (0, _videoReactBindings.useCallStateHooks)();
  const {
    isMute,
    camera
  } = useCameraState();
  const localVideoStream = camera.state.mediaStream;
  if (isMute || !localVideoStream) {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.background, {
        backgroundColor: colors.sheetSecondary
      }, outgoingCall.background]
    });
  }
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.background, {
      backgroundColor: colors.sheetSecondary
    }, outgoingCall.background]
  }, /*#__PURE__*/_react.default.createElement(_reactNativeWebrtc.RTCView, {
    streamURL: localVideoStream.toURL(),
    zOrder: _constants.Z_INDEX.IN_BACK,
    style: _reactNative.StyleSheet.absoluteFill,
    mirror: true,
    objectFit: "cover"
  }));
};
const styles = _reactNative.StyleSheet.create({
  background: {
    flex: 1
  },
  container: {
    zIndex: _constants.Z_INDEX.IN_MIDDLE
  },
  topContainer: {
    flex: 1,
    justifyContent: 'center'
  },
  content: {
    flex: 1
  },
  callingText: {
    marginTop: 16,
    textAlign: 'center'
  },
  bottomContainer: {
    flex: 1,
    alignSelf: 'center',
    justifyContent: 'center'
  },
  outgoingCallControls: {
    justifyContent: 'center'
  }
});
//# sourceMappingURL=OutgoingCall.js.map