"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTCViewPipNative = void 0;
exports.onNativeCallClosed = onNativeCallClosed;
exports.onNativeDimensionsUpdated = onNativeDimensionsUpdated;
var _videoClient = require("@stream-io/video-client");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const COMPONENT_NAME = 'RTCViewPip';
const NativeComponent = (0, _reactNative.requireNativeComponent)(COMPONENT_NAME);
function onNativeCallClosed(reactTag) {
  (0, _videoClient.getLogger)(['RTCViewPipNative'])('debug', 'onNativeCallClosed');
  const commandId = _reactNative.UIManager.getViewManagerConfig(COMPONENT_NAME).Commands.onCallClosed;
  if (!commandId) return;
  _reactNative.UIManager.dispatchViewManagerCommand(reactTag, commandId, []);
}
function onNativeDimensionsUpdated(reactTag, width, height) {
  (0, _videoClient.getLogger)(['RTCViewPipNative'])('debug', 'onNativeDimensionsUpdated', {
    width,
    height
  });
  const commandId = _reactNative.UIManager.getViewManagerConfig(COMPONENT_NAME).Commands.setPreferredContentSize;
  if (!commandId) return;
  _reactNative.UIManager.dispatchViewManagerCommand(reactTag, commandId, [width, height]);
}

/** Wrapper for the native view
 * meant to stay private and not exposed */
const RTCViewPipNative = exports.RTCViewPipNative = /*#__PURE__*/_react.default.memo(/*#__PURE__*/_react.default.forwardRef((props, ref) => {
  if (_reactNative.Platform.OS !== 'ios') return null;
  return /*#__PURE__*/_react.default.createElement(NativeComponent, {
    style: _reactNative.StyleSheet.absoluteFill,
    pointerEvents: 'none'
    // eslint-disable-next-line react/prop-types
    ,
    streamURL: props.streamURL
    // @ts-expect-error - types issue
    ,
    ref: ref
  });
}));
//# sourceMappingURL=RTCViewPipNative.js.map