"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CallParticipantsSpotlight = void 0;
var _react = _interopRequireWildcard(require("react"));
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _reactNative = require("react-native");
var _useDebouncedValue = require("../../../utils/hooks/useDebouncedValue");
var _TestIds = require("../../../constants/TestIds");
var _CallParticipantsList = require("../CallParticipantsList/CallParticipantsList");
var _Participant = require("../../Participant");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _useIsInPiPMode = require("../../../hooks/useIsInPiPMode");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
/**
 * Props for the CallParticipantsSpotlight component.
 */

/**
 * Component used to display the list of participants in a spotlight mode.
 * This can be used when you want to render the screen sharing stream.
 */
const CallParticipantsSpotlight = ({
  CallParticipantsList = _CallParticipantsList.CallParticipantsList,
  ParticipantLabel,
  ParticipantNetworkQualityIndicator,
  ParticipantReaction,
  ParticipantVideoFallback,
  ParticipantView = _Participant.ParticipantView,
  ScreenShareOverlay,
  VideoRenderer,
  supportedReactions,
  landscape
}) => {
  const {
    theme: {
      callParticipantsSpotlight,
      variants
    }
  } = (0, _ThemeContext.useTheme)();
  const styles = useStyles();
  const {
    useParticipants
  } = (0, _videoReactBindings.useCallStateHooks)();
  const _allParticipants = useParticipants({
    sortBy: _videoClient.speakerLayoutSortPreset
  });
  const allParticipants = (0, _useDebouncedValue.useDebouncedValue)(_allParticipants, 300); // we debounce the participants to avoid unnecessary rerenders that happen when participant tracks are all subscribed simultaneously
  const [participantInSpotlight, ...otherParticipants] = allParticipants;
  const isScreenShareOnSpotlight = participantInSpotlight && (0, _videoClient.hasScreenShare)(participantInSpotlight);
  const isUserAloneInCall = _allParticipants?.length === 1;
  const isInPiP = (0, _useIsInPiPMode.useIsInPiPMode)();
  const participantViewProps = {
    ParticipantLabel,
    ParticipantNetworkQualityIndicator,
    ParticipantReaction,
    ParticipantVideoFallback,
    VideoRenderer
  };
  const callParticipantsListProps = {
    ...participantViewProps,
    ParticipantView
  };
  const landscapeStyles = {
    flexDirection: landscape ? 'row' : 'column'
  };
  const spotlightContainerLandscapeStyles = {
    marginHorizontal: landscape ? 0 : variants.spacingSizes.xs
  };
  const showShareScreenOverlay = participantInSpotlight?.isLocalParticipant && isScreenShareOnSpotlight && ScreenShareOverlay;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    testID: _TestIds.ComponentTestIds.CALL_PARTICIPANTS_SPOTLIGHT,
    style: [styles.container, landscapeStyles, callParticipantsSpotlight.container]
  }, participantInSpotlight && ParticipantView && (showShareScreenOverlay ? /*#__PURE__*/_react.default.createElement(ScreenShareOverlay, null) : /*#__PURE__*/_react.default.createElement(ParticipantView, _extends({
    participant: participantInSpotlight,
    style: isUserAloneInCall ? [styles.fullScreenSpotlightContainer, callParticipantsSpotlight.fullScreenSpotlightContainer] : [styles.spotlightContainer, spotlightContainerLandscapeStyles, callParticipantsSpotlight.spotlightContainer],
    objectFit: isScreenShareOnSpotlight ? 'contain' : 'cover',
    trackType: isScreenShareOnSpotlight ? 'screenShareTrack' : 'videoTrack',
    supportedReactions: supportedReactions
  }, participantViewProps))), !isInPiP && !isUserAloneInCall && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.callParticipantsListContainer, callParticipantsSpotlight.callParticipantsListContainer]
  }, CallParticipantsList && /*#__PURE__*/_react.default.createElement(CallParticipantsList, _extends({
    participants: isScreenShareOnSpotlight ? allParticipants : otherParticipants,
    supportedReactions: supportedReactions,
    horizontal: !landscape,
    numberOfColumns: !landscape ? 2 : 1,
    landscape: landscape
  }, callParticipantsListProps))));
};
exports.CallParticipantsSpotlight = CallParticipantsSpotlight;
const useStyles = () => {
  const {
    theme
  } = (0, _ThemeContext.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.colors.sheetPrimary
    },
    fullScreenSpotlightContainer: {
      flex: 1
    },
    spotlightContainer: {
      flex: 2,
      overflow: 'hidden',
      borderRadius: theme.variants.borderRadiusSizes.sm,
      marginHorizontal: theme.variants.spacingSizes.sm
    },
    callParticipantsListContainer: {
      flex: 1
    }
  }), [theme]);
};
//# sourceMappingURL=CallParticipantsSpotlight.js.map