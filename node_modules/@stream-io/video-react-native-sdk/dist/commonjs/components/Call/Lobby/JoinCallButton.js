"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JoinCallButton = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _videoClient = require("@stream-io/video-client");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the Join Call Button in the Lobby component.
 */

/**
 * The default Join call button to be used in the Lobby component.
 */
const JoinCallButton = ({
  onJoinCallHandler,
  onPressHandler
}) => {
  const {
    theme: {
      colors,
      typefaces,
      joinCallButton
    }
  } = (0, _ThemeContext.useTheme)();
  const styles = useStyles();
  const [isLoading, setIsLoading] = (0, _react.useState)(false);
  const {
    t
  } = (0, _videoReactBindings.useI18n)();
  const call = (0, _videoReactBindings.useCall)();
  const onPress = async () => {
    setIsLoading(true);
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    try {
      await call?.join({
        create: true
      });
      if (onJoinCallHandler) {
        onJoinCallHandler();
      }
    } catch (error) {
      const logger = (0, _videoClient.getLogger)(['JoinCallButton']);
      logger('error', 'Error joining call:', error);
    } finally {
      setIsLoading(false);
    }
  };
  const backgroundColor = isLoading ? colors.buttonDisabled : colors.buttonPrimary;
  return /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    style: [styles.container, {
      backgroundColor
    }, joinCallButton.container],
    onPress: onPress,
    disabled: isLoading
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.label, {
      color: colors.textPrimary
    }, typefaces.subtitleBold, joinCallButton.label]
  }, isLoading ? t('Joining...') : t('Join')));
};
exports.JoinCallButton = JoinCallButton;
const useStyles = () => {
  const {
    theme
  } = (0, _ThemeContext.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    container: {
      borderRadius: theme.variants.borderRadiusSizes.lg,
      marginTop: theme.variants.spacingSizes.md,
      paddingVertical: theme.variants.spacingSizes.sm
    },
    label: {
      textAlign: 'center'
    }
  }), [theme]);
};
//# sourceMappingURL=JoinCallButton.js.map