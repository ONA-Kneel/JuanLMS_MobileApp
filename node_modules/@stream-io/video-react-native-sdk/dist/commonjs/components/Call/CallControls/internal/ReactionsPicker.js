"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactionsPicker = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _videoClient = require("@stream-io/video-client");
var _TestIds = require("../../../../constants/TestIds");
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _constants = require("../../../../constants");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const ReactionsPicker = ({
  supportedReactions = _constants.defaultEmojiReactions,
  reactionsButtonLayoutRectangle,
  onRequestedClose
}) => {
  const {
    theme: {
      colors,
      reactionsPicker,
      variants
    }
  } = (0, _ThemeContext.useTheme)();
  const styles = useStyles();
  const call = (0, _videoReactBindings.useCall)();
  const size = reactionsButtonLayoutRectangle?.width ?? 0;
  const reactionItemSize = size * 0.8;
  const popupHeight =
  // the top padding
  variants.spacingSizes.xs +
  // take margins into account
  variants.spacingSizes.xs * supportedReactions.length +
  // the size of the reaction icon items (same size as reactions button * amount of reactions)
  reactionItemSize * supportedReactions.length;
  const reactionsPopupStyle = {
    // we should show the popup right above the reactions button and not top of it
    top: (reactionsButtonLayoutRectangle?.y ?? 0) - popupHeight,
    // from the same side horizontal coordinate of the reactions button
    left: reactionsButtonLayoutRectangle?.x,
    // the width of the popup should be the same as the reactions button
    width: size,
    height: popupHeight,
    // the popup should be rounded as the reactions button
    borderTopStartRadius: size / 2,
    borderTopEndRadius: size / 2
  };
  const elasticAnimRef = (0, _react.useRef)(new _reactNative.Animated.Value(0.5)); // Initial value for scale: 0.5

  (0, _react.useEffect)(() => {
    _reactNative.Animated.timing(elasticAnimRef.current, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
      easing: _reactNative.Easing.elastic(3)
    }).start();
  }, []);
  const reactionItemStyle = {
    height: reactionItemSize,
    width: reactionItemSize,
    borderRadius: reactionItemSize / 2
  };
  const reactionsButtonDimmerStyle = {
    ...styles.reactionsButtonDimmer,
    height: size,
    width: size,
    // we should show the popup right on top of the reactions button
    top: reactionsButtonLayoutRectangle?.y ?? 0 - popupHeight + size,
    // from the same side horizontal coordinate of the reactions button
    left: reactionsButtonLayoutRectangle?.x
  };
  const onClose = reaction => {
    if (reaction) {
      call?.sendReaction(reaction).catch(e => {
        const logger = (0, _videoClient.getLogger)(['ReactionsPicker']);
        logger('error', 'Error on onClose-sendReaction', e, reaction);
      });
    }
    _reactNative.Animated.timing(elasticAnimRef.current, {
      toValue: 0.2,
      duration: 150,
      useNativeDriver: true,
      easing: _reactNative.Easing.linear
    }).start(onRequestedClose);
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    testID: _TestIds.ComponentTestIds.REACTIONS_PICKER,
    style: [styles.reactionsPopup, reactionsPopupStyle, {
      backgroundColor: colors.sheetSecondary
    }, reactionsPicker.reactionsPopup],
    onPress: () => {
      onClose();
    }
  }, supportedReactions.map(supportedReaction => /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    key: supportedReaction.emoji_code,
    style: [styles.reactionItem, reactionItemStyle, {
      backgroundColor: colors.buttonSecondary
    }, reactionsPicker.reactionItem],
    onPress: () => {
      onClose({
        type: supportedReaction.type,
        custom: supportedReaction.custom,
        emoji_code: supportedReaction.emoji_code
      });
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.Text, {
    style: [styles.reactionText, {
      transform: [{
        scaleY: elasticAnimRef.current
      }, {
        scaleX: elasticAnimRef.current
      }]
    }, reactionsPicker.reactionText]
  }, supportedReaction.icon)))), /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    style: [reactionsButtonDimmerStyle, {
      backgroundColor: colors.sheetSecondary
    }, reactionsPicker.reactionsButtonDimmer],
    onPress: () => onClose()
  }));
};
exports.ReactionsPicker = ReactionsPicker;
const useStyles = () => {
  const {
    theme
  } = (0, _ThemeContext.useTheme)();
  return (0, _react.useMemo)(() => _reactNative.StyleSheet.create({
    reactionsPopup: {
      position: 'absolute',
      alignItems: 'center',
      paddingTop: theme.variants.spacingSizes.xs
    },
    reactionsButtonDimmer: {
      position: 'absolute',
      opacity: 0.5
    },
    reactionItem: {
      alignItems: 'center',
      justifyContent: 'center',
      marginBottom: theme.variants.spacingSizes.xs
    },
    reactionText: {
      fontSize: 18.5
    }
  }), [theme]);
};
//# sourceMappingURL=ReactionsPicker.js.map