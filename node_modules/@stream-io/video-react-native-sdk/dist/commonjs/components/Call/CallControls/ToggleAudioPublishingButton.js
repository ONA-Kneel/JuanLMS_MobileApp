"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleAudioPublishingButton = void 0;
var _react = _interopRequireDefault(require("react"));
var _videoClient = require("@stream-io/video-client");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _CallControlsButton = require("./CallControlsButton");
var _icons = require("../../../icons");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Props for the Toggle Audio publishing button
 */

/**
 * Button to toggle audio mute/unmute status while in the call.
 */
const ToggleAudioPublishingButton = ({
  onPressHandler
}) => {
  const {
    useMicrophoneState
  } = (0, _videoReactBindings.useCallStateHooks)();
  const {
    optimisticIsMute,
    microphone
  } = useMicrophoneState();
  const {
    theme: {
      colors,
      toggleAudioPublishingButton,
      defaults
    }
  } = (0, _ThemeContext.useTheme)();
  const onPress = async () => {
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    await microphone.toggle();
  };
  return /*#__PURE__*/_react.default.createElement(_videoReactBindings.Restricted, {
    requiredGrants: [_videoClient.OwnCapability.SEND_AUDIO]
  }, /*#__PURE__*/_react.default.createElement(_CallControlsButton.CallControlsButton, {
    onPress: onPress,
    color: !optimisticIsMute ? colors.buttonSecondary : colors.buttonWarning,
    style: toggleAudioPublishingButton
  }, /*#__PURE__*/_react.default.createElement(_icons.IconWrapper, null, !optimisticIsMute ? /*#__PURE__*/_react.default.createElement(_icons.Mic, {
    color: colors.iconPrimary,
    size: defaults.iconSize
  }) : /*#__PURE__*/_react.default.createElement(_icons.MicOff, {
    color: colors.iconPrimary,
    size: defaults.iconSize
  }))));
};
exports.ToggleAudioPublishingButton = ToggleAudioPublishingButton;
//# sourceMappingURL=ToggleAudioPublishingButton.js.map