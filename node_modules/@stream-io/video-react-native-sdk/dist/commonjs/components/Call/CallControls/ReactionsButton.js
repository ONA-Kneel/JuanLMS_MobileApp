"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactionsButton = void 0;
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = _interopRequireWildcard(require("react"));
var _CallControlsButton = require("./CallControlsButton");
var _videoClient = require("@stream-io/video-client");
var _TestIds = require("../../../constants/TestIds");
var _icons = require("../../../icons");
var _ReactionsPicker = require("./internal/ReactionsPicker");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Props for the Reaction button
 */

/**
 * Button to display the list of Reactions supported in the call.
 * On press, it opens a view that can be used to send Reaction.
 */
const ReactionsButton = ({
  supportedReactions,
  onPressHandler
}) => {
  const [showReactionsPicker, setShowReactionsPicker] = (0, _react.useState)(false);
  const [reactionsButtonLayoutRectangle, setReactionsButtonLayoutRectangle] = (0, _react.useState)();
  const {
    theme: {
      colors
    }
  } = (0, _ThemeContext.useTheme)();
  // This is for the reaction picker
  const onReactionsButtonLayout = event => {
    const layout = event.nativeEvent.layout;
    setReactionsButtonLayoutRectangle(prev => {
      if (prev && prev.width === layout.width && prev.height === layout.height && prev.x === layout.x && prev.y === layout.y) {
        return prev;
      }
      return layout;
    });
  };
  const reactionsButtonHandler = () => {
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    setShowReactionsPicker(true);
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_videoReactBindings.Restricted, {
    requiredGrants: [_videoClient.OwnCapability.CREATE_REACTION]
  }, /*#__PURE__*/_react.default.createElement(_CallControlsButton.CallControlsButton, {
    testID: _TestIds.ButtonTestIds.REACTION,
    onPress: reactionsButtonHandler,
    onLayout: onReactionsButtonLayout
  }, /*#__PURE__*/_react.default.createElement(_icons.IconWrapper, null, /*#__PURE__*/_react.default.createElement(_icons.Reaction, {
    color: colors.iconPrimary
  })))), showReactionsPicker && /*#__PURE__*/_react.default.createElement(_ReactionsPicker.ReactionsPicker, {
    supportedReactions: supportedReactions,
    reactionsButtonLayoutRectangle: reactionsButtonLayoutRectangle,
    onRequestedClose: () => {
      setShowReactionsPicker(false);
    }
  }));
};
exports.ReactionsButton = ReactionsButton;
//# sourceMappingURL=ReactionsButton.js.map