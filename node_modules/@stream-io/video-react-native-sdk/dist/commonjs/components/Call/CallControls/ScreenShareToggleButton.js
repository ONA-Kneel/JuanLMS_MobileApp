"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenShareToggleButton = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeWebrtc = require("@stream-io/react-native-webrtc");
var _ScreenShare = require("../../../icons/ScreenShare");
var _StopScreenShare = require("../../../icons/StopScreenShare");
var _CallControlsButton = require("./CallControlsButton");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _useScreenShareButton = require("../../../hooks/useScreenShareButton");
var _icons = require("../../../icons");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * The props for the Screen Share button in the Call Controls.
 */

/**
 * Button to start/stop screen share.
 * Note: This button is enabled only on iOS >= 14.0 and any Android version.
 */
const ScreenShareToggleButton = ({
  onScreenShareStartedHandler,
  onScreenShareStoppedHandler
}) => {
  const {
    theme: {
      colors,
      screenShareToggleButton,
      variants
    }
  } = (0, _ThemeContext.useTheme)();
  const screenCapturePickerViewiOSRef = (0, _react.useRef)(null);
  const {
    onPress,
    hasPublishedScreenShare
  } = (0, _useScreenShareButton.useScreenShareButton)(screenCapturePickerViewiOSRef, onScreenShareStartedHandler, onScreenShareStoppedHandler);
  if (!onPress) return null;
  return /*#__PURE__*/_react.default.createElement(_CallControlsButton.CallControlsButton, {
    onPress: onPress,
    color: hasPublishedScreenShare ? colors.buttonWarning : colors.buttonSecondary,
    style: {
      container: screenShareToggleButton.container,
      svgContainer: screenShareToggleButton.svgContainer
    }
  }, /*#__PURE__*/_react.default.createElement(_icons.IconWrapper, null, hasPublishedScreenShare ? /*#__PURE__*/_react.default.createElement(_StopScreenShare.StopScreenShare, {
    size: variants.iconSizes.md,
    color: colors.iconPrimary
  }) : /*#__PURE__*/_react.default.createElement(_ScreenShare.ScreenShare, {
    size: variants.iconSizes.md,
    color: colors.iconPrimary
  })), _reactNative.Platform.OS === 'ios' && /*#__PURE__*/_react.default.createElement(_reactNativeWebrtc.ScreenCapturePickerView, {
    ref: screenCapturePickerViewiOSRef
  }));
};
exports.ScreenShareToggleButton = ScreenShareToggleButton;
//# sourceMappingURL=ScreenShareToggleButton.js.map