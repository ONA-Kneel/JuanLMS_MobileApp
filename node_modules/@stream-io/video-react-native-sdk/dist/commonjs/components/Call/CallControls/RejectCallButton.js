"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RejectCallButton = void 0;
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _react = _interopRequireWildcard(require("react"));
var _CallControlsButton = require("./CallControlsButton");
var _icons = require("../../../icons");
var _videoClient = require("@stream-io/video-client");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * The props for the Reject Call button.
 */

/**
 * Button to reject a call.
 *
 * Calls call.leave({ reject: true, reason: `OPTIONAL-REASON` }) internally.
 */
const RejectCallButton = ({
  onPressHandler,
  onRejectCallHandler,
  size,
  rejectReason
}) => {
  const call = (0, _videoReactBindings.useCall)();
  const {
    useCallCallingState
  } = (0, _videoReactBindings.useCallStateHooks)();
  const callingState = useCallCallingState();
  const {
    theme: {
      colors,
      rejectCallButton,
      variants: {
        buttonSizes,
        iconSizes
      }
    }
  } = (0, _ThemeContext.useTheme)();
  const [isLoading, setIsLoading] = (0, _react.useState)(false);
  const rejectCallHandler = async () => {
    setIsLoading(true);
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    try {
      if (callingState === _videoClient.CallingState.LEFT) {
        return;
      }
      await call?.leave({
        reject: true,
        reason: rejectReason
      });
      if (onRejectCallHandler) {
        onRejectCallHandler();
      }
    } catch (error) {
      const logger = (0, _videoClient.getLogger)(['RejectCallButton']);
      logger('error', 'Error rejecting Call', error);
    } finally {
      setIsLoading(false);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_CallControlsButton.CallControlsButton, {
    onPress: rejectCallHandler,
    color: colors.buttonWarning,
    size: size ?? buttonSizes.md
    // TODO: check what to do about this random style prop
    // svgContainerStyle={theme.icon.lg}
    ,
    style: rejectCallButton,
    disabled: isLoading
  }, /*#__PURE__*/_react.default.createElement(_icons.IconWrapper, null, /*#__PURE__*/_react.default.createElement(_icons.PhoneDown, {
    color: colors.iconPrimary,
    size: iconSizes.lg
  })));
};
exports.RejectCallButton = RejectCallButton;
//# sourceMappingURL=RejectCallButton.js.map