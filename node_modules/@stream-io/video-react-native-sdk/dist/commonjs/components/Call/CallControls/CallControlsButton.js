"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CallControlsButton = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const CallControlsButton = props => {
  const {
    onPress,
    children,
    disabled,
    color: colorProp,
    disabledColor: disabledColorProp,
    style: styleProp,
    size,
    testID,
    onLayout
  } = props;
  const {
    theme: {
      colors,
      defaults,
      variants: {
        roundButtonSizes
      },
      callControlsButton: {
        container
      }
    }
  } = (0, _ThemeContext.useTheme)();
  const pressableStyle = ({
    pressed
  }) => [styles.container, {
    backgroundColor: disabled ? disabledColorProp || colors.buttonDisabled : colorProp || colors.buttonSecondary,
    opacity: pressed ? 0.2 : 1,
    height: size || roundButtonSizes.lg,
    width: size || roundButtonSizes.lg,
    borderRadius: defaults.borderRadius
  }, styleProp?.container ?? null, container];
  const childrenSize = (size || roundButtonSizes.lg) / 2 - 5;
  return /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    disabled: disabled,
    style: pressableStyle,
    onPress: onPress,
    testID: testID,
    onLayout: onLayout
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [{
      height: childrenSize,
      width: childrenSize
    }, styleProp?.svgContainer ?? null]
  }, children));
};
exports.CallControlsButton = CallControlsButton;
const styles = _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center',
    // For android
    elevation: 6
  }
});
//# sourceMappingURL=CallControlsButton.js.map