"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HangUpCallButton = void 0;
var _react = _interopRequireDefault(require("react"));
var _videoClient = require("@stream-io/video-client");
var _CallControlsButton = require("./CallControlsButton");
var _icons = require("../../../icons");
var _TestIds = require("../../../constants/TestIds");
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _IconWrapper = require("../../../icons/IconWrapper");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * The props for the Hang up call button in the Call Controls.
 */

/**
 * Button to hangup a call.
 *
 * Mostly calls call.leave() internally.
 */
const HangUpCallButton = ({
  size,
  onPressHandler,
  onHangupCallHandler
}) => {
  const call = (0, _videoReactBindings.useCall)();
  const {
    useCallCallingState
  } = (0, _videoReactBindings.useCallStateHooks)();
  const callingState = useCallCallingState();
  const {
    theme: {
      colors,
      hangupCallButton,
      variants
    }
  } = (0, _ThemeContext.useTheme)();
  const onPress = async () => {
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    try {
      if (callingState === _videoClient.CallingState.LEFT) {
        return;
      }
      await call?.leave();
      if (onHangupCallHandler) {
        onHangupCallHandler();
      }
    } catch (error) {
      const logger = (0, _videoClient.getLogger)(['HangUpCallButton']);
      logger('error', 'Error leaving Call', error);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_CallControlsButton.CallControlsButton, {
    onPress: onPress,
    color: colors.buttonWarning,
    style: hangupCallButton,
    size: size,
    testID: _TestIds.ButtonTestIds.HANG_UP_CALL
  }, /*#__PURE__*/_react.default.createElement(_IconWrapper.IconWrapper, null, /*#__PURE__*/_react.default.createElement(_icons.PhoneDown, {
    color: colors.iconPrimary,
    size: variants.iconSizes.md
  })));
};
exports.HangUpCallButton = HangUpCallButton;
//# sourceMappingURL=HangupCallButton.js.map