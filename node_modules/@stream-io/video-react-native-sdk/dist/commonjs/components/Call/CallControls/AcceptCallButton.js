"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AcceptCallButton = void 0;
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _videoClient = require("@stream-io/video-client");
var _react = _interopRequireWildcard(require("react"));
var _CallControlsButton = require("./CallControlsButton");
var _icons = require("../../../icons");
var _ThemeContext = require("../../../contexts/ThemeContext");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * The props for the Accept Call button.
 */

/**
 * Button to accept a call.
 *
 * Mostly calls call.join() internally.
 */
const AcceptCallButton = ({
  onPressHandler,
  onAcceptCallHandler
}) => {
  const call = (0, _videoReactBindings.useCall)();
  const {
    theme: {
      colors,
      variants: {
        buttonSizes,
        iconSizes
      },
      acceptCallButton
    }
  } = (0, _ThemeContext.useTheme)();
  const [isLoading, setIsLoading] = (0, _react.useState)(false);
  const acceptCallHandler = async () => {
    setIsLoading(true);
    if (onPressHandler) {
      onPressHandler();
      return;
    }
    try {
      await call?.join();
      if (onAcceptCallHandler) {
        onAcceptCallHandler();
      }
    } catch (error) {
      const logger = (0, _videoClient.getLogger)(['AcceptCallButton']);
      logger('error', 'Error joining Call', error);
    } finally {
      setIsLoading(false);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_CallControlsButton.CallControlsButton, {
    onPress: acceptCallHandler,
    color: colors.buttonSuccess,
    size: buttonSizes.md,
    style: acceptCallButton,
    disabled: isLoading
  }, /*#__PURE__*/_react.default.createElement(_icons.IconWrapper, null, /*#__PURE__*/_react.default.createElement(_icons.Phone, {
    color: colors.iconPrimary,
    size: iconSizes.lg
  })));
};
exports.AcceptCallButton = AcceptCallButton;
//# sourceMappingURL=AcceptCallButton.js.map