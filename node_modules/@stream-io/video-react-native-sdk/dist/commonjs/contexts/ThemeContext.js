"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTheme = exports.mergeThemes = exports.ThemeProvider = exports.ThemeContext = exports.StreamTheme = void 0;
var _react = _interopRequireWildcard(require("react"));
var _lodash = _interopRequireDefault(require("lodash.merge"));
var _theme = require("../theme/theme");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @deprecated Use StreamThemeInputValue instead.
 */

const mergeThemes = params => {
  const {
    style,
    theme
  } = params;
  const finalTheme = !theme || Object.keys(theme).length === 0 ? JSON.parse(JSON.stringify(_theme.defaultTheme)) : JSON.parse(JSON.stringify(theme));
  if (style) {
    (0, _lodash.default)(finalTheme, style);
  }
  return finalTheme;
};
exports.mergeThemes = mergeThemes;
const DEFAULT_BASE_CONTEXT_VALUE = {};
const ThemeContext = exports.ThemeContext = /*#__PURE__*/(0, _react.createContext)(DEFAULT_BASE_CONTEXT_VALUE);
const StreamTheme = props => {
  const {
    children,
    mergedStyle,
    style,
    theme
  } = props;
  const modifiedTheme = (0, _react.useMemo)(() => {
    if (mergedStyle) {
      return mergedStyle;
    }
    return mergeThemes({
      style,
      theme
    });
  }, [mergedStyle, style, theme]);
  return /*#__PURE__*/_react.default.createElement(ThemeContext.Provider, {
    value: modifiedTheme
  }, children);
};

/**
 * @deprecated Use StreamTheme instead of ThemeProvider.
 */
exports.StreamTheme = StreamTheme;
const ThemeProvider = exports.ThemeProvider = StreamTheme;
const useTheme = () => {
  const theme = (0, _react.useContext)(ThemeContext);
  if (theme === DEFAULT_BASE_CONTEXT_VALUE) {
    throw new Error('The useThemeContext hook was called outside the ThemeContext Provider. Make sure you have configured OverlayProvider component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#overlay-provider');
  }
  return {
    theme
  };
};
exports.useTheme = useTheme;
//# sourceMappingURL=ThemeContext.js.map