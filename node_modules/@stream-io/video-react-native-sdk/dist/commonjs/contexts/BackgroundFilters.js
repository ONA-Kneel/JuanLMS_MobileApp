"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBackgroundFilters = exports.BackgroundFiltersProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _videoReactBindings = require("@stream-io/video-react-bindings");
var _reactNative = require("react-native");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const isSupported = function () {
  if (_reactNative.Platform.OS === 'ios') {
    // only supported on ios 15 and above
    const currentVersion = parseInt(_reactNative.Platform.Version, 10);
    return currentVersion >= 15;
  }
  return _reactNative.Platform.OS === 'android';
}();
let videoFiltersModule;
try {
  videoFiltersModule = require('@stream-io/video-filters-react-native');
} catch {}
const resolveAssetSourceFunc = _reactNative.Image.resolveAssetSource;

// excluding array of images and only allow one image

/**
 * The context for the background filters.
 */
const BackgroundFiltersContext = /*#__PURE__*/(0, _react.createContext)(undefined);

/**
 * A hook to access the background filters context API.
 */
const useBackgroundFilters = () => {
  const context = (0, _react.useContext)(BackgroundFiltersContext);
  if (!context) {
    throw new Error('useBackgroundFilters must be used within a BackgroundFiltersProvider');
  }
  if (!videoFiltersModule) {
    throw new Error("Install the '@stream-io/video-filters-react-native' library to use background filters");
  }
  return context;
};

/**
 * A provider component that enables the use of background filters in your app.
 *
 * Please make sure you have the `@stream-io/video-filters-react-native` package installed
 * in your project before using this component.
 */
exports.useBackgroundFilters = useBackgroundFilters;
const BackgroundFiltersProvider = ({
  children
}) => {
  if (!videoFiltersModule) {
    throw new Error("Install the '@stream-io/video-filters-react-native' library to use background filters");
  }
  const call = (0, _videoReactBindings.useCall)();
  const isBackgroundBlurRegisteredRef = (0, _react.useRef)(false);
  const isVideoBlurRegisteredRef = (0, _react.useRef)(false);
  const registeredImageFiltersSetRef = (0, _react.useRef)(new Set());
  const [currentBackgroundFilter, setCurrentBackgroundFilter] = (0, _react.useState)();
  const applyBackgroundBlurFilter = (0, _react.useCallback)(async blurIntensity => {
    if (!isSupported) {
      return;
    }
    if (!isBackgroundBlurRegisteredRef.current) {
      await videoFiltersModule?.registerBackgroundBlurVideoFilters();
      isBackgroundBlurRegisteredRef.current = true;
    }
    let filterName = 'BackgroundBlurMedium';
    if (blurIntensity === 'heavy') {
      filterName = 'BackgroundBlurHeavy';
    } else if (blurIntensity === 'light') {
      filterName = 'BackgroundBlurLight';
    }
    call?.tracer.trace('backgroundFilters.apply', filterName);
    call?.camera.state.mediaStream?.getVideoTracks().forEach(track => {
      track._setVideoEffect(filterName);
    });
    setCurrentBackgroundFilter({
      blur: blurIntensity
    });
  }, [call]);
  const applyVideoBlurFilter = (0, _react.useCallback)(async blurIntensity => {
    if (!isSupported) {
      return;
    }
    if (!isVideoBlurRegisteredRef.current) {
      await videoFiltersModule?.registerBlurVideoFilters();
      isVideoBlurRegisteredRef.current = true;
    }
    let filterName = 'BlurMedium';
    if (blurIntensity === 'heavy') {
      filterName = 'BlurHeavy';
    } else if (blurIntensity === 'light') {
      filterName = 'BlurLight';
    }
    call?.tracer.trace('backgroundFilters.apply', filterName);
    call?.camera.state.mediaStream?.getVideoTracks().forEach(track => {
      track._setVideoEffect(filterName);
    });
    setCurrentBackgroundFilter({
      blur: blurIntensity
    });
  }, [call]);
  const applyBackgroundImageFilter = (0, _react.useCallback)(async imageSource => {
    if (!isSupported) {
      return;
    }
    const source = resolveAssetSourceFunc(imageSource);
    const imageUri = source.uri;
    const registeredImageFiltersSet = registeredImageFiltersSetRef.current;
    if (!registeredImageFiltersSet.has(imageUri)) {
      await videoFiltersModule?.registerVirtualBackgroundFilter(imageSource);
      registeredImageFiltersSetRef.current.add(imageUri);
    }
    const filterName = `VirtualBackground-${imageUri}`;
    call?.tracer.trace('backgroundFilters.apply', filterName);
    call?.camera.state.mediaStream?.getVideoTracks().forEach(track => {
      track._setVideoEffect(filterName);
    });
    setCurrentBackgroundFilter({
      image: imageSource
    });
  }, [call]);
  const disableAllFilters = (0, _react.useCallback)(() => {
    if (!isSupported) {
      return;
    }
    call?.tracer.trace('backgroundFilters.disableAll', null);
    call?.camera.state.mediaStream?.getVideoTracks().forEach(track => {
      track._setVideoEffect(null);
    });
    setCurrentBackgroundFilter(undefined);
  }, [call]);
  const value = (0, _react.useMemo)(() => ({
    currentBackgroundFilter,
    isSupported,
    applyBackgroundImageFilter,
    applyBackgroundBlurFilter,
    applyVideoBlurFilter,
    disableAllFilters
  }), [applyBackgroundBlurFilter, applyBackgroundImageFilter, applyVideoBlurFilter, currentBackgroundFilter, disableAllFilters]);
  return /*#__PURE__*/_react.default.createElement(BackgroundFiltersContext.Provider, {
    value: value
  }, children);
};
exports.BackgroundFiltersProvider = BackgroundFiltersProvider;
//# sourceMappingURL=BackgroundFilters.js.map