{"version":3,"names":["_index","require","_reactNative","_EventEmitter","_Logger","_interopRequireDefault","_MediaStream","_MediaStreamTrack","_MediaStreamTrackEvent","_RTCDataChannel","_RTCDataChannelEvent","_RTCIceCandidate","_RTCIceCandidateEvent","_RTCRtpReceiveParameters","_RTCRtpReceiver","_RTCRtpSendParameters","_RTCRtpSender","_RTCRtpTransceiver","_RTCSessionDescription","_RTCTrackEvent","RTCUtil","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_defineProperty","_toPropertyKey","value","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","log","Logger","WebRTCModule","NativeModules","nextPeerConnectionId","RTCPeerConnection","EventTarget","constructor","configuration","_pcId","_configuration$iceSer","servers","iceServers","server","urls","url","Array","isArray","map","toLowerCase","filter","s","peerConnectionInit","Error","_transceivers","_remoteStreams","Map","_pendingTrackEvents","_registerEvents","debug","createOffer","options","sdpInfo","newTransceivers","transceiversInfo","peerConnectionCreateOffer","normalizeOfferOptions","forEach","transceiverOrder","transceiver","newSender","RTCRtpSender","sender","track","remoteTrack","receiver","MediaStreamTrack","newReceiver","RTCRtpReceiver","newTransceiver","RTCRtpTransceiver","_insertTransceiverSorted","_updateTransceivers","createAnswer","peerConnectionCreateAnswer","setConfiguration","peerConnectionSetConfiguration","setLocalDescription","sessionDescription","_desc","desc","_sessionDescription$s","type","sdp","isSdpTypeValid","peerConnectionSetLocalDescription","localDescription","RTCSessionDescription","setRemoteDescription","_sessionDescription$s2","_desc$type","Promise","reject","peerConnectionSetRemoteDescription","remoteDescription","pendingTrackEvents","ev","getTransceivers","id","_mid","mid","_currentDirection","currentDirection","_direction","direction","streams","streamInfo","streamId","stream","MediaStream","streamReactTag","tracks","_tracks","includes","push","eventData","dispatchEvent","RTCTrackEvent","MediaStreamTrackEvent","_setMutedInternal","addIceCandidate","candidate","sdpMLineIndex","undefined","sdpMid","newSdp","peerConnectionAddICECandidate","deepClone","addTrack","connectionState","_trackExists","streamIds","result","peerConnectionAddTrack","existingSender","getSenders","_track","existingTransceiver","addTransceiver","source","init","src","trackId","peerConnectionAddTransceiver","removeTrack","_peerConnectionId","find","peerConnectionRemoveTrack","getStats","selector","data","peerConnectionGetStats","JSON","parse","senders","receivers","getReceivers","matches","length","sr","stopped","Boolean","close","peerConnectionClose","_setStopped","restartIce","peerConnectionRestartIce","addListener","pcId","Event","iceConnectionState","removeListener","peerConnectionDispose","signalingState","receiverId","values","trackIdx","indexOf","splice","RTCIceCandidate","RTCIceCandidateEvent","iceGatheringState","channel","RTCDataChannel","dataChannel","RTCDataChannelEvent","muted","_setVideoTrackDimensions","width","height","createDataChannel","label","dataChannelDict","arguments","channelInfo","_sender$track","transceiverUpdates","removeStopped","update","transceiverId","_stopped","isStopped","_sender","_rtpParameters","RTCRtpSendParameters","senderRtpParameters","_receiver","RTCRtpReceiveParameters","receiverRtpParameters","order","sort","a","b","exports","proto","prototype","defineEventAttribute"],"sources":["RTCPeerConnection.ts"],"sourcesContent":["import { EventTarget, Event, defineEventAttribute } from 'event-target-shim/index';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport MediaStream from './MediaStream';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCRtpReceiveParameters from './RTCRtpReceiveParameters';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSendParameters from './RTCRtpSendParameters';\nimport RTCRtpSender from './RTCRtpSender';\nimport RTCRtpTransceiver from './RTCRtpTransceiver';\nimport RTCSessionDescription, { RTCSessionDescriptionInit } from './RTCSessionDescription';\nimport RTCTrackEvent from './RTCTrackEvent';\nimport * as RTCUtil from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\ntype RTCSignalingState =\n    | 'stable'\n    | 'have-local-offer'\n    | 'have-remote-offer'\n    | 'have-local-pranswer'\n    | 'have-remote-pranswer'\n    | 'closed';\n\ntype RTCIceGatheringState = 'new' | 'gathering' | 'complete';\n\ntype RTCPeerConnectionState = 'new' | 'connecting' | 'connected' | 'disconnected' | 'failed' | 'closed';\n\ntype RTCIceConnectionState = 'new' | 'checking' | 'connected' | 'completed' | 'failed' | 'disconnected' | 'closed';\n\ntype RTCDataChannelInit = {\n    ordered?: boolean,\n    maxPacketLifeTime?: number,\n    maxRetransmits?: number,\n    protocol?: string,\n    negotiated?: boolean,\n    id?: number\n};\n\ntype RTCIceServer = {\n    credential?: string,\n    url?: string, // Deprecated.\n    urls?: string | string[],\n    username?: string\n};\n\ntype RTCConfiguration = {\n    bundlePolicy?: 'balanced' | 'max-compat' | 'max-bundle',\n    iceCandidatePoolSize?: number,\n    iceServers?: RTCIceServer[],\n    iceTransportPolicy?: 'all' | 'relay',\n    rtcpMuxPolicy?: 'negotiate' | 'require'\n};\n\ntype RTCPeerConnectionEventMap = {\n    connectionstatechange: Event<'connectionstatechange'>\n    icecandidate: RTCIceCandidateEvent<'icecandidate'>\n    icecandidateerror: RTCIceCandidateEvent<'icecandidateerror'>\n    iceconnectionstatechange: Event<'iceconnectionstatechange'>\n    icegatheringstatechange: Event<'icegatheringstatechange'>\n    negotiationneeded: Event<'negotiationneeded'>\n    signalingstatechange: Event<'signalingstatechange'>\n    datachannel: RTCDataChannelEvent<'datachannel'>\n    track: RTCTrackEvent<'track'>\n    error: Event<'error'>\n}\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends EventTarget<RTCPeerConnectionEventMap> {\n    localDescription: RTCSessionDescription | null = null;\n    remoteDescription: RTCSessionDescription | null = null;\n    signalingState: RTCSignalingState = 'stable';\n    iceGatheringState: RTCIceGatheringState = 'new';\n    connectionState: RTCPeerConnectionState = 'new';\n    iceConnectionState: RTCIceConnectionState = 'new';\n\n    _pcId: number;\n    _transceivers: { order: number, transceiver: RTCRtpTransceiver }[];\n    _remoteStreams: Map<string, MediaStream>;\n    _pendingTrackEvents: any[];\n\n    constructor(configuration?: RTCConfiguration) {\n        super();\n\n        this._pcId = nextPeerConnectionId++;\n\n        // Sanitize ICE servers.\n        if (configuration) {\n            const servers = configuration?.iceServers ?? [];\n\n            for (const server of servers) {\n                let urls = server.url || server.urls;\n\n                delete server.url;\n                delete server.urls;\n\n                if (!urls) {\n                    continue;\n                }\n\n                if (!Array.isArray(urls)) {\n                    urls = [ urls ];\n                }\n\n                // Native WebRTC does case sensitive parsing.\n                server.urls = urls.map(url => url.toLowerCase());\n            }\n\n            // Filter out bogus servers.\n            configuration.iceServers = servers.filter(s => s.urls);\n        }\n\n        if (!WebRTCModule.peerConnectionInit(configuration, this._pcId)) {\n            throw new Error('Failed to initialize PeerConnection, check the native logs!');\n        }\n\n        this._transceivers = [];\n        this._remoteStreams = new Map();\n        this._pendingTrackEvents = [];\n\n        this._registerEvents();\n\n        log.debug(`${this._pcId} ctor`);\n    }\n\n    async createOffer(options) {\n        log.debug(`${this._pcId} createOffer`);\n\n        const {\n            sdpInfo,\n            newTransceivers,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateOffer(this._pcId, RTCUtil.normalizeOfferOptions(options));\n\n        log.debug(`${this._pcId} createOffer OK`);\n\n        newTransceivers?.forEach(t => {\n            const { transceiverOrder, transceiver } = t;\n            const newSender = new RTCRtpSender({ ...transceiver.sender, track: null });\n            const remoteTrack\n                = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n            const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n            const newTransceiver = new RTCRtpTransceiver({\n                ...transceiver,\n                sender: newSender,\n                receiver: newReceiver,\n            });\n\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n        });\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    async createAnswer() {\n        log.debug(`${this._pcId} createAnswer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateAnswer(this._pcId, {});\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    setConfiguration(configuration): void {\n        WebRTCModule.peerConnectionSetConfiguration(configuration, this._pcId);\n    }\n\n    async setLocalDescription(sessionDescription?: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setLocalDescription`);\n\n        let desc;\n\n        if (sessionDescription) {\n            desc = {\n                type: sessionDescription.type,\n                sdp: sessionDescription.sdp ?? ''\n            };\n\n            if (!RTCUtil.isSdpTypeValid(desc.type)) {\n                throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n            }\n        } else {\n            desc = null;\n        }\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetLocalDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.localDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.localDescription = null;\n        }\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc?.type === 'answer');\n\n        log.debug(`${this._pcId} setLocalDescription OK`);\n    }\n\n    async setRemoteDescription(sessionDescription: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setRemoteDescription`);\n\n        if (!sessionDescription) {\n            return Promise.reject(new Error('No session description provided'));\n        }\n\n        const desc = {\n            type: sessionDescription.type,\n            sdp: sessionDescription.sdp ?? ''\n        };\n\n        if (!RTCUtil.isSdpTypeValid(desc.type ?? '')) {\n            throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n        }\n\n        const {\n            sdpInfo,\n            newTransceivers,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetRemoteDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.remoteDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.remoteDescription = null;\n        }\n\n        newTransceivers?.forEach(t => {\n            const { transceiverOrder, transceiver } = t;\n            const newSender = new RTCRtpSender({ ...transceiver.sender, track: null });\n            const remoteTrack\n                = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n            const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n            const newTransceiver = new RTCRtpTransceiver({\n                ...transceiver,\n                sender: newSender,\n                receiver: newReceiver,\n            });\n\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n        });\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc.type === 'answer');\n\n        // Fire track events. They must fire before sRD resolves.\n        const pendingTrackEvents = this._pendingTrackEvents;\n\n        this._pendingTrackEvents = [];\n\n        for (const ev of pendingTrackEvents) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.receiver.id ===  ev.receiver.id);\n\n            // We need to fire this event for an existing track sometimes, like\n            // when the transceiver direction (on the sending side) switches from\n            // sendrecv to recvonly and then back.\n\n            // @ts-ignore\n            const track: MediaStreamTrack = transceiver.receiver.track;\n\n            transceiver._mid = ev.transceiver.mid;\n            transceiver._currentDirection = ev.transceiver.currentDirection;\n            transceiver._direction = ev.transceiver.direction;\n\n            // Get the stream object from the event. Create if necessary.\n            const streams: MediaStream[] = ev.streams.map(streamInfo => {\n                // Here we are making sure that we don't create stream objects that already exist\n                // So that event listeners do get the same object if it has been created before.\n                if (!this._remoteStreams.has(streamInfo.streamId)) {\n                    const stream = new MediaStream({\n                        streamId: streamInfo.streamId,\n                        streamReactTag: streamInfo.streamReactTag,\n                        tracks: []\n                    });\n\n                    this._remoteStreams.set(streamInfo.streamId, stream);\n                }\n\n                const stream = this._remoteStreams.get(streamInfo.streamId);\n\n                if (!stream?._tracks.includes(track)) {\n                    stream?._tracks.push(track);\n                }\n\n                return stream;\n            });\n\n            const eventData = {\n                streams,\n                transceiver,\n                track,\n                receiver: transceiver.receiver\n            };\n\n\n            this.dispatchEvent(new RTCTrackEvent('track', eventData));\n\n            streams.forEach(stream => {\n                stream.dispatchEvent(new MediaStreamTrackEvent('addtrack', { track }));\n            });\n\n            // Dispatch an unmute event for the track.\n            track._setMutedInternal(false);\n        }\n\n        log.debug(`${this._pcId} setRemoteDescription OK`);\n    }\n\n    async addIceCandidate(candidate): Promise<void> {\n        log.debug(`${this._pcId} addIceCandidate`);\n\n        if (!candidate || !candidate.candidate) {\n            // XXX end-of candidates is not implemented: https://bugs.chromium.org/p/webrtc/issues/detail?id=9218\n            return;\n        }\n\n        if ((candidate.sdpMLineIndex === null ||\n             candidate.sdpMLineIndex === undefined) &&\n            (candidate.sdpMid === null ||\n             candidate.sdpMid === undefined)\n        ) {\n            throw new TypeError('`sdpMLineIndex` and `sdpMid` must not be both null or undefined');\n        }\n\n        const newSdp = await WebRTCModule.peerConnectionAddICECandidate(\n            this._pcId,\n            RTCUtil.deepClone(candidate)\n        );\n\n        this.remoteDescription = new RTCSessionDescription(newSdp);\n    }\n\n    /**\n     * @brief Adds a new track to the {@link RTCPeerConnection},\n     * and indicates that it is contained in the specified {@link MediaStream}s.\n     * This method has to be synchronous as the W3C API expects a track to be returned\n     * @param {MediaStreamTrack} track The track to be added\n     * @param {...MediaStream} streams One or more {@link MediaStream}s the track needs to be added to\n     * https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack\n     */\n    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender {\n        log.debug(`${this._pcId} addTrack`);\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        if (this._trackExists(track)) {\n            throw new Error('Track already exists in a sender');\n        }\n\n        const streamIds = streams.map(s => s.id);\n        const result = WebRTCModule.peerConnectionAddTrack(this._pcId, track.id, { streamIds });\n\n        if (result === null) {\n            throw new Error('Could not add sender');\n        }\n\n        const { transceiverOrder, transceiver, sender } = result;\n\n        // According to the W3C docs, the sender could have been reused, and\n        // so we check if that is the case, and update accordingly.\n        const [ existingSender ] = this\n            .getSenders()\n            .filter(s => s.id === sender.id);\n\n        if (existingSender) {\n            // Update sender\n            existingSender._track = track;\n\n            // Update the corresponding transceiver as well\n            const [ existingTransceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === existingSender.id);\n\n            existingTransceiver._direction = transceiver.direction;\n            existingTransceiver._currentDirection = transceiver.currentDirection;\n\n            return existingSender;\n        }\n\n        // This is a new transceiver, should create a transceiver for it and add it\n        const newSender = new RTCRtpSender({ ...transceiver.sender, track });\n        const remoteTrack = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n        const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n        const newTransceiver = new RTCRtpTransceiver({\n            ...transceiver,\n            sender: newSender,\n            receiver: newReceiver,\n        });\n\n        this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n\n        return newSender;\n    }\n\n    addTransceiver(source: 'audio' | 'video' | MediaStreamTrack, init): RTCRtpTransceiver {\n        log.debug(`${this._pcId} addTransceiver`);\n\n        let src = {};\n\n        if (source === 'audio') {\n            src = { type: 'audio' };\n        } else if (source === 'video') {\n            src = { type: 'video' };\n        } else {\n            src = { trackId: source.id };\n        }\n\n        // Extract the stream ids\n        if (init && init.streams) {\n            init.streamIds = init.streams.map(stream => stream.id);\n        }\n\n        const result = WebRTCModule.peerConnectionAddTransceiver(this._pcId, { ...src, init: { ...init } });\n\n        if (result === null) {\n            throw new Error('Transceiver could not be added');\n        }\n\n        const t = result.transceiver;\n        let track: MediaStreamTrack | null = null;\n\n        if (typeof source === 'string') {\n            if (t.sender.track) {\n                track = new MediaStreamTrack(t.sender.track);\n            }\n        } else {\n            // 'source' is a MediaStreamTrack\n            track = source;\n        }\n\n        const sender = new RTCRtpSender({ ...t.sender, track });\n        const remoteTrack = t.receiver.track ? new MediaStreamTrack(t.receiver.track) : null;\n        const receiver = new RTCRtpReceiver({ ...t.receiver, track: remoteTrack });\n        const transceiver = new RTCRtpTransceiver({\n            ...result.transceiver,\n            sender,\n            receiver\n        });\n\n        this._insertTransceiverSorted(result.transceiverOrder, transceiver);\n\n        return transceiver;\n    }\n\n    removeTrack(sender: RTCRtpSender) {\n        log.debug(`${this._pcId} removeTrack`);\n\n        if (this._pcId !== sender._peerConnectionId) {\n            throw new Error('Sender does not belong to this peer connection');\n        }\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        const existingSender = this\n            .getSenders()\n            .find(s => s === sender);\n\n        if (!existingSender) {\n            throw new Error('Sender does not exist');\n        }\n\n        if (existingSender.track === null) {\n            return;\n        }\n\n        // Blocking!\n        WebRTCModule.peerConnectionRemoveTrack(this._pcId, sender.id);\n\n        existingSender._track = null;\n\n        const [ existingTransceiver ] = this\n            .getTransceivers()\n            .filter(t => t.sender.id === existingSender.id);\n\n        existingTransceiver._direction = existingTransceiver.direction === 'sendrecv' ? 'recvonly' : 'inactive';\n    }\n\n    async getStats(selector?: MediaStreamTrack) {\n        log.debug(`${this._pcId} getStats`);\n\n        if (!selector) {\n            const data = await WebRTCModule.peerConnectionGetStats(this._pcId);\n\n            /**\n             * On both Android and iOS it is faster to construct a single\n             * JSON string representing the Map of StatsReports and have it\n             * pass through the React Native bridge rather than the Map of\n             * StatsReports. While the implementations do try to be faster in\n             * general, the stress is on being faster to pass through the React\n             * Native bridge which is a bottleneck that tends to be visible in\n             * the UI when there is congestion involving UI-related passing.\n             */\n            return new Map(JSON.parse(data));\n        } else {\n            const senders = this.getSenders().filter(s => s.track === selector);\n            const receivers = this.getReceivers().filter(r => r.track === selector);\n            const matches = senders.length + receivers.length;\n\n            if (matches === 0) {\n                throw new Error('Invalid selector: could not find matching sender / receiver');\n            } else if (matches > 1) {\n                throw new Error('Invalid selector: multiple matching senders / receivers');\n            } else {\n                const sr = senders[0] || receivers[0];\n\n                return sr.getStats();\n            }\n        }\n    }\n\n    getTransceivers(): RTCRtpTransceiver[] {\n        return this._transceivers.map(e => e.transceiver);\n    }\n\n    getSenders(): RTCRtpSender[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.sender).filter(Boolean);\n    }\n\n    getReceivers(): RTCRtpReceiver[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.receiver).filter(Boolean);\n    }\n\n    close(): void {\n        log.debug(`${this._pcId} close`);\n\n        if (this.connectionState === 'closed') {\n            return;\n        }\n\n        WebRTCModule.peerConnectionClose(this._pcId);\n\n        // Mark transceivers as stopped.\n        this._transceivers.forEach(({ transceiver })=> {\n            transceiver._setStopped();\n        });\n    }\n\n    restartIce(): void {\n        WebRTCModule.peerConnectionRestartIce(this._pcId);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'peerConnectionOnRenegotiationNeeded', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.dispatchEvent(new Event('negotiationneeded'));\n        });\n\n        addListener(this, 'peerConnectionIceConnectionChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceConnectionState = ev.iceConnectionState;\n\n            this.dispatchEvent(new Event('iceconnectionstatechange'));\n        });\n\n        addListener(this, 'peerConnectionStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.connectionState = ev.connectionState;\n\n            this.dispatchEvent(new Event('connectionstatechange'));\n\n            if (ev.connectionState === 'closed') {\n                // This PeerConnection is done, clean up.\n                removeListener(this);\n\n                WebRTCModule.peerConnectionDispose(this._pcId);\n            }\n        });\n\n        addListener(this, 'peerConnectionSignalingStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.signalingState = ev.signalingState;\n\n            this.dispatchEvent(new Event('signalingstatechange'));\n        });\n\n        // Consider moving away from this event: https://github.com/WebKit/WebKit/pull/3953\n        addListener(this, 'peerConnectionOnTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} ontrack`);\n\n            // NOTE: We need to make sure the track event fires right before sRD completes,\n            // so we queue them up here and dispatch the events when sRD fires, but before completing it.\n            // In the future we should probably implement out own logic and drop this event altogether.\n            this._pendingTrackEvents.push(ev);\n        });\n\n        addListener(this, 'peerConnectionOnRemoveTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} onremovetrack ${ev.receiverId}`);\n\n            const receiver = this.getReceivers().find(r => r.id === ev.receiverId);\n            const track = receiver?.track;\n\n            if (receiver && track) {\n                // As per the spec:\n                // - Remove the track from any media streams that were previously passed to the `track` event.\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-removetrack,\n                // - Mark the track as muted:\n                // https://w3c.github.io/webrtc-pc/#process-remote-track-removal\n                for (const stream of this._remoteStreams.values()) {\n                    if (stream._tracks.includes(track)) {\n                        const trackIdx = stream._tracks.indexOf(track);\n\n                        log.debug(`${this._pcId} removetrack ${track.id}`);\n\n                        stream._tracks.splice(trackIdx, 1);\n\n                        stream.dispatchEvent(new MediaStreamTrackEvent('removetrack', { track }));\n\n                        // Dispatch a mute event for the track.\n                        track._setMutedInternal(true);\n                    }\n                }\n            }\n        });\n\n        addListener(this, 'peerConnectionGotICECandidate', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const sdpInfo = ev.sdp;\n\n            // Can happen when doing a rollback.\n            if (sdpInfo.type && sdpInfo.sdp) {\n                this.localDescription = new RTCSessionDescription(sdpInfo);\n            } else {\n                this.localDescription = null;\n            }\n\n            const candidate = new RTCIceCandidate(ev.candidate);\n\n            this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate }));\n        });\n\n        addListener(this, 'peerConnectionIceGatheringChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceGatheringState = ev.iceGatheringState;\n\n            if (this.iceGatheringState === 'complete') {\n                const sdpInfo = ev.sdp;\n\n                // Can happen when doing a rollback.\n                if (sdpInfo.type && sdpInfo.sdp) {\n                    this.localDescription = new RTCSessionDescription(sdpInfo);\n                } else {\n                    this.localDescription = null;\n                }\n\n                this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate: null }));\n            }\n\n            this.dispatchEvent(new Event('icegatheringstatechange'));\n        });\n\n        addListener(this, 'peerConnectionDidOpenDataChannel', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const channel = new RTCDataChannel(ev.dataChannel);\n\n            this.dispatchEvent(new RTCDataChannelEvent('datachannel', { channel }));\n\n            // Send 'open' event. Native doesn't update the state since it's already\n            // set at this point.\n            channel.dispatchEvent(new RTCDataChannelEvent('open', { channel }));\n        });\n\n        addListener(this, 'mediaStreamTrackMuteChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const [\n                track\n            ] = this.getReceivers().map(r => r.track).filter(t => t?.id === ev.trackId);\n\n            if (track) {\n                track._setMutedInternal(ev.muted);\n            }\n        });\n\n        // Handle dimension changes for remote tracks only (local tracks handled by MediaStreamTrack)\n        addListener(this, 'videoTrackDimensionChanged', (ev: any) => {\n            // Only handle remote tracks (pcId !== -1) and only for this peer connection\n            if (ev.pcId === -1 || ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const [\n                track\n            ] = this.getReceivers().map(r => r.track).filter(t => t?.id === ev.trackId);\n\n            if (track) {\n                track._setVideoTrackDimensions(ev.width, ev.height);\n            }\n        });\n    }\n\n    /**\n     * Creates a new RTCDataChannel object with the given label. The\n     * RTCDataChannelInit dictionary can be used to configure properties of the\n     * underlying channel such as data reliability.\n     *\n     * @param {string} label - the value with which the label attribute of the new\n     * instance is to be initialized\n     * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n     * values with which to initialize corresponding attributes of the new\n     * instance such as id\n     */\n    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel {\n        if (arguments.length === 0) {\n            throw new TypeError('1 argument required, but 0 present');\n        }\n\n        if (dataChannelDict && 'id' in dataChannelDict) {\n            const id = dataChannelDict.id;\n\n            if (typeof id !== 'number') {\n                throw new TypeError('DataChannel id must be a number: ' + id);\n            }\n        }\n\n        const channelInfo = WebRTCModule.createDataChannel(this._pcId, String(label), dataChannelDict);\n\n        if (channelInfo === null) {\n            throw new TypeError('Failed to create new DataChannel');\n        }\n\n        return new RTCDataChannel(channelInfo);\n    }\n\n    /**\n     * Check whether a media stream track exists already in a sender.\n     * See https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack for more information\n     */\n    _trackExists(track: MediaStreamTrack): boolean {\n        const [ sender ] = this\n            .getSenders()\n            .filter(\n                sender => sender.track?.id === track.id\n            );\n\n        return sender? true : false;\n    }\n\n    /**\n     * Updates transceivers after offer/answer updates if necessary.\n     */\n    _updateTransceivers(transceiverUpdates, removeStopped = false) {\n        for (const update of transceiverUpdates) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === update.transceiverId);\n\n            if (!transceiver) {\n                continue;\n            }\n\n            if (update.currentDirection) {\n                transceiver._currentDirection = update.currentDirection;\n            }\n\n            transceiver._mid = update.mid;\n            transceiver._stopped = Boolean(update.isStopped);\n            transceiver._sender._rtpParameters = new RTCRtpSendParameters(update.senderRtpParameters);\n            transceiver._receiver._rtpParameters = new RTCRtpReceiveParameters(update.receiverRtpParameters);\n        }\n\n        if (removeStopped) {\n            const stopped = this.getTransceivers().filter(t => t.stopped);\n            const newTransceivers = this._transceivers.filter(t => !stopped.includes(t.transceiver));\n\n            this._transceivers = newTransceivers;\n        }\n    }\n\n    /**\n     * Inserts transceiver into the transceiver array in the order they are created (timestamp).\n     * @param order an index that refers to when it it was created relatively.\n     * @param transceiver the transceiver object to be inserted.\n     */\n    _insertTransceiverSorted(order: number, transceiver: RTCRtpTransceiver) {\n        this._transceivers.push({ order, transceiver });\n        this._transceivers.sort((a, b) => a.order - b.order);\n    }\n}\n\n/**\n * Define the `onxxx` event handlers.\n */\nconst proto = RTCPeerConnection.prototype;\n\ndefineEventAttribute(proto, 'connectionstatechange');\ndefineEventAttribute(proto, 'icecandidate');\ndefineEventAttribute(proto, 'icecandidateerror');\ndefineEventAttribute(proto, 'iceconnectionstatechange');\ndefineEventAttribute(proto, 'icegatheringstatechange');\ndefineEventAttribute(proto, 'negotiationneeded');\ndefineEventAttribute(proto, 'signalingstatechange');\ndefineEventAttribute(proto, 'datachannel');\ndefineEventAttribute(proto, 'track');\ndefineEventAttribute(proto, 'error');\n"],"mappings":"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","ignoreList":[]}