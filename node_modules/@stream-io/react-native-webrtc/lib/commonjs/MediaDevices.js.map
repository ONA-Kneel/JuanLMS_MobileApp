{"version":3,"names":["_index","require","_reactNative","_EventEmitter","_getDisplayMedia","_interopRequireDefault","_getUserMedia","e","__esModule","default","WebRTCModule","NativeModules","videoTrackDimensionChangedEventQueue","exports","Map","listenersReady","ensureListeners","addListener","ev","pcId","trackId","width","height","set","MediaDevices","EventTarget","enumerateDevices","Promise","resolve","getDisplayMedia","getUserMedia","constraints","proto","prototype","defineEventAttribute","_default"],"sources":["MediaDevices.ts"],"sourcesContent":["import { EventTarget, Event, defineEventAttribute } from 'event-target-shim/index';\nimport { NativeModules } from 'react-native';\n\nimport { addListener } from './EventEmitter';\nimport getDisplayMedia from './getDisplayMedia';\nimport getUserMedia, { Constraints } from './getUserMedia';\n\nconst { WebRTCModule } = NativeModules;\n\nexport type VideoTrackDimension = {\n    width: number;\n    height: number;\n};\n\nexport const videoTrackDimensionChangedEventQueue = new Map<string, VideoTrackDimension>();\n\nlet listenersReady = false;\n\nfunction ensureListeners() {\n    if (listenersReady) {\n        return;\n    }\n\n    addListener('MediaDevices', 'videoTrackDimensionChanged', (ev: any) => {\n        // We only want to queue events for local tracks.\n        if (ev.pcId !== -1) {\n            return;\n        }\n\n        const { trackId, width, height } = ev;\n\n        videoTrackDimensionChangedEventQueue.set(trackId, { width, height });\n    });\n\n    listenersReady = true;\n}\n\ntype MediaDevicesEventMap = {\n    devicechange: Event<'devicechange'>\n}\n\nclass MediaDevices extends EventTarget<MediaDevicesEventMap> {\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code enumerateDevices}\n     * implementation.\n     */\n    enumerateDevices() {\n        return new Promise(resolve => WebRTCModule.enumerateDevices(resolve));\n    }\n\n    /**\n     * W3C \"Screen Capture\" compatible {@code getDisplayMedia} implementation.\n     * See: https://w3c.github.io/mediacapture-screen-share/\n     *\n     * @returns {Promise}\n     */\n    getDisplayMedia() {\n        ensureListeners();\n\n        return getDisplayMedia();\n    }\n\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code getUserMedia}\n     * implementation.\n     * See: https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-enumeratedevices\n     *\n     * @param {*} constraints\n     * @returns {Promise}\n     */\n    getUserMedia(constraints: Constraints) {\n        ensureListeners();\n\n        return getUserMedia(constraints);\n    }\n}\n\n/**\n * Define the `onxxx` event handlers.\n */\nconst proto = MediaDevices.prototype;\n\ndefineEventAttribute(proto, 'devicechange');\n\n\nexport default new MediaDevices();\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAEA,IAAAE,aAAA,GAAAF,OAAA;AACA,IAAAG,gBAAA,GAAAC,sBAAA,CAAAJ,OAAA;AACA,IAAAK,aAAA,GAAAD,sBAAA,CAAAJ,OAAA;AAA2D,SAAAI,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE3D,MAAM;EAAEG;AAAa,CAAC,GAAGC,0BAAa;AAO/B,MAAMC,oCAAoC,GAAAC,OAAA,CAAAD,oCAAA,GAAG,IAAIE,GAAG,CAA8B,CAAC;AAE1F,IAAIC,cAAc,GAAG,KAAK;AAE1B,SAASC,eAAeA,CAAA,EAAG;EACvB,IAAID,cAAc,EAAE;IAChB;EACJ;EAEA,IAAAE,yBAAW,EAAC,cAAc,EAAE,4BAA4B,EAAGC,EAAO,IAAK;IACnE;IACA,IAAIA,EAAE,CAACC,IAAI,KAAK,CAAC,CAAC,EAAE;MAChB;IACJ;IAEA,MAAM;MAAEC,OAAO;MAAEC,KAAK;MAAEC;IAAO,CAAC,GAAGJ,EAAE;IAErCN,oCAAoC,CAACW,GAAG,CAACH,OAAO,EAAE;MAAEC,KAAK;MAAEC;IAAO,CAAC,CAAC;EACxE,CAAC,CAAC;EAEFP,cAAc,GAAG,IAAI;AACzB;AAMA,MAAMS,YAAY,SAASC,kBAAW,CAAuB;EACzD;AACJ;AACA;AACA;EACIC,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIlB,YAAY,CAACgB,gBAAgB,CAACE,OAAO,CAAC,CAAC;EACzE;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAAA,EAAG;IACdb,eAAe,CAAC,CAAC;IAEjB,OAAO,IAAAa,wBAAe,EAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACC,WAAwB,EAAE;IACnCf,eAAe,CAAC,CAAC;IAEjB,OAAO,IAAAc,qBAAY,EAACC,WAAW,CAAC;EACpC;AACJ;;AAEA;AACA;AACA;AACA,MAAMC,KAAK,GAAGR,YAAY,CAACS,SAAS;AAEpC,IAAAC,2BAAoB,EAACF,KAAK,EAAE,cAAc,CAAC;AAAC,IAAAG,QAAA,GAAAtB,OAAA,CAAAJ,OAAA,GAG7B,IAAIe,YAAY,CAAC,CAAC","ignoreList":[]}