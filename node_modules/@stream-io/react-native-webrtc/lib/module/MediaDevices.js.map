{"version":3,"names":["EventTarget","defineEventAttribute","NativeModules","addListener","getDisplayMedia","getUserMedia","WebRTCModule","videoTrackDimensionChangedEventQueue","Map","listenersReady","ensureListeners","ev","pcId","trackId","width","height","set","MediaDevices","enumerateDevices","Promise","resolve","constraints","proto","prototype"],"sources":["MediaDevices.ts"],"sourcesContent":["import { EventTarget, Event, defineEventAttribute } from 'event-target-shim/index';\nimport { NativeModules } from 'react-native';\n\nimport { addListener } from './EventEmitter';\nimport getDisplayMedia from './getDisplayMedia';\nimport getUserMedia, { Constraints } from './getUserMedia';\n\nconst { WebRTCModule } = NativeModules;\n\nexport type VideoTrackDimension = {\n    width: number;\n    height: number;\n};\n\nexport const videoTrackDimensionChangedEventQueue = new Map<string, VideoTrackDimension>();\n\nlet listenersReady = false;\n\nfunction ensureListeners() {\n    if (listenersReady) {\n        return;\n    }\n\n    addListener('MediaDevices', 'videoTrackDimensionChanged', (ev: any) => {\n        // We only want to queue events for local tracks.\n        if (ev.pcId !== -1) {\n            return;\n        }\n\n        const { trackId, width, height } = ev;\n\n        videoTrackDimensionChangedEventQueue.set(trackId, { width, height });\n    });\n\n    listenersReady = true;\n}\n\ntype MediaDevicesEventMap = {\n    devicechange: Event<'devicechange'>\n}\n\nclass MediaDevices extends EventTarget<MediaDevicesEventMap> {\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code enumerateDevices}\n     * implementation.\n     */\n    enumerateDevices() {\n        return new Promise(resolve => WebRTCModule.enumerateDevices(resolve));\n    }\n\n    /**\n     * W3C \"Screen Capture\" compatible {@code getDisplayMedia} implementation.\n     * See: https://w3c.github.io/mediacapture-screen-share/\n     *\n     * @returns {Promise}\n     */\n    getDisplayMedia() {\n        ensureListeners();\n\n        return getDisplayMedia();\n    }\n\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code getUserMedia}\n     * implementation.\n     * See: https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-enumeratedevices\n     *\n     * @param {*} constraints\n     * @returns {Promise}\n     */\n    getUserMedia(constraints: Constraints) {\n        ensureListeners();\n\n        return getUserMedia(constraints);\n    }\n}\n\n/**\n * Define the `onxxx` event handlers.\n */\nconst proto = MediaDevices.prototype;\n\ndefineEventAttribute(proto, 'devicechange');\n\n\nexport default new MediaDevices();\n"],"mappings":"AAAA,SAASA,WAAW,EAASC,oBAAoB,QAAQ,yBAAyB;AAClF,SAASC,aAAa,QAAQ,cAAc;AAE5C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,YAAY,MAAuB,gBAAgB;AAE1D,MAAM;EAAEC;AAAa,CAAC,GAAGJ,aAAa;AAOtC,OAAO,MAAMK,oCAAoC,GAAG,IAAIC,GAAG,CAA8B,CAAC;AAE1F,IAAIC,cAAc,GAAG,KAAK;AAE1B,SAASC,eAAeA,CAAA,EAAG;EACvB,IAAID,cAAc,EAAE;IAChB;EACJ;EAEAN,WAAW,CAAC,cAAc,EAAE,4BAA4B,EAAGQ,EAAO,IAAK;IACnE;IACA,IAAIA,EAAE,CAACC,IAAI,KAAK,CAAC,CAAC,EAAE;MAChB;IACJ;IAEA,MAAM;MAAEC,OAAO;MAAEC,KAAK;MAAEC;IAAO,CAAC,GAAGJ,EAAE;IAErCJ,oCAAoC,CAACS,GAAG,CAACH,OAAO,EAAE;MAAEC,KAAK;MAAEC;IAAO,CAAC,CAAC;EACxE,CAAC,CAAC;EAEFN,cAAc,GAAG,IAAI;AACzB;AAMA,MAAMQ,YAAY,SAASjB,WAAW,CAAuB;EACzD;AACJ;AACA;AACA;EACIkB,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAId,YAAY,CAACY,gBAAgB,CAACE,OAAO,CAAC,CAAC;EACzE;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIhB,eAAeA,CAAA,EAAG;IACdM,eAAe,CAAC,CAAC;IAEjB,OAAON,eAAe,CAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACgB,WAAwB,EAAE;IACnCX,eAAe,CAAC,CAAC;IAEjB,OAAOL,YAAY,CAACgB,WAAW,CAAC;EACpC;AACJ;;AAEA;AACA;AACA;AACA,MAAMC,KAAK,GAAGL,YAAY,CAACM,SAAS;AAEpCtB,oBAAoB,CAACqB,KAAK,EAAE,cAAc,CAAC;AAG3C,eAAe,IAAIL,YAAY,CAAC,CAAC","ignoreList":[]}