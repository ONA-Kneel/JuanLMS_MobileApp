{"version":3,"names":["EventTarget","Event","defineEventAttribute","NativeModules","addListener","removeListener","Logger","videoTrackDimensionChangedEventQueue","deepClone","normalizeConstraints","log","WebRTCModule","MediaStreamTrack","constructor","info","_defineProperty","id","kind","remote","_constraints","constraints","_enabled","enabled","_settings","settings","_muted","_peerConnectionId","peerConnectionId","_readyState","readyState","_registerEvents","_processVideoTrackDimensionChangedQueue","Boolean","mediaStreamTrackSetEnabled","muted","stop","_switchCamera","Error","deviceId","facingMode","applyConstraints","_setVideoEffects","names","mediaStreamTrackSetVideoEffects","_setVideoEffect","name","undefined","_setMutedInternal","dispatchEvent","_setVideoTrackDimensions","width","height","_setVolume","volume","mediaStreamTrackSetVolume","normalized","video","mediaStreamTrackApplyConstraints","clone","mediaStreamTrackClone","getCapabilities","getConstraints","getSettings","ev","trackId","debug","pcId","eventData","get","delete","release","mediaStreamTrackRelease","proto","prototype"],"sources":["MediaStreamTrack.ts"],"sourcesContent":["import { EventTarget, Event, defineEventAttribute } from 'event-target-shim/index';\nimport { NativeModules } from 'react-native';\n\nimport { MediaTrackConstraints } from './Constraints';\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport { videoTrackDimensionChangedEventQueue } from './MediaDevices';\nimport { deepClone, normalizeConstraints } from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\n\ntype MediaStreamTrackState = 'live' | 'ended';\n\nexport type MediaStreamTrackInfo = {\n    id: string;\n    kind: string;\n    remote: boolean;\n    constraints: object;\n    enabled: boolean;\n    settings: object;\n    peerConnectionId: number;\n    readyState: MediaStreamTrackState;\n}\n\nexport type MediaTrackSettings = {\n    width?: number;\n    height?: number;\n    frameRate?: number;\n    facingMode?: string;\n    deviceId?: string;\n    groupId?: string;\n}\n\ntype MediaStreamTrackEventMap = {\n    ended: Event<'ended'>;\n    mute: Event<'mute'>;\n    unmute: Event<'unmute'>;\n}\n\nexport default class MediaStreamTrack extends EventTarget<MediaStreamTrackEventMap> {\n    _constraints: MediaTrackConstraints;\n    _enabled: boolean;\n    _settings: MediaTrackSettings;\n    _muted: boolean;\n    _peerConnectionId: number;\n    _readyState: MediaStreamTrackState;\n\n    readonly id: string;\n    readonly kind: string;\n    readonly label: string = '';\n    readonly remote: boolean;\n\n    constructor(info: MediaStreamTrackInfo) {\n        super();\n\n        this.id = info.id;\n        this.kind = info.kind;\n        this.remote = info.remote;\n        this._constraints = info.constraints || {};\n        this._enabled = info.enabled;\n        this._settings = info.settings || {};\n        this._muted = false;\n        this._peerConnectionId = info.peerConnectionId;\n        this._readyState = info.readyState;\n\n        if (!this.remote) {\n            this._registerEvents();\n\n            if (this.kind === 'video') {\n                this._processVideoTrackDimensionChangedQueue();\n            }\n        }\n    }\n\n    get enabled(): boolean {\n        return this._enabled;\n    }\n\n    set enabled(enabled: boolean) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabled = Boolean(enabled);\n\n        if (this._readyState === 'ended') {\n            return;\n        }\n\n        WebRTCModule.mediaStreamTrackSetEnabled(this.remote ? this._peerConnectionId : -1, this.id, this._enabled);\n    }\n\n    get muted(): boolean {\n        return this._muted;\n    }\n\n    get readyState(): string {\n        return this._readyState;\n    }\n\n    stop(): void {\n        this.enabled = false;\n        this._readyState = 'ended';\n    }\n\n    /**\n     * Private / custom API for switching the cameras on the fly, without the\n     * need for adding / removing tracks or doing any SDP renegotiation.\n     *\n     * This is how the reference application (AppRTCMobile) implements camera\n     * switching.\n     *\n     * @deprecated Use applyConstraints instead.\n     */\n    _switchCamera(): void {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        const constraints = deepClone(this._settings);\n\n        delete constraints.deviceId;\n        constraints.facingMode = this._settings.facingMode === 'user' ? 'environment' : 'user';\n\n        this.applyConstraints(constraints);\n    }\n\n    _setVideoEffects(names: string[]) {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSetVideoEffects(this.id, names);\n    }\n\n    _setVideoEffect(name: string | null | undefined) {\n        if (name === null || name === undefined) {\n            this._setVideoEffects([]);\n\n            return;\n        }\n\n        this._setVideoEffects([ name ]);\n    }\n\n    /**\n     * Internal function which is used to set the muted state on remote tracks and\n     * emit the mute / unmute event.\n     *\n     * @param muted Whether the track should be marked as muted / unmuted.\n     */\n    _setMutedInternal(muted: boolean) {\n        if (!this.remote) {\n            throw new Error('Track is not remote!');\n        }\n\n        this._muted = muted;\n        this.dispatchEvent(new Event(muted ? 'mute' : 'unmute'));\n    }\n\n    /**\n     * Internal function which is used to set the video dimensions on video tracks.\n     *\n     * @param width The new width of the video track.\n     * @param height The new height of the video track.\n     */\n    _setVideoTrackDimensions(width: number, height: number) {\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        this._settings = {\n            ...this._settings,\n            width,\n            height\n        };\n    }\n\n    /**\n     * Custom API for setting the volume on an individual audio track.\n     *\n     * @param volume a gain value in the range of 0-10. defaults to 1.0\n     */\n    _setVolume(volume: number) {\n        if (this.kind !== 'audio') {\n            throw new Error('Only implemented for audio tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSetVolume(this.remote ? this._peerConnectionId : -1, this.id, volume);\n    }\n\n    /**\n     * Applies a new set of constraints to the track.\n     *\n     * @param constraints An object listing the constraints\n     * to apply to the track's constrainable properties; any existing\n     * constraints are replaced with the new values specified, and any\n     * constrainable properties not included are restored to their default\n     * constraints. If this parameter is omitted, all currently set custom\n     * constraints are cleared.\n     */\n    async applyConstraints(constraints?: MediaTrackConstraints): Promise<void> {\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        const normalized = normalizeConstraints({ video: constraints ?? true });\n\n        this._settings = await WebRTCModule.mediaStreamTrackApplyConstraints(this.id, normalized.video);\n        this._constraints = constraints ?? {};\n    }\n\n    clone(): MediaStreamTrack {\n        if (this.remote) {\n            throw new Error('clone is not implemented for remote tracks');\n        }\n\n        const id = WebRTCModule.mediaStreamTrackClone(this.id);\n\n        return new MediaStreamTrack({\n            id,\n            kind: this.kind,\n            remote: this.remote,\n            constraints: deepClone(this._constraints),\n            enabled: this._enabled,\n            settings: deepClone(this._settings),\n            peerConnectionId: this._peerConnectionId,\n            readyState: this._readyState,\n        });\n    }\n\n    getCapabilities(): never {\n        throw new Error('Not implemented.');\n    }\n\n    getConstraints() {\n        return deepClone(this._constraints);\n    }\n\n    getSettings(): MediaTrackSettings {\n        return deepClone(this._settings);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'mediaStreamTrackEnded', (ev: any) => {\n            if (ev.trackId !== this.id || this._readyState === 'ended') {\n                return;\n            }\n\n            log.debug(`${this.id} mediaStreamTrackEnded`);\n            this._readyState = 'ended';\n\n            this.dispatchEvent(new Event('ended'));\n        });\n\n        // Add dimension change listener for local video tracks\n        if (this.kind === 'video') {\n            addListener(this, 'videoTrackDimensionChanged', (ev: any) => {\n                // Only handle local tracks (pcId === -1) and only for this track\n                if (ev.pcId !== -1 || ev.trackId !== this.id) {\n                    return;\n                }\n\n                this._setVideoTrackDimensions(ev.width, ev.height);\n            });\n        }\n    }\n\n    /**\n     * Processes any queued `videoTrackDimensionChanged` events for this track.\n     */\n    _processVideoTrackDimensionChangedQueue(): void {\n        const eventData = videoTrackDimensionChangedEventQueue.get(this.id);\n\n        if (!eventData) {\n            return;\n        }\n\n        this._setVideoTrackDimensions(eventData.width, eventData.height);\n\n        videoTrackDimensionChangedEventQueue.delete(this.id);\n    }\n\n    release(): void {\n        if (this.remote) {\n            return;\n        }\n\n        removeListener(this);\n        WebRTCModule.mediaStreamTrackRelease(this.id);\n\n        if (this.kind === 'video') {\n            videoTrackDimensionChangedEventQueue.delete(this.id);\n        }\n    }\n}\n\n/**\n * Define the `onxxx` event handlers.\n */\nconst proto = MediaStreamTrack.prototype;\n\ndefineEventAttribute(proto, 'ended');\ndefineEventAttribute(proto, 'mute');\ndefineEventAttribute(proto, 'unmute');\n"],"mappings":"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","ignoreList":[]}